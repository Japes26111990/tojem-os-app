TOJEM Application - Full Codebase
Generated on: 06/30/2025 11:28:16


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\api\firebase.js
==================================================
// src/api/firebase.js

import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import { getFunctions } from 'firebase/functions'; // Import getFunctions

// Your web app's Firebase configuration from the .env.local file
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Initialize and export Firebase services
export const auth = getAuth(app);
export const db = getFirestore(app);
export const functions = getFunctions(app); // Initialize and export getFunctions

export default app;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\api\firestore.js
==================================================
import {
    collection,
    getDocs,
    addDoc,
    deleteDoc,
    doc,
    serverTimestamp,
    onSnapshot,
    query,
    orderBy,
    updateDoc,
    where,
    getDoc,
    writeBatch,
    setDoc,
    runTransaction,
    increment,
    limit
} from 'firebase/firestore';
import { db, functions } from './firebase';
import { httpsCallable } from 'firebase/functions'; // THIS IS THE CORRECT IMPORT FOR httpsCallable

// --- DEPARTMENTS API ---
const departmentsCollection = collection(db, 'departments');
export const getDepartments = async () => {
    const snapshot = await getDocs(departmentsCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addDepartment = (departmentName) => {
    return addDoc(departmentsCollection, { name: departmentName, requiredSkills: [] });
};
export const deleteDepartment = (departmentId) => {
    const departmentDoc = doc(db, 'departments', departmentId);
    return deleteDoc(departmentDoc);
};
export const updateDepartmentRequiredSkills = async (departmentId, requiredSkillsData) => {
    const departmentDocRef = doc(db, 'departments', departmentId);
    const filteredSkillsData = requiredSkillsData.filter(skill =>
        skill.minimumProficiency > 0 || skill.importanceWeight > 0
    );
    return updateDoc(departmentDocRef, { requiredSkills: filteredSkillsData });
};
export const getDepartmentSkills = async (departmentId) => {
    if (!departmentId) return [];
    const departmentDocRef = doc(db, 'departments', departmentId);
    const departmentDoc = await getDoc(departmentDocRef);
    if (departmentDoc.exists()) {
        const data = departmentDoc.data();
        return data.requiredSkills || [];
    }
    return [];
};

// --- SKILLS API ---
const skillsCollection = collection(db, 'skills');
const skillHistoryCollection = collection(db, 'skillHistory');
export const getSkills = async () => {
    const snapshot = await getDocs(query(skillsCollection, orderBy('name')));
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addSkill = (skillName) => {
    return addDoc(skillsCollection, { name: skillName });
};
export const updateSkill = (skillId, updatedData) => {
    const skillDoc = doc(db, 'skills', skillId);
    return updateDoc(skillDoc, updatedData);
};
export const deleteSkill = (skillId) => {
    const skillDoc = doc(db, 'skills', skillId);
    return deleteDoc(skillDoc);
};
export const getSkillHistoryForEmployee = async (employeeId) => {
    const q = query(skillHistoryCollection, where('employeeId', '==', employeeId));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const getSkillNameById = async (skillId) => {
    const skills = await getSkills();
    const skill = skills.find(s => s.id === skillId);
    return skill ? skill.name : 'Unknown Skill';
};

// --- TOOLS API ---
const toolsCollection = collection(db, 'tools');
export const getTools = async () => {
    const snapshot = await getDocs(toolsCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addTool = (toolData) => {
    return addDoc(toolsCollection, { ...toolData, associatedSkills: toolData.associatedSkills || [] });
};
export const deleteTool = (toolId) => {
    const toolDoc = doc(db, 'tools', toolId);
    return deleteDoc(toolDoc);
};

// --- TOOL ACCESSORIES API ---
const toolAccessoriesCollection = collection(db, 'toolAccessories');
export const getToolAccessories = async () => {
    const snapshot = await getDocs(toolAccessoriesCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addToolAccessory = (accessoryData) => {
    return addDoc(toolAccessoriesCollection, { ...accessoryData, associatedSkills: accessoryData.associatedSkills || [] });
};
export const deleteToolAccessory = (accessoryId) => {
    const accessoryDoc = doc(db, 'toolAccessories', accessoryId);
    return deleteDoc(accessoryDoc);
};

// --- EMPLOYEES API ---
const employeesCollection = collection(db, 'employees');
export const getEmployees = async () => {
    const snapshot = await getDocs(employeesCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addEmployee = (employeeData) => {
    return addDoc(employeesCollection, employeeData);
};
export const deleteEmployee = (employeeId) => {
    const employeeDoc = doc(db, 'employees', employeeId);
    return deleteDoc(employeeDoc);
};
export const getEmployeeSkills = async (employeeId) => {
    const employeeDocRef = doc(db, 'employees', employeeId);
    const employeeDoc = await getDoc(employeeDocRef);
    if (employeeDoc.exists()) {
        const skillsData = employeeDoc.data().skills || {};
        return skillsData;
    }
    return {};
};
export const updateEmployeeSkillsAndLogHistory = async (employee, skillsData, allSkills) => {
    const employeeDocRef = doc(db, 'employees', employee.id);
    const batch = writeBatch(db);
    const filteredSkillsData = {};
    for (const skillId in skillsData) {
        if (skillsData[skillId] > 0) {
            filteredSkillsData[skillId] = skillsData[skillId];
        }
    }
    batch.update(employeeDocRef, { skills: filteredSkillsData });
    const allSkillsMap = new Map(allSkills.map(s => [s.id, s.name]));
    for (const skillId in filteredSkillsData) {
        const proficiency = filteredSkillsData[skillId];
        const newHistoryRef = doc(skillHistoryCollection);
        const historyRecord = {
            employeeId: employee.id,
            employeeName: employee.name,
            skillId: skillId,
            skillName: allSkillsMap.get(skillId) || 'Unknown Skill',
            proficiency: proficiency,
            assessmentDate: serverTimestamp()
        };
        batch.set(newHistoryRef, historyRecord);
    }
    return batch.commit();
};

// --- SUPPLIERS API ---
const suppliersCollection = collection(db, 'suppliers');
export const getSuppliers = async () => {
    const snapshot = await getDocs(suppliersCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addSupplier = (supplierData) => {
    return addDoc(suppliersCollection, supplierData);
};
export const deleteSupplier = (supplierId) => {
    const supplierDoc = doc(db, 'suppliers', supplierId);
    return deleteDoc(supplierDoc);
};
export const updateSupplier = (supplierId, updatedData) => {
    const supplierDoc = doc(db, 'suppliers', supplierId);
    return updateDoc(supplierDoc, updatedData);
};

// --- NEW: SUPPLIER ITEM PRICING API ---
const supplierItemPricingCollection = collection(db, 'supplierItemPricing');

export const getSupplierPricingForItem = async (itemId) => {
    if (!itemId) return [];
    const q = query(supplierItemPricingCollection, where('itemId', '==', itemId));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

export const addSupplierPrice = (priceData) => {
    return addDoc(supplierItemPricingCollection, priceData);
};

export const updateSupplierPrice = (priceId, updatedData) => {
    const priceDoc = doc(db, 'supplierItemPricing', priceId);
    return updateDoc(priceDoc, updatedData);
};

export const deleteSupplierPrice = (priceId) => {
    const priceDoc = doc(db, 'supplierItemPricing', priceId);
    return deleteDoc(priceDoc);
};


// --- INVENTORY APIs (UPDATED FOR CASCADE DELETE) ---
const workshopSuppliesCollection = collection(db, 'workshopSupplies');
const componentsCollection = collection(db, 'components');
const rawMaterialsCollection = collection(db, 'rawMaterials');

export const getWorkshopSupplies = async () => {
    const snapshot = await getDocs(workshopSuppliesCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addWorkshopSupply = (supplyData) => addDoc(workshopSuppliesCollection, { ...supplyData, associatedSkills: supplyData.associatedSkills || [] });
export const deleteWorkshopSupply = async (supplyId) => {
    const batch = writeBatch(db);
    batch.delete(doc(db, 'workshopSupplies', supplyId));
    const pricingSnapshot = await getDocs(query(supplierItemPricingCollection, where('itemId', '==', supplyId)));
    pricingSnapshot.forEach(priceDoc => batch.delete(priceDoc.ref));
    return batch.commit();
};

export const getComponents = async () => {
    const snapshot = await getDocs(componentsCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addComponent = (componentData) => addDoc(componentsCollection, { ...componentData, associatedSkills: componentData.associatedSkills || [] });
export const deleteComponent = async (componentId) => {
    const batch = writeBatch(db);
    batch.delete(doc(db, 'components', componentId));
    const pricingSnapshot = await getDocs(query(supplierItemPricingCollection, where('itemId', '==', componentId)));
    pricingSnapshot.forEach(priceDoc => batch.delete(priceDoc.ref));
    return batch.commit();
};

export const getRawMaterials = async () => {
    const snapshot = await getDocs(rawMaterialsCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addRawMaterial = (materialData) => addDoc(rawMaterialsCollection, { ...materialData, associatedSkills: materialData.associatedSkills || [] });
export const deleteRawMaterial = async (materialId) => {
    const batch = writeBatch(db);
    batch.delete(doc(db, 'rawMaterials', materialId));
    const pricingSnapshot = await getDocs(query(supplierItemPricingCollection, where('itemId', '==', materialId)));
    pricingSnapshot.forEach(priceDoc => batch.delete(priceDoc.ref));
    return batch.commit();
};

// --- OVERHEADS API ---
const overheadsCategoriesCollection = collection(db, 'overheadsCategories');
export const getOverheadCategories = async () => {
    const snapshot = await getDocs(overheadsCategoriesCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addOverheadCategory = (categoryData) => addDoc(overheadsCategoriesCollection, categoryData);
export const updateOverheadCategory = (categoryId, updatedData) => updateDoc(doc(db, 'overheadsCategories', categoryId), updatedData);
export const deleteOverheadCategory = async (categoryId) => {
    const categoryDocRef = doc(db, 'overheadsCategories', categoryId);
    const expensesSnapshot = await getDocs(collection(categoryDocRef, 'expenses'));
    const batch = writeBatch(db);
    expensesSnapshot.docs.forEach(expDoc => batch.delete(expDoc.ref));
    batch.delete(categoryDocRef);
    return batch.commit();
};
export const getOverheadExpenses = async (categoryId) => {
    const expensesCollectionRef = collection(db, 'overheadsCategories', categoryId, 'expenses');
    const snapshot = await getDocs(expensesCollectionRef);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addOverheadExpense = (categoryId, expenseData) => addDoc(collection(db, 'overheadsCategories', categoryId, 'expenses'), expenseData);
export const updateOverheadExpense = (categoryId, expenseId, updatedData) => updateDoc(doc(db, 'overheadsCategories', categoryId, 'expenses', expenseId), updatedData);
export const deleteOverheadExpense = (categoryId, expenseId) => deleteDoc(doc(db, 'overheadsCategories', categoryId, 'expenses', expenseId));

// --- PURCHASE QUEUE API ---
const purchaseQueueCollection = collection(db, 'purchaseQueue');
export const getPurchaseQueue = async () => {
    const snapshot = await getDocs(purchaseQueueCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addToPurchaseQueue = (itemData) => {
    return addDoc(purchaseQueueCollection, { ...itemData, status: 'pending', queuedAt: serverTimestamp() });
};
export const markItemsAsOrdered = async (supplier, itemsToOrder, orderQuantities) => {
    if (!itemsToOrder || itemsToOrder.length === 0) return;
    const batch = writeBatch(db);
    const orderDate = new Date();
    const etaDays = supplier.estimatedEtaDays || 0;
    const expectedArrivalDate = new Date();
    expectedArrivalDate.setDate(orderDate.getDate() + Number(etaDays));
    itemsToOrder.forEach(item => {
        const docRef = doc(db, 'purchaseQueue', item.id);
        const recommendedQty = Math.max(0, (item.standardStockLevel || 0) - (item.currentStock || 0));
        const orderQty = orderQuantities[item.id] || recommendedQty;
        batch.update(docRef, {
            status: 'ordered',
            orderDate: orderDate,
            expectedArrivalDate: expectedArrivalDate,
            orderedQty: Number(orderQty),
            orderedFromSupplierId: supplier.id,
            orderedFromSupplierName: supplier.name
        });
    });
    return batch.commit();
};
export const receiveStockAndUpdateInventory = async (queuedItem, quantityReceived) => {
    if (!queuedItem || !quantityReceived || quantityReceived <= 0) {
        throw new Error("Invalid item or quantity received.");
    }
    const itemCategory = queuedItem.category;
    const inventoryItemId = queuedItem.itemId;
    let inventoryCollectionName;
    if (itemCategory === 'Component') inventoryCollectionName = 'components';
    else if (itemCategory === 'Raw Material') inventoryCollectionName = 'rawMaterials';
    else if (itemCategory === 'Workshop Supply') inventoryCollectionName = 'workshopSupplies';
    else throw new Error(`Unknown inventory category: ${itemCategory}`);
    const inventoryDocRef = doc(db, inventoryCollectionName, inventoryItemId);
    const purchaseQueueDocRef = doc(db, 'purchaseQueue', queuedItem.id);
    return runTransaction(db, async (transaction) => {
        const inventoryDoc = await transaction.get(inventoryDocRef);
        if (!inventoryDoc.exists()) throw new Error("Original inventory item not found.");
        const newStockLevel = Number(inventoryDoc.data().currentStock || 0) + Number(quantityReceived);
        transaction.update(inventoryDocRef, { currentStock: newStockLevel });
        transaction.update(purchaseQueueDocRef, { status: 'completed' });
    });
};
export const requeueOrDeleteItem = async (queuedItem) => {
    const itemCategory = queuedItem.category.replace(' ', '');
    const inventoryCollectionName = `${itemCategory.charAt(0).toLowerCase() + itemCategory.slice(1)}s`;
    const inventoryDocRef = doc(db, inventoryCollectionName, queuedItem.itemId);
    const purchaseQueueDocRef = doc(db, 'purchaseQueue', queuedItem.id);
    const inventoryDoc = await getDoc(inventoryDocRef);
    if (!inventoryDoc.exists()) {
        return deleteDoc(purchaseQueueDocRef);
    }
    const itemData = inventoryDoc.data();
    if (itemData.currentStock < itemData.reorderLevel) {
        return updateDoc(purchaseQueueDocRef, { status: 'pending' });
    } else {
        return deleteDoc(purchaseQueueDocRef);
    }
};

// --- MASTER INVENTORY API ---
export const getAllInventoryItems = async () => {
    const [components, rawMaterials, workshopSupplies] = await Promise.all([
        getComponents(), getRawMaterials(), getWorkshopSupplies()
    ]);
    return [
        ...components.map(item => ({ ...item, category: 'Component' })),
        ...rawMaterials.map(item => ({ ...item, category: 'Raw Material' })),
        ...workshopSupplies.map(item => ({ ...item, category: 'Workshop Supply' })),
    ];
};

// --- JOB STEP DETAILS API (RECIPES) ---
const jobStepDetailsCollection = collection(db, 'jobStepDetails');
export const getJobStepDetails = async () => {
    const snapshot = await getDocs(jobStepDetailsCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const setJobStepDetail = (productId, departmentId, data) => {
    const recipeId = `${productId}_${departmentId}`;
    const docRef = doc(db, 'jobStepDetails', recipeId);
    return setDoc(docRef, { ...data, productId, departmentId });
};

// --- JOB CARDS API ---
const jobCardsCollection = collection(db, 'createdJobCards');
export const addJobCard = (jobCardData) => {
    return addDoc(jobCardsCollection, { ...jobCardData, createdAt: serverTimestamp() });
};
export const listenToJobCards = (callback) => {
    const q = query(jobCardsCollection, orderBy('createdAt', 'desc'));
    return onSnapshot(q, (snapshot) => {
        const jobs = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        callback(jobs);
    });
};
export const getJobByJobId = async (jobId) => {
    const q = query(jobCardsCollection, where("jobId", "==", jobId));
    const querySnapshot = await getDocs(q);
    if (querySnapshot.empty) throw new Error(`No job found with ID: ${jobId}`);
    const jobDoc = querySnapshot.docs[0];
    return { id: jobDoc.id, ...jobDoc.data() };
};
export const updateJobStatus = async (docId, newStatus) => {
    const jobDocRef = doc(db, 'createdJobCards', docId);
    const jobDoc = await getDoc(jobDocRef);
    if (!jobDoc.exists()) throw new Error("Job not found!");
    const currentData = jobDoc.data();
    const dataToUpdate = { status: newStatus };
    if (newStatus === 'In Progress') {
        if (!currentData.startedAt) dataToUpdate.startedAt = serverTimestamp();
        else if (currentData.status === 'Paused' && currentData.pausedAt) {
            dataToUpdate.totalPausedMilliseconds = increment(new Date().getTime() - currentData.pausedAt.toDate().getTime());
            dataToUpdate.pausedAt = null;
        }
    } else if (newStatus === 'Paused') {
        dataToUpdate.pausedAt = serverTimestamp();
    } else if (newStatus === 'Awaiting QC') {
        dataToUpdate.completedAt = serverTimestamp();
    }
    const scanEventRef = doc(collection(db, 'scanEvents'));
    const scanEventData = {
        employeeId: currentData.employeeId,
        employeeName: currentData.employeeName,
        jobId: currentData.jobId,
        statusUpdatedTo: newStatus,
        timestamp: serverTimestamp()
    };
    const batch = writeBatch(db);
    batch.update(jobDocRef, dataToUpdate);
    batch.set(scanEventRef, scanEventData);
    return batch.commit();
};
export const processQcDecision = async (job, isApproved, rejectionReason = '') => {
    const allTools = await getTools();
    const toolsMap = new Map(allTools.map(t => [t.id, t]));
    return runTransaction(db, async (transaction) => {
        const jobRef = doc(db, 'createdJobCards', job.id);
        const jobDoc = await transaction.get(jobRef);
        if (!jobDoc.exists()) throw "Job document does not exist!";
        const allInventory = await getAllInventoryItems();
        const inventoryMap = new Map(allInventory.map(item => [item.id, item]));
        const allEmployees = await getEmployees();
        const employeeMap = new Map(allEmployees.map(emp => [emp.id, emp]));
        const recipeId = `${job.partId || job.productId}_${job.departmentId}`;
        const recipeDocRef = doc(db, "jobStepDetails", recipeId);
        const recipeDoc = await transaction.get(recipeDocRef);
        const recipe = recipeDoc.exists() ? recipeDoc.data() : null;
        const currentJobData = jobDoc.data();
        const dataToUpdate = {};
        if (isApproved) {
            dataToUpdate.status = 'Complete';
            if (!currentJobData.completedAt) dataToUpdate.completedAt = serverTimestamp();
            let materialCost = 0;
            if (currentJobData.processedConsumables && currentJobData.processedConsumables.length > 0) {
                for (const consumable of currentJobData.processedConsumables) {
                    const price = consumable.price !== undefined ? consumable.price : (inventoryMap.get(consumable.id)?.price || 0);
                    materialCost += (price * consumable.quantity);
                }
            }
            dataToUpdate.materialCost = materialCost;
            let laborCost = 0;
            const employee = employeeMap.get(currentJobData.employeeId);
            const hourlyRate = employee?.hourlyRate || 0;
            if (currentJobData.startedAt && hourlyRate > 0) {
                const completedAt = currentJobData.completedAt?.toDate() || new Date();
                const startedAt = currentJobData.startedAt.toDate();
                const pauseMs = currentJobData.totalPausedMilliseconds || 0;
                const activeHours = (completedAt.getTime() - startedAt.getTime() - pauseMs) / 3600000;
                laborCost = activeHours > 0 ? activeHours * hourlyRate : 0;
            }
            dataToUpdate.laborCost = laborCost;
            let machineCost = 0;
            if (recipe && recipe.steps) {
                recipe.steps.forEach(step => {
                    if (step.toolId && step.time > 0) {
                        const tool = toolsMap.get(step.toolId);
                        if (tool && tool.hourlyRate > 0) {
                            const stepHours = step.time / 60;
                            machineCost += stepHours * tool.hourlyRate;
                        }
                    }
                });
            }
            dataToUpdate.machineCost = machineCost;
            dataToUpdate.totalCost = materialCost + laborCost + machineCost;
        } else {
            dataToUpdate.status = 'Issue';
            dataToUpdate.issueReason = rejectionReason;
        }
        transaction.update(jobRef, dataToUpdate);
        if (isApproved && currentJobData.processedConsumables && currentJobData.processedConsumables.length > 0) {
            for (const consumable of currentJobData.processedConsumables) {
                const inventoryItem = inventoryMap.get(consumable.id);
                if (!inventoryItem) continue;
                const collectionName = `${inventoryItem.category.replace(' ', '').charAt(0).toLowerCase()}${inventoryItem.category.replace(' ', '').slice(1)}s`;
                if (['components', 'rawMaterials', 'workshopSupplies'].includes(collectionName)) {
                    const itemRef = doc(db, collectionName, consumable.id);
                    transaction.update(itemRef, { currentStock: increment(-consumable.quantity) });
                    const newStockLevel = Number(inventoryItem.currentStock) - consumable.quantity;
                    if (newStockLevel < Number(inventoryItem.reorderLevel) && inventoryItem.currentStock >= Number(inventoryItem.reorderLevel)) {
                        const newQueueDocRef = doc(collection(db, 'purchaseQueue'));
                        transaction.set(newQueueDocRef, {
                            itemId: inventoryItem.id, itemName: inventoryItem.name, supplierId: inventoryItem.supplierId,
                            itemCode: inventoryItem.itemCode || '', category: inventoryItem.category, currentStock: newStockLevel,
                            reorderLevel: inventoryItem.reorderLevel, standardStockLevel: inventoryItem.standardStockLevel, price: inventoryItem.price,
                            unit: inventoryItem.unit, status: 'pending', queuedAt: serverTimestamp()
                        });
                    }
                }
            }
        }
    });
};

// --- GENERIC DOCUMENT API ---
export const updateDocument = async (collectionName, docId, data) => {
    const docRef = doc(db, collectionName, docId);
    const dataToSave = { ...data };
    delete dataToSave.id;
    return updateDoc(docRef, dataToSave);
};
export const deleteDocument = async (collectionName, docId) => {
    const docRef = doc(db, collectionName, docId);
    return deleteDoc(docRef);
};

// --- UNIFIED PRODUCT CATALOG API v3 ---
const productsCollection = collection(db, 'products');
const productCategoriesCollection = collection(db, 'productCategories');
const fitmentCollection = collection(db, 'fitment');
const productRecipeLinksCollection = collection(db, 'productRecipeLinks');
export const getProductCategories = async () => {
    const snapshot = await getDocs(query(productCategoriesCollection, orderBy('name')));
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addProductCategory = (categoryName) => addDoc(productCategoriesCollection, { name: categoryName });
export const deleteProductCategory = (categoryId) => deleteDoc(doc(db, 'productCategories', categoryId));
export const getProducts = async () => {
    const snapshot = await getDocs(query(productsCollection, orderBy('name')));
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addProduct = async (productData) => {
    const q = query(productsCollection, where("partNumber", "==", productData.partNumber));
    const querySnapshot = await getDocs(q);
    if (!querySnapshot.empty) throw new Error(`A product with Part Number "${productData.partNumber}" already exists.`);
    return addDoc(productsCollection, { ...productData, sellingPrice: Number(productData.sellingPrice) || 0, createdAt: serverTimestamp() });
};
export const updateProduct = (productId, updatedData) => updateDoc(doc(db, 'products', productId), updatedData);
export const deleteProduct = async (productId) => {
    const batch = writeBatch(db);
    batch.delete(doc(db, 'products', productId));
    const fitmentSnapshot = await getDocs(query(fitmentCollection, where('productId', '==', productId)));
    fitmentSnapshot.forEach(doc => batch.delete(doc.ref));
    const recipeLinkSnapshot = await getDocs(query(productRecipeLinksCollection, where('productId', '==', productId)));
    recipeLinkSnapshot.forEach(doc => batch.delete(doc.ref));
    return batch.commit();
};
export const getFitmentForProduct = async (productId) => {
    const q = query(fitmentCollection, where('productId', '==', productId));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addFitment = (productId, modelId, modelName, makeName, manufacturerName) => {
    return addDoc(fitmentCollection, { productId, modelId, modelName, makeName, manufacturerName });
};
export const removeFitment = (fitmentId) => deleteDoc(doc(db, 'fitment', fitmentId));
export const getLinkedRecipesForProduct = async (productId) => {
    const q = query(productRecipeLinksCollection, where('productId', '==', productId));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const linkRecipeToProduct = (linkData) => addDoc(productRecipeLinksCollection, linkData);
export const unlinkRecipeFromProduct = (linkId) => deleteDoc(doc(db, 'productRecipeLinks', linkId));

// --- PAYROLL & REPORTING API FUNCTIONS ---
export const getCompletedJobsInRange = async (startDate, endDate) => {
    const q = query(jobCardsCollection, where('status', '==', 'Complete'), where('completedAt', '>=', startDate), where('completedAt', '<=', endDate));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const getCompletedJobsForEmployee = async (employeeId) => {
    if (!employeeId) return [];
    const q = query(jobCardsCollection, where('employeeId', '==', employeeId), where('status', 'in', ['Complete', 'Issue', 'Archived - Issue']));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

// --- USER MANAGEMENT API FUNCTIONS ---
const usersCollection = collection(db, 'users');
export const getAllUsers = async () => {
    const snapshot = await getDocs(usersCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const updateUserRole = async (userId, newRole) => {
    return setDoc(doc(db, 'users', userId), { role: newRole }, { merge: true });
};
export const createUserWithRole = async (email, password, role) => {
    const functionUrl = 'https://us-central1-tojem-os-production.cloudfunctions.net/createUserAndSetRole';
    const response = await fetch(functionUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email, password, role }) });
    const data = await response.json();
    if (!response.ok) throw new Error(data.error || 'Failed to create user.');
    return data;
};
export const deleteUserWithRole = async (userId) => {
    const functionUrl = 'https://us-central1-tojem-os-production.cloudfunctions.net/deleteUserAndRole';
    const response = await fetch(functionUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ userId }) });
    const data = await response.json();
    if (!response.ok) throw new Error(data.error || 'Failed to delete user.');
    return data;
};

// --- MARKETING & SALES API FUNCTIONS ---
const marketingCampaignsCollection = collection(db, 'marketingCampaigns');
export const getCampaigns = async () => {
    const snapshot = await getDocs(query(marketingCampaignsCollection, orderBy('startDate', 'desc')));
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addCampaign = (campaignData) => {
    return addDoc(marketingCampaignsCollection, {
        ...campaignData,
        leadsGenerated: 0,
        createdAt: serverTimestamp()
    });
};
export const updateCampaign = (campaignId, updatedData) => {
    const campaignDoc = doc(db, 'marketingCampaigns', campaignId);
    if (updatedData.leadsGenerated !== undefined) {
        updatedData.leadsGenerated = Number(updatedData.leadsGenerated) || 0;
    }
    return updateDoc(campaignDoc, updatedData);
};
export const deleteCampaign = (campaignId) => {
    const campaignDoc = doc(db, 'marketingCampaigns', campaignId);
    return deleteDoc(campaignDoc);
};

// --- TRAINING RESOURCES API ---
const trainingResourcesCollection = collection(db, 'trainingResources');
export const getTrainingResources = async () => {
    const snapshot = await getDocs(trainingResourcesCollection);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};
export const addTrainingResource = (data) => {
    return addDoc(trainingResourcesCollection, data);
};
export const updateTrainingResource = (id, data) => {
    const resourceDoc = doc(db, 'trainingResources', id);
    return updateDoc(resourceDoc, data);
};
export const deleteTrainingResource = (id) => {
    const resourceDoc = doc(db, 'trainingResources', id);
    return deleteDoc(resourceDoc);
};

// --- SUBCONTRACTOR LOGS API ---
const subcontractorAdHocLogsCollection = collection(db, 'subcontractorAdHocLogs');
const subcontractorTeamLogsCollection = collection(db, 'subcontractorTeamLogs');
export const addSubcontractorAdHocLog = (logData) => {
    return addDoc(subcontractorAdHocLogsCollection, { ...logData, createdAt: serverTimestamp() });
};
export const addSubcontractorTeamLog = (logData) => {
    return addDoc(subcontractorTeamLogsCollection, { ...logData, createdAt: serverTimestamp() });
};

// --- QUOTES API ---
const quotesCollection = collection(db, 'quotes');
export const addQuote = (quoteData) => {
    return addDoc(quotesCollection, { ...quoteData, status: 'draft', createdAt: serverTimestamp() });
};

// --- REWORK REASONS API ---
export const getReworkReasons = async () => {
    const reasonsCollection = collection(db, 'reworkReasons');
    const q = query(reasonsCollection, orderBy('name'));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

// --- KUDOS API ---
export const giveKudosToJob = (jobId) => {
    const jobDocRef = doc(db, 'createdJobCards', jobId);
    return updateDoc(jobDocRef, {
        kudos: true
    });
};

// --- JOB CARD ADJUSTMENT API ---
export const updateJobCardWithAdjustments = (jobId, timeAdjustment, consumableAdjustments, adjustmentReason, userId) => {
    const updateFn = httpsCallable(functions, 'updateJobCardWithAdjustments');
    return updateFn({ jobId, timeAdjustment, consumableAdjustments, adjustmentReason, userId });
};

// --- FETCH JOBS AWAITING QC ---
export const getJobsAwaitingQC = async () => {
    const q = query(jobCardsCollection, where('status', '==', 'Awaiting QC'));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

// Export `collection`, `query`, and `where` to be used in other files if needed
export { collection, query, where, getDocs };


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\calendar\SchedulingAssistantModal.jsx
==================================================
// src/components/features/calendar/SchedulingAssistantModal.jsx (Fully Expanded & Corrected)

import React, { useState, useEffect } from 'react';
import { listenToJobCards, getEmployees, getSkills, getDepartmentSkills } from '../../../api/firestore';
import { writeBatch, doc } from 'firebase/firestore';
import { db } from '../../../api/firebase';
import Button from '../../ui/Button';
import { X, Bot, Clock } from 'lucide-react';

const SchedulingAssistantModal = ({ onClose, onScheduleComplete }) => {
    const [pendingJobs, setPendingJobs] = useState([]);
    const [allEmployees, setAllEmployees] = useState([]);
    const [allSkills, setAllSkills] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isScheduling, setIsScheduling] = useState(false);
    const [schedulePlan, setSchedulePlan] = useState([]);

    useEffect(() => {
        const unsubscribe = listenToJobCards((allJobs) => {
            const unscheduled = allJobs.filter(job => job.status === 'Pending' && !job.scheduledDate);
            setPendingJobs(unscheduled);
        });

        const fetchAdditionalData = async () => {
             try {
                const [employees, skills] = await Promise.all([
                    getEmployees(),
                    getSkills()
                ]);
                setAllEmployees(employees);
                setAllSkills(skills);
            } catch (error) {
                console.error("Error fetching employees or skills for scheduling:", error);
                alert("Failed to load employee/skill data for scheduling.");
            } finally {
                 setLoading(false);
            }
        };

        fetchAdditionalData();

        return () => unsubscribe();
    }, []);

    const generateSchedule = async () => {
        setIsScheduling(true);
        const workHoursPerDay = 8;
        const workMinutesPerDay = workHoursPerDay * 60;

        const availableEmployees = allEmployees.map(emp => ({
            ...emp,
            skillsMap: new Map(Object.entries(emp.skills || {})),
        }));

        const employeeAvailability = new Map(availableEmployees.map(emp => [emp.id, {
            freeUntil: new Date(),
            dailyMinutesAssigned: 0,
        }]));
        
        const plan = [];
        const sortedJobs = [...pendingJobs].sort((a, b) => (b.estimatedTime || 0) - (a.estimatedTime || 0));
        let currentDay = new Date();
        currentDay.setHours(9, 0, 0, 0);

        for (const job of sortedJobs) {
            const jobDuration = job.estimatedTime || 60;

            let assignedEmployee = null;
            let proposedStartTime = null;
            let bestEmployeeScore = -1;
            
            const requiredSkills = job.requiredSkills || [];

            for (const emp of availableEmployees) {
                let skillMatchScore = 0;
                let meetsAllMinimums = true;

                if (requiredSkills.length > 0) {
                    for (const required of requiredSkills) {
                        const employeeProficiency = emp.skillsMap.get(required.skillId) || 0;
                        if (employeeProficiency < required.minProficiency) {
                            meetsAllMinimums = false;
                            break;
                        }
                        skillMatchScore += employeeProficiency; 
                    }
                } else {
                    meetsAllMinimums = true;
                    skillMatchScore = 1;
                }

                if (!meetsAllMinimums) {
                    continue;
                }
                
                const empAvailability = employeeAvailability.get(emp.id);
                let currentEmpTime = new Date(Math.max(currentDay.getTime(), empAvailability.freeUntil.getTime()));
                currentEmpTime.setSeconds(0,0);
                while (currentEmpTime.getDay() === 0 || currentEmpTime.getDay() === 6) {
                    currentEmpTime.setDate(currentEmpTime.getDate() + 1);
                    currentEmpTime.setHours(9, 0, 0, 0);
                    empAvailability.dailyMinutesAssigned = 0;
                }
                if (currentEmpTime.getHours() < 9 || currentEmpTime.getHours() >= (9 + workHoursPerDay)) {
                    currentEmpTime.setDate(currentEmpTime.getDate() + 1);
                    currentEmpTime.setHours(9, 0, 0, 0);
                    empAvailability.dailyMinutesAssigned = 0;
                }
                if (empAvailability.dailyMinutesAssigned + jobDuration > workMinutesPerDay) {
                     currentEmpTime.setDate(currentEmpTime.getDate() + 1);
                     currentEmpTime.setHours(9, 0, 0, 0);
                     empAvailability.dailyMinutesAssigned = 0;
                     while (currentEmpTime.getDay() === 0 || currentEmpTime.getDay() === 6) {
                        currentEmpTime.setDate(currentEmpTime.getDate() + 1);
                        currentEmpTime.setHours(9, 0, 0, 0);
                     }
                }

                const timeToFree = (currentEmpTime.getTime() - new Date().getTime()) / (1000 * 60);
                const currentScore = (skillMatchScore * 1000) - timeToFree;

                if (currentScore > bestEmployeeScore) {
                    bestEmployeeScore = currentScore;
                    assignedEmployee = emp;
                    proposedStartTime = currentEmpTime;
                }
            }

            if (assignedEmployee && proposedStartTime) {
                const empAvailability = employeeAvailability.get(assignedEmployee.id);
                const jobEndTime = new Date(proposedStartTime.getTime() + jobDuration * 60 * 1000);
                empAvailability.freeUntil = jobEndTime;
                empAvailability.dailyMinutesAssigned += jobDuration;
                plan.push({
                    ...job,
                    proposedDate: proposedStartTime,
                    proposedEmployeeId: assignedEmployee.id,
                    proposedEmployeeName: assignedEmployee.name
                });
            } else {
                plan.push({ ...job, proposedDate: new Date(currentDay), proposedEmployeeId: 'unassigned', proposedEmployeeName: 'Unassigned (No qualified employee found)' });
                currentDay.setDate(currentDay.getDate() + 1);
                currentDay.setHours(9, 0, 0, 0);
            }
        }
        setSchedulePlan(plan);
        setIsScheduling(false);
    };

    const commitSchedule = async () => {
        if (schedulePlan.length === 0) return;
        setIsScheduling(true);
        try {
            const batch = writeBatch(db);
            schedulePlan.forEach(job => {
                if(job.proposedEmployeeId !== 'unassigned') {
                    const jobRef = doc(db, 'createdJobCards', job.id);
                    batch.update(jobRef, {
                        scheduledDate: job.proposedDate,
                        employeeId: job.proposedEmployeeId,
                        employeeName: job.proposedEmployeeName
                    });
                }
            });
            await batch.commit();
            onScheduleComplete();
        } catch (error) {
            console.error("Error committing schedule:", error);
            alert("Failed to save the schedule. Please try again.");
        } finally {
            setIsScheduling(false);
        }
    };
    
    return (
        <div 
            onClick={onClose}
            className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4 animate-fade-in"
        >
            <div 
                onClick={(e) => e.stopPropagation()}
                className="bg-gray-800 rounded-xl border border-gray-700 w-full max-w-4xl h-[90vh] flex flex-col"
            >
                <div className="flex justify-between items-center p-4 border-b border-gray-700 flex-shrink-0">
                    <div>
                        <h2 className="text-xl font-bold text-white">Scheduling Assistant</h2>
                        <p className="text-sm text-gray-400">Auto-schedule pending jobs based on employee skills and availability.</p>
                    </div>
                    <Button onClick={onClose} variant="secondary" className="p-2">
                        <X size={20} />
                    </Button>
                </div>

                <div className="p-6 flex-grow overflow-y-auto">
                    <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold text-white">
                            {schedulePlan.length > 0 ? 'Proposed Schedule' : `Found ${pendingJobs.length} Unscheduled Jobs`}
                        </h3>
                        {schedulePlan.length === 0 ? (
                             <Button onClick={generateSchedule} disabled={loading || pendingJobs.length === 0 || isScheduling}>
                                {isScheduling ? <><Clock size={16} className="mr-2 animate-spin"/> Generating...</> : <><Bot size={18} className="mr-2"/>Generate Optimal Schedule</>}
                             </Button>
                        ) : (
                            <div className="flex gap-2">
                                <Button onClick={() => setSchedulePlan([])} variant="secondary">Clear</Button>
                                <Button onClick={commitSchedule} variant="primary" disabled={isScheduling}>
                                    {isScheduling ? 'Saving...' : 'Commit Schedule to Calendar'}
                                </Button>
                            </div>
                        )}
                    </div>
                    
                    <div className="bg-gray-900/50 p-4 rounded-lg">
                        {loading ? <p>Loading pending jobs, employees, and skills...</p> : 
                         schedulePlan.length > 0 ? (
                            <ul className="space-y-2">
                                {schedulePlan.map(job => (
                                    <li key={job.id} className="p-3 bg-gray-700 rounded-md text-sm">
                                        <p className="font-bold text-white">{job.partName} <span className="text-xs font-mono text-gray-400">({job.jobId})</span></p>
                                        <p className="text-blue-400">Scheduled for: {job.proposedDate.toLocaleString('en-ZA')} by {job.proposedEmployeeName}</p>
                                    </li>
                                ))}
                            </ul>
                         ) : (
                            <ul className="space-y-2">
                                {pendingJobs.map(job => (
                                    <li key={job.id} className="p-2 bg-gray-700 rounded-md text-sm">
                                        {job.partName} ({job.estimatedTime || 'N/A'} mins)
                                    </li>
                                ))}
                                {pendingJobs.length === 0 && <p className="text-gray-500 text-center">No unscheduled jobs found.</p>}
                            </ul>
                         )
                        }
                    </div>
                </div>
            </div>
        </div>
    );
};

export default SchedulingAssistantModal;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\job_cards\CustomJobCreator.jsx
==================================================
// src/components/features/job_cards/CustomJobCreator.jsx (UPDATED & FIXED)

import React, { useState, useEffect, useRef } from 'react';
import Input from '../../ui/Input';
import Textarea from '../../ui/Textarea';
import Dropdown from '../../ui/Dropdown';
import Button from '../../ui/Button';
import { addJobCard, getDepartments, getEmployees, getTools, getToolAccessories, getAllInventoryItems, getSkills, getDepartmentSkills } from '../../../api/firestore';
import { Search } from 'lucide-react';

const CustomJobCreator = ({ campaignId }) => {
    const [jobData, setJobData] = useState({
        jobName: '',
        departmentId: '',
        employeeId: '',
        description: '',
        estimatedTime: '',
        steps: '',
        selectedTools: new Set(),
        selectedAccessories: new Set(),
        consumables: [],
    });

    const [allDepartments, setAllDepartments] = useState([]);
    const [allEmployees, setAllEmployees] = useState([]);
    const [allTools, setAllTools] = useState([]);
    const [allToolAccessories, setAllToolAccessories] = useState([]);
    const [allInventoryItems, setAllInventoryItems] = useState([]);
    const [allSkills, setAllSkills] = useState([]);
    const [loading, setLoading] = useState(true);
    const [consumableSearchTerm, setConsumableSearchTerm] = useState('');
    const [filteredConsumableOptions, setFilteredConsumableOptions] = useState([]);
    const [selectedConsumableItem, setSelectedConsumableItem] = useState(null);
    const [consumableQuantity, setConsumableQuantity] = useState('');
    const consumableSearchRef = useRef(null);

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const [departments, employees, tools, toolAccessories, inventoryItems, skills] = await Promise.all([
                    getDepartments(), getEmployees(), getTools(), getToolAccessories(), getAllInventoryItems(), getSkills()
                ]);
                setAllDepartments(departments);
                setAllEmployees(employees);
                setAllTools(tools);
                setAllToolAccessories(toolAccessories);
                setAllInventoryItems(inventoryItems);
                setAllSkills(skills);
            } catch (error) {
                console.error("Error fetching data for custom job creator:", error);
                alert("Failed to load necessary data for custom job creation.");
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    useEffect(() => {
        if (consumableSearchTerm.length > 0) {
            const lowerCaseSearchTerm = consumableSearchTerm.toLowerCase();
            const filtered = allInventoryItems.filter(item =>
                item.name.toLowerCase().includes(lowerCaseSearchTerm) ||
                (item.itemCode && item.itemCode.toLowerCase().includes(lowerCaseSearchTerm))
            ).slice(0, 10);
            setFilteredConsumableOptions(filtered);
        } else {
            setFilteredConsumableOptions([]);
        }
    }, [consumableSearchTerm, allInventoryItems]);

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (consumableSearchRef.current && !consumableSearchRef.current.contains(event.target)) {
                setFilteredConsumableOptions([]);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setJobData(prev => ({ ...prev, [name]: value }));
    };

    const handleToolToggle = (toolId) => {
        setJobData(prev => {
            const newTools = new Set(prev.selectedTools);
            if (newTools.has(toolId)) {
                newTools.delete(toolId);
                const accessoriesOfTool = allToolAccessories.filter(a => a.toolId === toolId).map(a => a.id);
                const newAccessories = new Set(prev.selectedAccessories);
                accessoriesOfTool.forEach(accId => newAccessories.delete(accId));
                return { ...prev, selectedTools: newTools, selectedAccessories: newAccessories };
            } else {
                newTools.add(toolId);
                 return { ...prev, selectedTools: newTools };
            }
        });
    };

    const handleAccessoryToggle = (accessoryId) => {
        setJobData(prev => {
            const newAccessories = new Set(prev.selectedAccessories);
            newAccessories.has(accessoryId) ? newAccessories.delete(accessoryId) : newAccessories.add(accessoryId);
            return { ...prev, selectedAccessories: newAccessories };
        });
    };

    const selectConsumableFromSearch = (item) => {
        setSelectedConsumableItem(item);
        setConsumableSearchTerm(item.name);
        setFilteredConsumableOptions([]);
    };

    const addConsumable = () => {
        if (!selectedConsumableItem || parseFloat(consumableQuantity) <= 0 || isNaN(parseFloat(consumableQuantity))) {
            alert("Please select a consumable from the list and enter a valid quantity.");
            return;
        }

        const isDuplicate = jobData.consumables.some(c => c.id === selectedConsumableItem.id);
        if (isDuplicate) {
            alert("This consumable has already been added.");
            return;
        }

        setJobData(prev => ({
            ...prev,
            consumables: [...prev.consumables, {
                id: selectedConsumableItem.id,
                name: selectedConsumableItem.name,
                quantity: parseFloat(consumableQuantity),
                unit: selectedConsumableItem.unit || 'units',
                price: selectedConsumableItem.price || 0
            }]
        }));
        setSelectedConsumableItem(null);
        setConsumableQuantity('');
        setConsumableSearchTerm('');
        setFilteredConsumableOptions([]);
    };

    const removeConsumable = (indexToRemove) => {
        setJobData(prev => ({
            ...prev,
            consumables: prev.consumables.filter((_, index) => index !== indexToRemove)
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!jobData.jobName.trim() || !jobData.departmentId || !jobData.description.trim() || !jobData.steps.trim()) {
            alert("Please fill in Job Name, Department, Description, and Steps.");
            return;
        }
        
        let departmentRequiredSkills = [];
        if (jobData.departmentId) {
            departmentRequiredSkills = await getDepartmentSkills(jobData.departmentId);
        }

        const newJobId = `CUSTOM-${Date.now()}`;
        const finalJobData = {
            jobId: newJobId,
            partName: jobData.jobName.trim(),
            departmentId: jobData.departmentId,
            departmentName: allDepartments.find(d => d.id === jobData.departmentId)?.name || 'Unknown',
            employeeId: jobData.employeeId || 'unassigned',
            employeeName: allEmployees.find(e => e.id === jobData.employeeId)?.name || 'Unassigned',
            status: 'Pending',
            description: jobData.description.trim(),
            estimatedTime: parseFloat(jobData.estimatedTime) || 0,
            steps: jobData.steps.split('\n').filter(s => s.trim() !== ''),
            tools: Array.from(jobData.selectedTools).map(toolId => allTools.find(t => t.id === toolId)).filter(Boolean),
            accessories: Array.from(jobData.selectedAccessories).map(accId => allToolAccessories.find(a => a.id === accId)).filter(Boolean),
            processedConsumables: jobData.consumables,
            isCustomJob: true,
            campaignId: campaignId || null,
            requiredSkills: departmentRequiredSkills,
        };

        try {
            await addJobCard(finalJobData);
            alert(`Custom Job Card ${finalJobData.jobId} created successfully!`);

            const departmentName = allDepartments.find(d => d.id === jobData.departmentId)?.name || 'Unknown Department';
            const employeeName = allEmployees.find(e => e.id === jobData.employeeId)?.name || 'Unassigned';
            const printContents = `
                <div style="font-family: sans-serif; padding: 20px; color: #333;">
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                        <div>
                            <h1 style="font-size: 28px; font-weight: bold; margin: 0;">Job Card</h1>
                            <p style="font-size: 14px; color: #666; margin: 0;">Part: <span style="font-weight: 600;">${finalJobData.partName}</span></p>
                            <p style="font-size: 14px; color: #666; margin: 0;">Department: <span style="font-weight: 600;">${departmentName}</span></p>
                        </div>
                        <div style="text-align: right;">
                            <img src="https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(newJobId)}&size=80x80" alt="QR Code" style="margin-bottom: 5px;"/>
                            <p style="font-size: 10px; color: #999; margin: 0;">${newJobId}</p>
                        </div>
                    </div>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;">
                        <div>
                            <div style="border-radius: 8px; width: 100%; height: 200px; margin-bottom: 15px; background-color: #f5f5f5; display: flex; align-items: center; justify-content: center; color: #aaa; border: 1px solid #ddd;">
                                <span>No Image Available</span>
                            </div>
                            <div style="font-size: 13px; line-height: 1.6;">
                                <p style="margin: 0;"><b>Employee:</b> ${employeeName}</p>
                                <p style="margin: 0;"><b>Est. Time:</b> ${finalJobData.estimatedTime || 'N/A'} mins</p>
                                <p style="margin: 0;"><b>Description:</b> ${finalJobData.description || 'No description.'}</p>
                            </div>
                        </div>
                        <div style="font-size: 13px; line-height: 1.6;">
                            <div>
                                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">Required Tools & Accessories</h3>
                                <ul style="list-style: disc; padding-left: 20px; margin: 0;">
                                    ${finalJobData.tools?.length > 0 ? finalJobData.tools.map(tool => `<li>${tool.name}</li>`).join('') : '<li>No tools required.</li>'}
                                    ${finalJobData.accessories?.length > 0 ? finalJobData.accessories.map(acc => `<li style="margin-left: 15px;">${acc.name}</li>`).join('') : ''}
                                </ul>
                            </div>
                            <div style="margin-top: 20px;">
                                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">Required Consumables</h3>
                                <ul style="list-style: disc; padding-left: 20px; margin: 0;">
                                    ${finalJobData.processedConsumables?.length > 0 ? finalJobData.processedConsumables.map(c => `<li><span style="font-weight: 600;">${c.name}</span>: ${c.quantity} ${c.unit} (R${c.price.toFixed(2)})</li>`).join('') : '<li>No consumables required.</li>'}
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div style="margin-top: 20px; border-top: 1px solid #eee; padding-top: 15px;">
                        <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">Steps</h3>
                        <ol style="list-style: decimal; padding-left: 20px; margin: 0;">
                            ${finalJobData.steps?.length > 0 ? finalJobData.steps.map(step => `<li>${step}</li>`).join('') : '<li>No steps defined.</li>'}
                        </ol>
                    </div>
                </div>
            `;
            
            const printWindow = window.open('', '_blank', 'height=800,width=1000');

            if (printWindow) {
                printWindow.document.write(`<html><head><title>Custom Job Card ${newJobId}</title><style>body { margin: 0; padding: 20px; font-family: Arial, sans-serif; } @media print { body { print-color-adjust: exact; -webkit-print-color-adjust: exact; } button { display: none; } }</style></head><body>${printContents}<div style="margin-top: 20px; text-align: center;"><button onclick="window.print()">Print This Job Card</button></div></body></html>`);
                printWindow.document.close();
                printWindow.onload = () => { setTimeout(() => printWindow.print(), 500); };
            } else {
                alert("The print window was blocked by your browser. Please allow popups for this site to print job cards automatically.");
            }

            setJobData({ jobName: '', departmentId: '', employeeId: '', description: '', estimatedTime: '', steps: '', selectedTools: new Set(), selectedAccessories: new Set(), consumables: [] });
            setSelectedConsumableItem(null);
            setConsumableQuantity('');
            setConsumableSearchTerm('');
            setFilteredConsumableOptions([]);

        } catch (error) {
            console.error("Error creating custom job card:", error);
            alert("Failed to create custom job card.");
        }
    };

    if (loading) return <p className="text-center text-gray-400">Loading custom job form data...</p>;
    
    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 max-w-4xl mx-auto">
            <h3 className="text-lg font-semibold text-white mb-4">Create a One-Off / Custom Job Card</h3>
            <form onSubmit={handleSubmit} className="space-y-6">
                <Input label="Job Name / Part Description" name="jobName" value={jobData.jobName} onChange={handleInputChange} placeholder="e.g., Repair Customer's Custom Bracket" />
                <Dropdown label="Department" name="departmentId" value={jobData.departmentId} onChange={handleInputChange} options={allDepartments} placeholder="Select Department" />
                <Dropdown label="Employee (Optional)" name="employeeId" value={jobData.employeeId} onChange={handleInputChange} options={allEmployees} placeholder="Select Employee..." />
                <Textarea label="Job Description" name="description" value={jobData.description} onChange={handleInputChange} placeholder="e.g., Weld crack in bracket and repaint" rows={3} />
                <Input label="Estimated Time (minutes)" name="estimatedTime" type="number" value={jobData.estimatedTime} onChange={handleInputChange} placeholder="e.g., 90" />
                <Textarea label="Steps (one per line)" name="steps" value={jobData.steps} onChange={handleInputChange} placeholder="1. Clean area&#10;2. Weld crack&#10;3. Sand smooth&#10;4. Paint" rows={5} />

                <div>
                    <h4 className="font-semibold text-white mb-2">Required Tools & Accessories</h4>
                    <div className="max-h-60 overflow-y-auto space-y-3 p-4 bg-gray-900/50 rounded-lg">
                        {(allTools || []).map(tool => (
                            <div key={tool.id}>
                                <label className="flex items-center space-x-2 text-sm font-semibold text-gray-200">
                                    <input type="checkbox" checked={jobData.selectedTools.has(tool.id)} onChange={() => handleToolToggle(tool.id)} className="h-4 w-4 rounded bg-gray-700 text-blue-600 focus:ring-blue-500" />
                                    <span>{tool.name}</span>
                                </label>
                                {jobData.selectedTools.has(tool.id) && (
                                    <div className="pl-6 mt-1 space-y-1 text-xs border-l-2 border-gray-700">
                                        {(allToolAccessories.filter(acc => acc.toolId === tool.id)).map(accessory => (
                                            <label key={accessory.id} className="flex items-center space-x-2 text-xs text-gray-300">
                                                <input type="checkbox" checked={jobData.selectedAccessories.has(accessory.id)} onChange={() => handleAccessoryToggle(accessory.id)} className="h-3 w-3 rounded bg-gray-700 text-blue-600 focus:ring-blue-500" />
                                                <span>{accessory.name}</span>
                                            </label>
                                        ))}
                                    </div>
                                )}
                            </div>
                        ))}
                    </div>
                </div>

                <div>
                    <h4 className="font-semibold text-white mb-2">Required Consumables (Select from Inventory)</h4>
                    <div className="p-4 bg-gray-900/50 rounded-lg space-y-3">
                        <div className="flex items-end gap-2" ref={consumableSearchRef}>
                            <div className="flex-grow relative">
                                <Input
                                    label="Consumable Item"
                                    name="consumableSearch"
                                    value={consumableSearchTerm}
                                    onChange={(e) => {
                                        setConsumableSearchTerm(e.target.value);
                                        setSelectedConsumableItem(null);
                                    }}
                                    placeholder="Search by name or code..."
                                />
                                <Search className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
                                {consumableSearchTerm.length > 0 && filteredConsumableOptions.length > 0 && (
                                    <ul className="absolute z-10 bg-gray-700 border border-gray-600 rounded-md w-full mt-1 max-h-48 overflow-y-auto shadow-lg">
                                        {filteredConsumableOptions.map(item => (
                                            <li
                                                key={item.id}
                                                className="p-2 text-sm text-gray-200 hover:bg-blue-600 hover:text-white cursor-pointer"
                                                onClick={() => selectConsumableFromSearch(item)}
                                            >
                                                {item.name} ({item.itemCode || 'N/A'}) - {item.unit} (R{item.price.toFixed(2)})
                                            </li>
                                        ))}
                                    </ul>
                                )}
                            </div>
                            <div className="w-24">
                                <Input
                                    label="Quantity"
                                    name="quantity"
                                    type="number"
                                    step="any"
                                    value={consumableQuantity}
                                    onChange={(e) => setConsumableQuantity(e.target.value)}
                                    placeholder="e.g., 0.5"
                                />
                            </div>
                            <Button type="button" onClick={addConsumable} disabled={!selectedConsumableItem || parseFloat(consumableQuantity) <= 0 || isNaN(parseFloat(consumableQuantity))}>Add</Button>
                        </div>
                        <ul className="space-y-2 max-h-40 overflow-y-auto border-t border-gray-700 pt-3">
                            {jobData.consumables.length > 0 ? (
                                jobData.consumables.map((c, index) => (
                                    <li key={index} className="flex justify-between items-center bg-gray-700 p-2 rounded text-sm text-gray-200">
                                        <span>{c.name} : {c.quantity} {c.unit} (R{c.price.toFixed(2)})</span>
                                        <Button type="button" onClick={() => removeConsumable(index)} variant="danger" className="py-0.5 px-2 text-xs">X</Button>
                                    </li>
                                ))
                            ) : (
                                <li className="text-gray-400 text-sm">No consumables added yet.</li>
                            )}
                        </ul>
                    </div>
                </div>

                <div className="text-center">
                    <Button type="submit" variant="primary">Create Custom Job Card</Button>
                </div>
            </form>
        </div>
    );
};

export default CustomJobCreator;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\job_cards\JobCardCreator.jsx
==================================================
// src/components/features/job_cards/JobCardCreator.jsx (COMBINED & UNIFIED)

import React, { useState, useEffect, useMemo, useRef } from 'react';
import {
    // New unified product catalog functions
    getProducts, getProductCategories,
    // Existing functions that are still needed
    getDepartments, getEmployees, addJobCard, getJobStepDetails, getTools,
    getToolAccessories, getAllInventoryItems, getDepartmentSkills,
    // Function from old code to save new recipes
    setJobStepDetail,
    // Added for recipe definition
    getSkills
} from '../../../api/firestore';
import { processConsumables } from '../../../utils/jobUtils';
import Dropdown from '../../ui/Dropdown';
import Button from '../../ui/Button';
import Textarea from '../../ui/Textarea';
import Input from '../../ui/Input';
import { Search } from 'lucide-react';

// --- Components from OLD code integrated here ---

const RecipeConsumableEditor = ({ consumables, selectedConsumables, onAdd, onRemove }) => {
    // This component is taken directly from the old code to handle complex consumable additions for new recipes.
    const [consumableType, setConsumableType] = useState('fixed');
    const [selectedFixedItemId, setSelectedFixedItemId] = useState('');
    const [fixedQty, setFixedQty] = useState('');
    const [selectedDimItemId, setSelectedDimItemId] = useState('');
    const [cuts, setCuts] = useState([]);
    const [cutRule, setCutRule] = useState({ dimensions: '', notes: '' });
    const [fixedSearchTerm, setFixedSearchTerm] = useState('');
    const [filteredFixedOptions, setFilteredFixedOptions] = useState([]);
    const [selectedFixedItemDetails, setSelectedFixedItemDetails] = useState(null);
    const [dimSearchTerm, setDimSearchTerm] = useState('');
    const [filteredDimOptions, setFilteredDimOptions] = useState([]);
    const [selectedDimItemDetails, setSelectedDimItemDetails] = useState(null);
    const searchRefFixed = useRef(null);
    const searchRefDim = useRef(null);

    useEffect(() => {
        if (fixedSearchTerm.length > 0) {
            const lowerCaseSearchTerm = fixedSearchTerm.toLowerCase();
            const filtered = consumables.filter(item =>
                item.name.toLowerCase().includes(lowerCaseSearchTerm) ||
                (item.itemCode && item.itemCode.toLowerCase().includes(lowerCaseSearchTerm))
            ).slice(0, 10);
            setFilteredFixedOptions(filtered);
        } else {
            setFilteredFixedOptions([]);
        }
    }, [fixedSearchTerm, consumables]);

    useEffect(() => {
        if (dimSearchTerm.length > 0) {
            const lowerCaseSearchTerm = dimSearchTerm.toLowerCase();
            const filtered = consumables.filter(item =>
                (item.name.toLowerCase().includes('mat') || item.category === 'Raw Material') &&
                (item.name.toLowerCase().includes(lowerCaseSearchTerm) ||
                (item.itemCode && item.itemCode.toLowerCase().includes(lowerCaseSearchTerm)))
            ).slice(0, 10);
            setFilteredDimOptions(filtered);
        } else {
            setFilteredDimOptions([]);
        }
    }, [dimSearchTerm, consumables]);

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (searchRefFixed.current && !searchRefFixed.current.contains(event.target)) {
                setFilteredFixedOptions([]);
            }
            if (searchRefDim.current && !searchRefDim.current.contains(event.target)) {
                setFilteredDimOptions([]);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);


    const handleAddConsumable = () => {
        let newConsumable;
        switch (consumableType) {
            case 'fixed':
                if (!selectedFixedItemDetails || !fixedQty || parseFloat(fixedQty) <= 0) return alert("Please select an item and enter a valid quantity.");
                newConsumable = { type: 'fixed', itemId: selectedFixedItemDetails.id, quantity: Number(fixedQty) };
                break;
            case 'dimensional':
                if (!selectedDimItemDetails || cuts.length === 0) return alert("Please select a material and add at least one cutting instruction.");
                newConsumable = { type: 'dimensional', itemId: selectedDimItemDetails.id, cuts };
                break;
            default: return;
        }
        if (!selectedConsumables.find(c => c.itemId === newConsumable.itemId)) {
            onAdd(newConsumable);
            setFixedSearchTerm('');
            setFixedQty('');
            setSelectedFixedItemDetails(null);
            setDimSearchTerm('');
            setCuts([]);
            setCutRule({ dimensions: '', notes: '' });
            setSelectedDimItemDetails(null);
        } else {
            alert("This consumable has already been added to the recipe.");
        }
    };
    const getConsumableName = (id) => consumables.find(c => c.id === id)?.name || 'Unknown Item';

    return (
        <div>
             <h5 className="font-semibold mb-2 text-gray-200">Required Consumables for Recipe</h5>
             <div className="p-4 bg-gray-800 rounded-lg space-y-4">
                 <div className="flex gap-2 bg-gray-700 p-1 rounded-md">
                     <button type="button" onClick={() => setConsumableType('fixed')} className={`flex-1 p-2 text-sm rounded transition-colors ${consumableType === 'fixed' ? 'bg-blue-600 text-white' : 'hover:bg-blue-500/20'}`}>Fixed Quantity</button>
                     <button type="button" onClick={() => setConsumableType('dimensional')} className={`flex-1 p-2 text-sm rounded transition-colors ${consumableType === 'dimensional' ? 'bg-blue-600 text-white' : 'hover:bg-blue-500/20'}`}>Dimensional Cuts</button>
                 </div>
                 {consumableType === 'fixed' && (
                     <div className="flex items-end gap-2 animate-fade-in" ref={searchRefFixed}>
                         <div className="flex-grow relative">
                             <Input
                                 label="Item"
                                 value={fixedSearchTerm}
                                 onChange={e => {
                                     setFixedSearchTerm(e.target.value);
                                     setSelectedFixedItemDetails(null);
                                 }}
                                 placeholder="Search by name or code..."
                             />
                             <Search className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
                             {fixedSearchTerm.length > 0 && filteredFixedOptions.length > 0 && (
                                 <ul className="absolute z-10 bg-gray-700 border border-gray-600 rounded-md w-full mt-1 max-h-48 overflow-y-auto shadow-lg">
                                      {filteredFixedOptions.map(item => (
                                         <li
                                             key={item.id}
                                             className="p-2 text-sm text-gray-200 hover:bg-blue-600 hover:text-white cursor-pointer"
                                             onClick={() => {
                                                 setSelectedFixedItemDetails(item);
                                                 setSelectedFixedItemId(item.id);
                                                 setFixedSearchTerm(item.name);
                                                 setFilteredFixedOptions([]);
                                             }}
                                         >
                                             {item.name} ({item.itemCode || 'N/A'}) - {item.unit || 'units'} (R{item.price?.toFixed(2) || '0.00'})
                                         </li>
                                     ))}
                                  </ul>
                             )}
                         </div>
                         <div className="w-24">
                              <Input
                                 label="Qty"
                                 type="number"
                                 value={fixedQty}
                                 onChange={e => setFixedQty(e.target.value)}
                                 placeholder="e.g., 5"
                               />
                         </div>
                         <Button
                             type="button"
                             onClick={handleAddConsumable}
                             disabled={!selectedFixedItemDetails || parseFloat(fixedQty) <= 0 || isNaN(parseFloat(fixedQty))}
                         >
                             Add
                         </Button>
                     </div>
                 )}
                 {consumableType === 'dimensional' && (
                     <div className="space-y-3 animate-fade-in" ref={searchRefDim}>
                          <div className="flex-grow relative">
                              <Input
                                 label="Material to Cut"
                                 value={dimSearchTerm}
                                 onChange={e => {
                                     setDimSearchTerm(e.target.value);
                                     setSelectedDimItemDetails(null);
                                 }}
                                 placeholder="Search by name or code..."
                               />
                               <Search className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
                             {dimSearchTerm.length > 0 && filteredDimOptions.length > 0 && (
                                 <ul className="absolute z-10 bg-gray-700 border border-gray-600 rounded-md w-full mt-1 max-h-48 overflow-y-auto shadow-lg">
                                     {filteredDimOptions.map(item => (
                                         <li
                                             key={item.id}
                                             className="p-2 text-sm text-gray-200 hover:bg-blue-600 hover:text-white cursor-pointer"
                                             onClick={() => {
                                                 setSelectedDimItemDetails(item);
                                                 setSelectedDimItemId(item.id);
                                                 setDimSearchTerm(item.name);
                                                 setFilteredDimOptions([]);
                                             }}
                                         >
                                             {item.name} ({item.itemCode || 'N/A'}) - {item.unit || 'units'} (R{item.price?.toFixed(2) || '0.00'})
                                         </li>
                                     ))}
                                  </ul>
                             )}
                          </div>
                         <div className="p-2 border border-gray-700 rounded-md">
                             <p className="text-xs text-gray-400 mb-2">Cutting Instructions</p>
                             <div className="flex items-end gap-2">
                                 <Input label="Dimensions (e.g., 120cm x 80cm)" value={cutRule.dimensions} onChange={e => setCutRule({...cutRule, dimensions: e.target.value})} />
                                 <Input label="Notes" value={cutRule.notes} onChange={e => setCutRule({...cutRule, notes: e.target.value})} />
                                 <Button type="button" onClick={() => { if(cutRule.dimensions) { setCuts([...cuts, cutRule]); setCutRule({ dimensions: '', notes: '' }); }}}>Add Cut</Button>
                             </div>
                             <ul className="text-xs mt-2 space-y-1">{cuts.map((c, i) => <li key={i}>{c.dimensions} ({c.notes})</li>)}</ul>
                         </div>
                          <Button
                             type="button"
                             onClick={handleAddConsumable}
                             className="w-full"
                             disabled={!selectedDimItemDetails || cuts.length === 0}
                         >
                             Add Dimensional Consumable
                         </Button>
                     </div>
                 )}
                 <h6 className="text-sm font-bold pt-2 border-t border-gray-700 text-gray-200">Recipe Consumables</h6>
                 <ul className="space-y-2 max-h-40 overflow-y-auto">
                     {selectedConsumables.map((c, i) => (
                         <li key={i} className="flex justify-between items-center bg-gray-700 p-2 rounded text-sm text-gray-200">
                             <div>
                                 <p className="font-semibold">{getConsumableName(c.itemId)}</p>
                                 {c.type === 'fixed' && <p className="text-xs text-gray-400">Qty: {c.quantity}</p>}
                                 {c.type === 'dimensional' && <p className="text-xs text-gray-400">{c.cuts.length} cut(s) required</p>}
                             </div>
                              <Button type="button" onClick={() => onRemove(c.itemId)} variant="danger" className="py-0.5 px-2 text-xs">X</Button>
                         </li>
                     ))}
                 </ul>
             </div>
        </div>
    );
};


const JobCardPreview = ({ details }) => {
    // This is the more detailed preview component from the old code, adapted for the new data structure.
    if (!details) return null;
    return (
        <div className="mt-8 p-6 bg-gray-800 rounded-xl border border-gray-700">
            <h2 className="text-2xl font-bold text-white mb-6">Generated Job Card Preview</h2>
            <div id="job-card-print-area" className="bg-white text-gray-800 p-8 rounded-lg shadow-lg">
                <div className="flex justify-between items-start pb-4 border-b">
                    <div>
                        <h1 className="text-3xl font-bold text-gray-900">Job Card</h1>
                        {/* ADAPTED: partName -> productName */}
                        <p className="text-gray-600">Product: <span className="font-semibold">{details.productName}</span></p>
                        <p className="text-gray-600">Department: <span className="font-semibold">{details.departmentName}</span></p>
                    </div>
                    <div className="text-right">
                       <img src={`https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(details.jobId)}&size=80x80`} alt="QR Code"/>
                       <p className="text-xs text-gray-500 mt-1">{details.jobId}</p>
                    </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mt-6">
                    <div>
                        {details.photoUrl ? ( <img src={details.photoUrl} alt={details.productName} className="rounded-lg object-cover w-full h-64 mb-4 border" /> ) : ( <div className="rounded-lg w-full h-64 mb-4 border bg-gray-100 flex items-center justify-center text-gray-400"><span>No Image Available</span></div> )}
                        <div className="space-y-2 text-sm">
                            <p><b>Employee:</b> {details.employeeName}</p>
                            <p><b>Est. Time:</b> {details.estimatedTime || 'N/A'} mins</p>
                            <p><b>Description:</b> {details.description || 'No description.'}</p>
                        </div>
                    </div>
                    <div className="space-y-4">
                        <div>
                            <h3 className="text-lg font-bold text-gray-800 mb-2">Required Tools & Accessories</h3>
                            <ul className="list-disc list-inside text-gray-600 space-y-1 text-sm">
                                {details.tools?.length > 0 ? details.tools.map((tool) => <li key={tool.id}>{tool.name}</li>) : <li>No tools required.</li>}
                                {details.accessories?.length > 0 ? details.accessories.map((acc) => <li key={acc.id} className="ml-4">{acc.name}</li>) : null}
                            </ul>
                        </div>
                        <div>
                            <h3 className="text-lg font-bold text-gray-800 mb-2">Required Consumables</h3>
                            <ul className="list-disc list-inside text-gray-600 space-y-2 text-sm">
                                {details.processedConsumables?.length > 0 ? details.processedConsumables.map((c, i) => (
                                    <li key={i}>
                                        <span className="font-semibold">{c.name}</span>
                                        {c.quantity && <span>: {c.quantity.toFixed(3)} {c.unit}</span>}
                                        {c.notes && <span className="text-xs italic text-gray-500 ml-1">{c.notes}</span>}
                                        {c.cuts && (
                                            <ul className="list-square list-inside ml-4 mt-1">
                                                 {c.cuts.map((cut, j) => <li key={j}>{cut.dimensions} <span className="text-xs italic text-gray-500">{cut.notes}</span></li>)}
                                            </ul>
                                        )}
                                    </li>
                                )) : <li>No consumables required.</li>}
                            </ul>
                        </div>
                    </div>
                </div>
                <div className="mt-6 border-t pt-4">
                    <h3 className="text-lg font-bold text-gray-800 mb-2">Steps</h3>
                     {/* ADAPTED: Ensure steps are mapped correctly */}
                    <ol className="list-decimal list-inside text-gray-600 space-y-1 text-sm">
                        {(details.steps || []).length > 0 ? details.steps.map((step, i) => <li key={i}>{step.text || step}</li>) : <li>No steps defined.</li>}
                    </ol>
                </div>
            </div>
        </div>
    )
};


// --- Main Unified Component ---

const JobCardCreator = ({ campaignId }) => {
    // UNIFIED STATE: Combines state from both versions.
    const [allData, setAllData] = useState({ products: [], categories: [], departments: [], employees: [], allRecipes: [], tools: [], toolAccessories: [], allConsumables: [], allSkills: [] });
    const [loading, setLoading] = useState(true);
    // Uses new selection model
    const [selection, setSelection] = useState({ categoryId: '', productId: '', departmentId: '', employeeId: '' });
    const [jobDetails, setJobDetails] = useState(null);
    const [currentTemp, setCurrentTemp] = useState(20); // Default temp
    // State from old code for defining new recipes
    const [showDefineRecipeForm, setShowDefineRecipeForm] = useState(false);
    const [tempRecipeDetails, setTempRecipeDetails] = useState({ description: '', estimatedTime: '', steps: '', tools: new Set(), accessories: new Set(), consumables: [] });
    const [isSavingNewRecipe, setIsSavingNewRecipe] = useState(false);

    // UNIFIED DATA FETCHING: Fetches new product catalog and data needed for recipe creation.
    useEffect(() => {
        const fetchAllData = async () => {
            setLoading(true);
            try {
                const weatherResponse = await fetch("https://api.open-meteo.com/v1/forecast?latitude=-33.92&longitude=18.42&current=temperature_2m");
                const weatherData = await weatherResponse.json();
                setCurrentTemp(weatherData.current.temperature_2m);

                const [prods, cats, depts, emps, recipes, tools, toolAccessories, consumables, skills] = await Promise.all([
                    getProducts(), getProductCategories(), getDepartments(), getEmployees(), getJobStepDetails(), getTools(), getToolAccessories(), getAllInventoryItems(), getSkills()
                ]);

                setAllData({ products: prods, categories: cats, departments: depts, employees: emps, allRecipes: recipes, tools, toolAccessories, allConsumables: consumables, allSkills: skills });
            } catch (error) {
                console.error("Failed to fetch initial data:", error);
                alert("Error fetching page data. Please check the console and refresh.");
            } finally {
                setLoading(false);
            }
        };
        fetchAllData();
    }, []);

    // SELECTION LOGIC from new code, with recipe form reset added from old.
    const handleSelection = (e) => {
        const { name, value } = e.target;
        setSelection(prev => {
            const updated = { ...prev, [name]: value };
            if (name === 'categoryId') { updated.productId = ''; }
            if (name === 'departmentId') { updated.employeeId = ''; }
            return updated;
        });
        // Reset recipe form when selections change
        setShowDefineRecipeForm(false);
        setTempRecipeDetails({ description: '', estimatedTime: '', steps: '', tools: new Set(), accessories: new Set(), consumables: [] });
    };

    const filteredProducts = useMemo(() => allData.products.filter(p => p.categoryId === selection.categoryId), [allData.products, selection.categoryId]);
    const filteredEmployees = useMemo(() => allData.employees.filter(e => e.departmentId === selection.departmentId), [allData.employees, selection.departmentId]);

    // UNIFIED JOB DETAIL GENERATION: Handles both existing and new recipes.
    useEffect(() => {
        const updateJobDetails = async () => {
            const { productId, departmentId, employeeId } = selection;
            if (productId && departmentId) {
                const product = allData.products.find(p => p.id === productId);
                const department = allData.departments.find(d => d.id === departmentId);
                const employee = allData.employees.find(e => e.id === employeeId);

                const recipeId = `${productId}_${departmentId}`;
                const standardRecipe = allData.allRecipes.find(recipe => recipe.id === recipeId);

                let finalRecipeDetails = null;
                let finalRequiredSkills = [];

                if (standardRecipe) {
                    // Recipe exists, use it.
                    setShowDefineRecipeForm(false);
                    finalRecipeDetails = standardRecipe;
                    finalRequiredSkills = standardRecipe.requiredSkills || await getDepartmentSkills(departmentId);
                } else {
                    // No recipe found, show the form to create one.
                    setShowDefineRecipeForm(true);
                    finalRecipeDetails = {
                        description: tempRecipeDetails.description || product.name,
                        estimatedTime: tempRecipeDetails.estimatedTime || 0,
                        steps: tempRecipeDetails.steps.split('\n').filter(s => s.trim() !== ''),
                        tools: Array.from(tempRecipeDetails.tools),
                        accessories: Array.from(tempRecipeDetails.accessories),
                        consumables: tempRecipeDetails.consumables,
                    };
                    finalRequiredSkills = await getDepartmentSkills(departmentId);
                }

                const processed = processConsumables(finalRecipeDetails.consumables, allData.allConsumables, currentTemp);
                const toolsForDisplay = (finalRecipeDetails.tools || []).map(toolId => allData.tools.find(t => t.id === toolId)).filter(Boolean);
                const accessoriesForDisplay = (finalRecipeDetails.accessories || []).map(accId => allData.toolAccessories.find(a => a.id === accId)).filter(Boolean);


                setJobDetails({
                    jobId: `JOB-${Date.now()}`,
                    productName: product.name,
                    photoUrl: product.photoUrl,
                    productId: product.id,
                    departmentId: department.id,
                    departmentName: department.name,
                    employeeId: employee ? employee.id : 'unassigned',
                    employeeName: employee ? employee.name : 'Unassigned',
                    status: 'Pending',
                    description: finalRecipeDetails.description,
                    estimatedTime: parseFloat(finalRecipeDetails.estimatedTime) || 0,
                    // Pass raw steps for new recipe, or mapped steps for existing
                    steps: finalRecipeDetails.steps.map ? (finalRecipeDetails.steps.map(s => s.text || s)) : [],
                    // Pass full objects for preview
                    tools: toolsForDisplay,
                    accessories: accessoriesForDisplay,
                    // Pass raw consumables for saving, and processed for display
                    consumables: finalRecipeDetails.consumables || [],
                    processedConsumables: processed,
                    campaignId: campaignId || null,
                    requiredSkills: finalRequiredSkills,
                });
            } else {
                setJobDetails(null);
            }
        };
        updateJobDetails();
    }, [selection, allData, currentTemp, tempRecipeDetails, campaignId]);


    // --- Handlers from OLD code for recipe creation, adapted for new data model ---

    const handleTempRecipeInputChange = (e) => {
        const { name, value } = e.target;
        setTempRecipeDetails(prev => ({ ...prev, [name]: value }));
    };
    const handleTempRecipeToolToggle = (toolId) => {
        setTempRecipeDetails(prev => {
            const newTools = new Set(prev.tools);
            newTools.has(toolId) ? newTools.delete(toolId) : newTools.add(toolId);
            return { ...prev, tools: newTools };
        });
    };
    const handleTempRecipeAccessoryToggle = (accId) => {
        setTempRecipeDetails(prev => {
            const newAccessories = new Set(prev.accessories);
            newAccessories.has(accId) ? newAccessories.delete(accId) : newAccessories.add(accId);
            return { ...prev, accessories: newAccessories };
        });
    };
    const handleTempRecipeConsumableAdd = (consumable) => {
        setTempRecipeDetails(prev => ({ ...prev, consumables: [...prev.consumables, consumable] }));
    };
    const handleTempRecipeConsumableRemove = (itemId) => {
        setTempRecipeDetails(prev => ({ ...prev, consumables: prev.consumables.filter(c => c.itemId !== itemId) }));
    };

    const handleResetFormAndPreview = () => {
        setSelection({ categoryId: '', productId: '', departmentId: '', employeeId: '' });
        setJobDetails(null);
        setShowDefineRecipeForm(false);
        setTempRecipeDetails({ description: '', estimatedTime: '', steps: '', tools: new Set(), accessories: new Set(), consumables: [] });
    };

    const handlePrint = () => {
        const printContents = document.getElementById('job-card-print-area')?.innerHTML;
        if (printContents) {
            const printWindow = window.open('', '', 'height=800,width=1000');
            if (printWindow) {
                printWindow.document.write(`<html><head><title>Print Job Card ${jobDetails.jobId}</title><style>body { margin: 0; padding: 20px; font-family: Arial, sans-serif; } @media print { body { print-color-adjust: exact; -webkit-print-color-adjust: exact; } button { display: none; } }</style></head><body>${printContents}<div style="margin-top: 20px; text-align: center;"><button onclick="window.print()">Print This Job Card</button></div></body></html>`);
                printWindow.document.close();
            }
        }
    };
    
    // UNIFIED HANDLER for generating the job card.
    const handleGenerateNewJobCard = async () => {
        if (!jobDetails) return alert("Please select a product and department.");

        const confirmGenerate = window.confirm(`Create a new Job Card for "${jobDetails.productName}"?`);
        if (!confirmGenerate) return;

        try {
            // Map the unified jobDetails state to the firestore structure
            const finalJobData = {
              jobId: jobDetails.jobId,
              partName: jobDetails.productName, // Firestore expects partName
              partId: jobDetails.productId,   // Firestore expects partId
              departmentId: jobDetails.departmentId,
              departmentName: jobDetails.departmentName,
              employeeId: jobDetails.employeeId,
              employeeName: jobDetails.employeeName,
              status: 'Pending',
              description: jobDetails.description,
              estimatedTime: jobDetails.estimatedTime,
              // Send simple text array for steps
              steps: (jobDetails.steps || []).map(s => (s && s.text) ? s.text : s),
              tools: allData.tools.filter(t => (jobDetails.tools.map(tool => tool.id) || []).includes(t.id)),
              accessories: allData.toolAccessories.filter(a => (jobDetails.accessories.map(acc => acc.id) || []).includes(a.id)),
              processedConsumables: jobDetails.processedConsumables,
              isCustomJob: false,
              campaignId: jobDetails.campaignId,
              requiredSkills: jobDetails.requiredSkills,
              consumables: jobDetails.consumables,
            };

            await addJobCard(finalJobData);
            alert(`New Job Card ${finalJobData.jobId} created successfully!`);
            handlePrint();
            handleResetFormAndPreview();
        } catch (error) {
            console.error("Error generating new job card:", error);
            alert("Failed to generate new job card.");
        }
    };
    
    const saveNewRecipeAndCreateJob = async () => {
        if (!jobDetails || !selection.productId || !selection.departmentId) return;
        if (!tempRecipeDetails.description.trim() || !tempRecipeDetails.estimatedTime || !tempRecipeDetails.steps.trim()) {
            return alert("Please fill in Description, Estimated Time, and Steps for the new recipe.");
        }
        
        setIsSavingNewRecipe(true);
        try {
            // ADAPTED: Uses productId instead of partId
            const recipeData = {
                description: tempRecipeDetails.description.trim(),
                estimatedTime: Number(tempRecipeDetails.estimatedTime),
                // Create step objects as expected by the new model
                steps: tempRecipeDetails.steps.split('\n').filter(s => s.trim() !== '').map((s, i) => ({ text: s, time: 0, order: i })),
                tools: Array.from(tempRecipeDetails.tools),
                accessories: Array.from(tempRecipeDetails.accessories),
                consumables: tempRecipeDetails.consumables,
                requiredSkills: jobDetails.requiredSkills || [],
            };
            // Uses productId now
            await setJobStepDetail(selection.productId, selection.departmentId, recipeData);
            alert("New recipe saved successfully! Now creating the job card.");

            // Create the job
            await handleGenerateNewJobCard();

            // Refresh local recipe data
            const updatedRecipes = await getJobStepDetails();
            setAllData(prev => ({ ...prev, allRecipes: updatedRecipes }));
            
        } catch (error) {
            console.error("Error saving new recipe or creating job:", error);
            alert("Failed to save new recipe or create job. Please try again.");
        } finally {
            setIsSavingNewRecipe(false);
        }
    };

    // RENDER LOGIC from old code to switch between buttons.
    const renderActionButton = () => {
        if (!jobDetails) return null;
        if (showDefineRecipeForm) {
            return (
                <Button onClick={saveNewRecipeAndCreateJob} variant="primary" disabled={isSavingNewRecipe}>
                    {isSavingNewRecipe ? 'Saving...' : 'Define Recipe & Create Job'}
                </Button>
            );
        } else {
            return (
                <Button onClick={handleGenerateNewJobCard} variant="primary">
                    Generate New Job Card
                </Button>
            );
        }
    };

    if (loading) return <p className="text-center text-gray-400">Loading Product Catalog & Recipes...</p>;

    // UNIFIED RENDERED JSX
    return (
        <>
            <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 shadow-lg mt-8">
                <h3 className="text-lg font-semibold text-white mb-6 text-center">
                    Create New Job from Catalog
                </h3>
                 {/* Uses new dropdown structure */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <Dropdown label="1. Product Category" name="categoryId" value={selection.categoryId} onChange={handleSelection} options={allData.categories} placeholder="Select Category" />
                    <Dropdown label="2. Product" name="productId" value={selection.productId} onChange={handleSelection} options={filteredProducts} placeholder="Select Product" disabled={!selection.categoryId} />
                    <Dropdown label="3. Department" name="departmentId" value={selection.departmentId} onChange={handleSelection} options={allData.departments} placeholder="Select Department" />
                    <Dropdown label="4. Employee (Optional)" name="employeeId" value={selection.employeeId} onChange={handleSelection} options={filteredEmployees} placeholder="Select Employee..." disabled={!selection.departmentId} />
                </div>
                
                 {/* The recipe definition form, shown conditionally */}
                {showDefineRecipeForm && selection.productId && selection.departmentId && (
                    <div className="mt-8 p-6 bg-gray-900/50 rounded-lg border border-gray-700 animate-fade-in">
                        <h4 className="text-xl font-bold text-white mb-4">Define Recipe for New Product-Department Combination</h4>
                        <p className="text-gray-400 text-sm mb-4">No standard recipe found. Please define it now to create the first job card and save for future use.</p>
                        <div className="space-y-4">
                            <Input label="Description" name="description" value={tempRecipeDetails.description} onChange={handleTempRecipeInputChange} placeholder="e.g., Final assembly of side skirt" />
                            <Input label="Estimated Time (minutes)" name="estimatedTime" type="number" value={tempRecipeDetails.estimatedTime} onChange={handleTempRecipeInputChange} placeholder="e.g., 45" />
                            <Textarea label="Steps (one per line)" name="steps" value={tempRecipeDetails.steps} onChange={handleTempRecipeInputChange} rows={5} placeholder="1. Align panels...&#10;2. Apply adhesive..." />
                            <div>
                                <h5 className="font-semibold text-white mb-2">Required Tools & Accessories for Recipe</h5>
                                <div className="max-h-40 overflow-y-auto space-y-2 p-3 bg-gray-800 rounded-lg">
                                    {(allData.tools || []).map(tool => (
                                        <div key={tool.id}>
                                            <label className="flex items-center space-x-2 text-sm font-semibold text-gray-200">
                                                <input type="checkbox" checked={tempRecipeDetails.tools.has(tool.id)} onChange={() => handleTempRecipeToolToggle(tool.id)} className="h-4 w-4 rounded bg-gray-700 text-blue-600 focus:ring-blue-500" />
                                                <span>{tool.name}</span>
                                            </label>
                                            {tempRecipeDetails.tools.has(tool.id) && (
                                                <div className="pl-6 mt-1 space-y-1 text-xs border-l-2 border-gray-700">
                                                    {(allData.toolAccessories.filter(acc => acc.toolId === tool.id)).map(accessory => (
                                                        <label key={accessory.id} className="flex items-center space-x-2 text-xs text-gray-300">
                                                            <input type="checkbox" checked={tempRecipeDetails.accessories.has(accessory.id)} onChange={() => handleTempRecipeAccessoryToggle(accessory.id)} className="h-3 w-3 rounded bg-gray-700 text-blue-600 focus:ring-blue-500" />
                                                            <span>{accessory.name}</span>
                                                        </label>
                                                    ))}
                                                </div>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            </div>
                            <div>
                                <RecipeConsumableEditor
                                    consumables={allData.allConsumables}
                                    selectedConsumables={tempRecipeDetails.consumables}
                                    onAdd={handleTempRecipeConsumableAdd}
                                    onRemove={handleTempRecipeConsumableRemove}
                                />
                            </div>
                        </div>
                    </div>
                )}
                
                 {jobDetails && (
                    <div className="mt-8 text-center">
                        {renderActionButton()}
                    </div>
                )}
            </div>
            {jobDetails && <JobCardPreview details={jobDetails} />}
        </>
    );
};

export default JobCardCreator;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\job_cards\StandardJobCreatorModal.jsx
==================================================
// src/components/features/job_cards/StandardJobCreatorModal.jsx (CORRECTED & ENHANCED)

import React, { useState, useEffect } from 'react';
import { getDepartments, getEmployees, addJobCard, getRecipeForProductDepartment, getProducts, getAllInventoryItems, getTools, getToolAccessories } from '../../../api/firestore';
import { processConsumables } from '../../../utils/jobUtils';
import Dropdown from '../../ui/Dropdown';
import Button from '../../ui/Button';
import { X, Package } from 'lucide-react';
import QRCode from 'qrcode';

const StandardJobCreatorModal = ({ salesOrder, lineItem, onClose }) => {
    const [departments, setDepartments] = useState([]);
    const [employees, setEmployees] = useState([]);
    const [allProducts, setAllProducts] = useState([]);
    const [allInventory, setAllInventory] = useState([]);
    const [allTools, setAllTools] = useState([]);
    const [allAccessories, setAllAccessories] = useState([]);
    const [loading, setLoading] = useState(true);
    const [selection, setSelection] = useState({ departmentId: '', employeeId: '' });

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const [depts, emps, prods, inventory, tools, accessories] = await Promise.all([
                    getDepartments(), 
                    getEmployees(), 
                    getProducts(),
                    getAllInventoryItems(),
                    getTools(),
                    getToolAccessories()
                ]);
                setDepartments(depts);
                setEmployees(emps);
                setAllProducts(prods);
                setAllInventory(inventory);
                setAllTools(tools);
                setAllAccessories(accessories);
            } catch (error) {
                alert("Failed to load necessary data for job creation.");
                console.error(error);
            }
            setLoading(false);
        };
        fetchData();
    }, []);

    const handleSelectionChange = (e) => {
        const { name, value } = e.target;
        setSelection(prev => ({...prev, [name]: value}));
    };

    const handleSubmit = async () => {
        if (!selection.departmentId) {
            return alert("Please select a department.");
        }
        
        const product = allProducts.find(p => p.id === lineItem.productId);
        if (!product) {
            return alert("Could not find the product details for this line item.");
        }
        
        const recipe = await getRecipeForProductDepartment(lineItem.productId, selection.departmentId);
        if (!recipe) {
            return alert(`No recipe found for "${product.name}" in the selected department. Please define one in Settings first.`);
        }
        
        const department = departments.find(d => d.id === selection.departmentId);
        const employee = employees.find(e => e.id === selection.employeeId);
        const newJobId = `JOB-${Date.now()}`;

        const toolsForJobCard = allTools.filter(t => (recipe.tools || []).includes(t.id));
        const accessoriesForJobCard = allAccessories.filter(a => (recipe.accessories || []).includes(a.id));
        const processedConsumables = processConsumables(recipe.consumables, allInventory, 20);

        const finalJobData = {
            jobId: newJobId,
            partName: product.name,
            partId: product.id,
            departmentId: selection.departmentId,
            departmentName: department?.name || 'Unknown',
            employeeId: selection.employeeId || 'unassigned',
            employeeName: employee?.name || 'Unassigned',
            status: 'Pending',
            description: recipe.description,
            estimatedTime: recipe.estimatedTime,
            steps: recipe.steps.map(s => s.text || s),
            tools: toolsForJobCard,
            accessories: accessoriesForJobCard,
            consumables: recipe.consumables,
            processedConsumables: processedConsumables,
            isCustomJob: false,
            salesOrderId: salesOrder.id,
            requiredSkills: recipe.requiredSkills || [],
        };
        
        try {
            const qrCodeDataUrl = await QRCode.toDataURL(newJobId, { width: 80 });

            await addJobCard(finalJobData);
            alert(`Job card created successfully for ${product.name}!`);
            
            // --- UPDATED: Full print logic to match other job cards ---
            const imageSection = product.photoUrl
                ? `<img src="${product.photoUrl}" alt="${product.name}" style="width: 100%; height: 200px; border-radius: 8px; object-fit: cover; margin-bottom: 15px; border: 1px solid #ddd;" />`
                : `<div style="border-radius: 8px; width: 100%; height: 200px; margin-bottom: 15px; background-color: #f5f5f5; display: flex; align-items: center; justify-content: center; color: #aaa; border: 1px solid #ddd;"><span>No Image Available</span></div>`;

            const printContents = `
                <div style="font-family: sans-serif; padding: 20px; color: #333;">
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                        <div>
                            <h1 style="font-size: 28px; font-weight: bold; margin: 0;">Job Card</h1>
                            <p style="font-size: 14px; color: #666; margin: 0;">Part: <span style="font-weight: 600;">${finalJobData.partName}</span></p>
                            <p style="font-size: 14px; color: #666; margin: 0;">Department: <span style="font-weight: 600;">${finalJobData.departmentName}</span></p>
                        </div>
                        <div style="text-align: right;">
                            <img src="${qrCodeDataUrl}" alt="QR Code" style="margin-bottom: 5px;"/>
                            <p style="font-size: 10px; color: #999; margin: 0;">${newJobId}</p>
                        </div>
                    </div>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;">
                        <div>
                            ${imageSection}
                            <div style="font-size: 13px; line-height: 1.6;">
                                <p style="margin: 0;"><b>Employee:</b> ${finalJobData.employeeName}</p>
                                <p style="margin: 0;"><b>Est. Time:</b> ${finalJobData.estimatedTime || 'N/A'} mins</p>
                                <p style="margin: 0;"><b>Description:</b> ${finalJobData.description || 'No description.'}</p>
                            </div>
                        </div>
                        <div style="font-size: 13px; line-height: 1.6;">
                            <div>
                                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">Required Tools & Accessories</h3>
                                <ul style="list-style: disc; padding-left: 20px; margin: 0;">
                                    ${finalJobData.tools?.length > 0 ? finalJobData.tools.map(tool => `<li>${tool.name}</li>`).join('') : '<li>No tools required.</li>'}
                                    ${finalJobData.accessories?.length > 0 ? finalJobData.accessories.map(acc => `<li style="margin-left: 15px;">${acc.name}</li>`).join('') : ''}
                                </ul>
                            </div>
                            <div style="margin-top: 20px;">
                                <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">Required Consumables</h3>
                                <ul style="list-style: disc; padding-left: 20px; margin: 0;">
                                    ${finalJobData.processedConsumables?.length > 0 ? finalJobData.processedConsumables.map(c => `<li><span style="font-weight: 600;">${c.name}</span>: ${c.quantity.toFixed(2)} ${c.unit}</li>`).join('') : '<li>No consumables required.</li>'}
                                </ul>
                            </div>
                        </div>
                    </div>
                     <div style="margin-top: 20px; border-top: 1px solid #eee; padding-top: 15px;">
                        <h3 style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">Steps</h3>
                        <ol style="list-style: decimal; padding-left: 20px; margin: 0;">
                            ${finalJobData.steps?.length > 0 ? finalJobData.steps.map(step => `<li>${step}</li>`).join('') : '<li>No steps defined.</li>'}
                        </ol>
                    </div>
                </div>
            `;
            
            const printWindow = window.open('', '_blank', 'height=800,width=1000');
            if (printWindow) {
                printWindow.document.write(`<html><head><title>Job Card ${newJobId}</title></head><body>${printContents}</body></html>`);
                printWindow.document.close();
                printWindow.onload = () => { setTimeout(() => printWindow.print(), 500); };
            }

            onClose();
        } catch (error) {
            console.error("Error creating job card:", error);
            alert("Failed to create job card.");
        }
    };

    if (loading) {
        return (
            <div className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4">
                 <div className="relative bg-gray-800 p-6 rounded-xl border border-gray-700 w-full max-w-lg">
                    <p className="text-center text-white">Loading data...</p>
                 </div>
            </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4">
            <div className="relative bg-gray-800 p-6 rounded-xl border border-gray-700 w-full max-w-lg">
                <Button onClick={onClose} variant="danger" className="absolute -top-3 -right-3 z-10 rounded-full h-8 w-8 p-1">
                    <X size={16}/>
                </Button>
                
                <div className="flex items-center gap-3 mb-4">
                    <Package size={24} className="text-blue-400" />
                    <div>
                        <h3 className="text-xl font-bold text-white">Create Standard Job</h3>
                        <p className="text-gray-300">For Product: {lineItem.description}</p>
                    </div>
                </div>

                <div className="space-y-4">
                    <Dropdown
                        label="Assign to Department"
                        name="departmentId"
                        value={selection.departmentId}
                        onChange={handleSelectionChange}
                        options={departments}
                        placeholder="Select a department..."
                    />
                    <Dropdown
                        label="Assign to Employee (Optional)"
                        name="employeeId"
                        value={selection.employeeId}
                        onChange={handleSelectionChange}
                        options={employees.filter(e => e.departmentId === selection.departmentId)}
                        placeholder="Select an employee..."
                        disabled={!selection.departmentId}
                    />
                </div>

                <div className="mt-6 flex justify-end">
                    <Button onClick={handleSubmit} variant="primary">Generate Job Card & Print</Button>
                </div>
            </div>
        </div>
    );
};

export default StandardJobCreatorModal;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\payroll\PermanentPayroll.jsx
==================================================
// src/components/features/payroll/PermanentPayroll.jsx (Final Correct Version)

import React, { useState, useEffect } from 'react';
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import { getEmployees } from '../../../api/firestore';
import { getDocs, collection, query, where, orderBy } from 'firebase/firestore';
import { db } from '../../../api/firebase';
import { ChevronDown, ChevronRight, AlertCircle } from 'lucide-react';

// --- HELPER FUNCTIONS FOR PAYROLL LOGIC ---

// Calculates the duration of a workday in hours, excluding breaks
const calculateWorkdayHours = (startTime, endTime) => {
    if (!startTime || !endTime) return 0;
    const breakMinutes = 45; // 15 min tea + 30 min lunch
    const durationMinutes = (endTime.getTime() - startTime.getTime()) / (1000 * 60);
    const workMinutes = Math.max(0, durationMinutes - breakMinutes);
    return workMinutes / 60;
};

// Checks if an employee was late or left early
const checkPunctuality = (date, startTime, endTime) => {
    const dayOfWeek = date.getDay(); // Sunday = 0, Friday = 5
    const standardStartTime = new Date(date.getTime());
    standardStartTime.setHours(7, 0, 0, 0);

    const standardEndTime = new Date(date.getTime());
    if (dayOfWeek >= 1 && dayOfWeek <= 4) { // Monday to Thursday
        standardEndTime.setHours(17, 0, 0, 0);
    } else { // Friday
        standardEndTime.setHours(15, 45, 0, 0);
    }

    const isLate = startTime > standardStartTime;
    const leftEarly = endTime < standardEndTime;

    return { isLate, leftEarly };
};


const PermanentPayroll = () => {
    const [employees, setEmployees] = useState([]);
    const [startDate, setStartDate] = useState('');
    const [endDate, setEndDate] = useState('');
    const [payrollResults, setPayrollResults] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [expandedEmployeeId, setExpandedEmployeeId] = useState(null);

    useEffect(() => {
        const fetchEmployeesData = async () => {
            try {
                const fetchedEmployees = await getEmployees();
                // We only care about permanent employees for this page
                setEmployees(fetchedEmployees.filter(e => e.employeeType === 'permanent'));
            } catch (err) {
                console.error("Error fetching employees:", err);
                setError("Failed to load employee data.");
            }
        };
        fetchEmployeesData();
    }, []);

    const handleCalculatePayroll = async () => {
        if (!startDate || !endDate) {
            setError("Please select both a start and end date.");
            return;
        }
        setLoading(true);
        setError(null);
        setPayrollResults(null);

        const startDateTime = new Date(startDate);
        startDateTime.setHours(0, 0, 0, 0);
        const endDateTime = new Date(endDate);
        endDateTime.setHours(23, 59, 59, 999);

        try {
            // Fetch all scan events within the date range
            const scanEventsQuery = query(
                collection(db, 'scanEvents'),
                where('timestamp', '>=', startDateTime),
                where('timestamp', '<=', endDateTime),
                orderBy('timestamp', 'asc')
            );
            const scanEventsSnapshot = await getDocs(scanEventsQuery);
            const scanEvents = scanEventsSnapshot.docs.map(d => ({...d.data(), timestamp: d.data().timestamp.toDate()}));
            
            // Group scans by employee and then by day
            const dailyScans = {};
            for (const event of scanEvents) {
                if (!event.employeeId) continue;
                const dateStr = event.timestamp.toISOString().split('T')[0];
                const key = `${event.employeeId}_${dateStr}`;
                if (!dailyScans[key]) {
                    dailyScans[key] = {
                        employeeId: event.employeeId,
                        date: new Date(dateStr),
                        scans: []
                    };
                }
                dailyScans[key].scans.push(event.timestamp);
            }

            // Process each day's scans to get start/end times
            const dailyTimeEntries = Object.values(dailyScans).map(dayData => {
                const firstScan = dayData.scans[0];
                const lastScan = dayData.scans[dayData.scans.length - 1];
                const punctuality = checkPunctuality(dayData.date, firstScan, lastScan);
                return {
                    employeeId: dayData.employeeId,
                    date: dayData.date,
                    startTime: firstScan,
                    endTime: lastScan,
                    totalHours: calculateWorkdayHours(firstScan, lastScan),
                    ...punctuality
                };
            });

            // Aggregate results per employee
            const results = employees.map(employee => {
                const employeeEntries = dailyTimeEntries.filter(e => e.employeeId === employee.id);
                const totalHours = employeeEntries.reduce((sum, entry) => sum + entry.totalHours, 0);
                const totalPay = totalHours * (employee.hourlyRate || 0);

                return {
                    ...employee,
                    totalHours,
                    totalPay,
                    dailyBreakdown: employeeEntries.sort((a,b) => a.date - b.date),
                };
            });

            setPayrollResults(results);

        } catch (err) {
            console.error("Error calculating payroll:", err);
            setError("Failed to calculate payroll. Check console for details.");
        } finally {
            setLoading(false);
        }
    };
    
    const toggleEmployeeDetails = (employeeId) => {
        setExpandedEmployeeId(prevId => (prevId === employeeId ? null : employeeId));
    };

    return (
        <div className="space-y-6">
            <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
                <h3 className="text-xl font-bold text-white mb-4">Calculate Payroll Period</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end mb-4">
                    <Input label="Period Start Date" type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
                    <Input label="Period End Date" type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
                    <Button onClick={handleCalculatePayroll} disabled={loading}>
                        {loading ? 'Calculating...' : 'Generate Hours Report'}
                    </Button>
                </div>
                {error && <p className="text-red-400 text-center">{error}</p>}
            </div>

            {payrollResults && (
                <div className="bg-gray-800 rounded-lg border border-gray-700 overflow-hidden">
                    <table className="w-full text-left text-sm">
                        <thead className="bg-gray-900/50">
                            <tr className="border-b border-gray-600">
                                <th className="p-3 font-semibold text-gray-400"></th>
                                <th className="p-3 font-semibold text-gray-400">Employee</th>
                                <th className="p-3 font-semibold text-gray-400">Total Hours</th>
                                <th className="p-3 font-semibold text-gray-400">Total Pay</th>
                            </tr>
                        </thead>
                        <tbody>
                            {payrollResults.map(result => (
                                <React.Fragment key={result.id}>
                                    <tr onClick={() => toggleEmployeeDetails(result.id)} className="border-b border-gray-700 hover:bg-gray-700/50 cursor-pointer">
                                        <td className="p-3 text-center">
                                            {expandedEmployeeId === result.id ? <ChevronDown size={16}/> : <ChevronRight size={16}/>}
                                        </td>
                                        <td className="p-3 text-gray-200 font-medium">{result.name}</td>
                                        <td className="p-3 text-gray-300 font-mono">{result.totalHours.toFixed(2)}</td>
                                        <td className="p-3 text-green-400 font-bold font-mono">R {result.totalPay.toFixed(2)}</td>
                                    </tr>
                                    {expandedEmployeeId === result.id && (
                                        <tr className="bg-gray-900">
                                            <td colSpan="4" className="p-4">
                                                <h4 className="font-bold text-white mb-2">Daily Breakdown</h4>
                                                <div className="space-y-2">
                                                    {result.dailyBreakdown.length > 0 ? result.dailyBreakdown.map(day => (
                                                        <div key={day.date.toISOString()} className="grid grid-cols-4 gap-4 bg-gray-800 p-2 rounded-md">
                                                            <span className="font-semibold text-gray-300">{day.date.toLocaleDateString('en-ZA', { weekday: 'long', day: 'numeric', month: 'short' })}</span>
                                                            <span className={day.isLate ? 'text-red-400' : 'text-gray-300'}>In: {day.startTime.toLocaleTimeString()} {day.isLate && <AlertCircle size={14} className="inline ml-1"/>}</span>
                                                            <span className={day.leftEarly ? 'text-red-400' : 'text-gray-300'}>Out: {day.endTime.toLocaleTimeString()} {day.leftEarly && <AlertCircle size={14} className="inline ml-1"/>}</span>
                                                            <span>Hours: {day.totalHours.toFixed(2)}</span>
                                                        </div>
                                                    )) : <p className="text-gray-500">No work logged in this period.</p>}
                                                </div>
                                            </td>
                                        </tr>
                                    )}
                                </React.Fragment>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}
        </div>
    );
};

export default PermanentPayroll;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\payroll\SubcontractorLedger.jsx
==================================================
// src/components/features/payroll/SubcontractorLedger.jsx (Final Improved Version)

import React, { useState, useEffect, useMemo } from 'react';
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import Dropdown from '../../ui/Dropdown';
import { getEmployees, getProducts, listenToJobCards, addSubcontractorAdHocLog, addSubcontractorTeamLog } from '../../../api/firestore';
import { collection, query, where, orderBy, getDocs } from 'firebase/firestore';
import { db } from '../../../api/firebase';
import { DollarSign, PlusCircle } from 'lucide-react';

const SubcontractorLedger = () => {
    const [subcontractors, setSubcontractors] = useState([]);
    const [allProducts, setAllProducts] = useState([]);
    const [allJobs, setAllJobs] = useState([]);
    const [selectedSubcontractorId, setSelectedSubcontractorId] = useState('');
    const [startDate, setStartDate] = useState('');
    const [endDate, setEndDate] = useState('');
    const [loading, setLoading] = useState(true);
    const [generating, setGenerating] = useState(false);
    const [results, setResults] = useState(null);

    // State for the ad-hoc logging forms
    const [adHocLog, setAdHocLog] = useState({ date: '', description: '', hours: '', rate: '' });
    const [teamLog, setTeamLog] = useState({ date: '', name: '', hours: '', rate: '' });

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const [allEmps, allProds] = await Promise.all([getEmployees(), getProducts()]);
                setSubcontractors(allEmps.filter(e => e.employeeType === 'subcontractor'));
                setAllProducts(allProds);
                const unsubscribe = listenToJobCards(setAllJobs);
                return unsubscribe;
            } catch (err) {
                console.error("Error fetching data for ledger:", err);
            } finally {
                setLoading(false);
            }
        };
        const unsubscribePromise = fetchData();
        return () => { unsubscribePromise.then(unsub => unsub && unsub()); };
    }, []);

    const selectedSubcontractor = useMemo(() => {
        return subcontractors.find(s => s.id === selectedSubcontractorId);
    }, [selectedSubcontractorId, subcontractors]);

    // Pre-fill ad-hoc rate when a subcontractor with a per-hour model is selected
    useEffect(() => {
        if (selectedSubcontractor?.paymentModel === 'per_hour') {
            setAdHocLog(prev => ({ ...prev, rate: selectedSubcontractor.rate }));
        } else {
            setAdHocLog(prev => ({ ...prev, rate: '' }));
        }
    }, [selectedSubcontractor]);


    const handleGenerateLedger = async () => {
        if (!selectedSubcontractor || !startDate || !endDate) return;
        setGenerating(true);
        setResults(null);

        const startDateTime = new Date(startDate);
        const endDateTime = new Date(endDate);
        endDateTime.setHours(23, 59, 59, 999);

        // 1. Calculate Piece-Work Pay
        const completedJobs = allJobs.filter(job =>
            job.employeeId === selectedSubcontractor.id &&
            job.status === 'Complete' &&
            job.completedAt?.toDate() >= startDateTime &&
            job.completedAt?.toDate() <= endDateTime
        );

        let pieceWorkPay = 0;
        const pieceWorkJobs = completedJobs.map(job => {
            const product = allProducts.find(p => p.id === job.partId);
            let lineTotal = 0;
            if (selectedSubcontractor.paymentModel === 'per_kg' && product?.weight > 0) {
                lineTotal = product.weight * selectedSubcontractor.rate;
            } else if (selectedSubcontractor.paymentModel === 'per_product') {
                lineTotal = selectedSubcontractor.rate;
            }
            pieceWorkPay += lineTotal;
            return { ...job, product, lineTotal };
        }).filter(j => j.lineTotal > 0); // Only include jobs that contribute to piece-work pay

        // 2. Fetch Ad-hoc Logs
        const adHocQuery = query(collection(db, 'subcontractorAdHocLogs'), where('subcontractorId', '==', selectedSubcontractorId), where('date', '>=', startDate), where('date', '<=', endDate));
        const adHocSnapshot = await getDocs(adHocQuery);
        const adHocLogs = adHocSnapshot.docs.map(d => d.data());
        const adHocPay = adHocLogs.reduce((sum, log) => sum + (Number(log.hours) * Number(log.rate)), 0);

        // 3. Fetch Team Logs
        const teamLogQuery = query(collection(db, 'subcontractorTeamLogs'), where('subcontractorId', '==', selectedSubcontractorId), where('date', '>=', startDate), where('date', '<=', endDate));
        const teamLogSnapshot = await getDocs(teamLogQuery);
        const teamLogs = teamLogSnapshot.docs.map(d => d.data());
        const teamPay = teamLogs.reduce((sum, log) => sum + (Number(log.hours) * Number(log.rate)), 0);

        setResults({ pieceWorkJobs, pieceWorkPay, adHocLogs, adHocPay, teamLogs, teamPay, grandTotal: pieceWorkPay + adHocPay + teamPay });
        setGenerating(false);
    };

    const handleAddAdHocLog = async () => {
        if (!adHocLog.date || !adHocLog.description || !adHocLog.hours || !adHocLog.rate) {
            return alert("Please fill all fields for the ad-hoc log, including the rate.");
        }
        await addSubcontractorAdHocLog({ ...adHocLog, subcontractorId: selectedSubcontractorId, subcontractorName: selectedSubcontractor.name });
        setAdHocLog({ date: '', description: '', hours: '', rate: selectedSubcontractor?.paymentModel === 'per_hour' ? selectedSubcontractor.rate : '' });
        handleGenerateLedger();
    };

    const handleAddTeamLog = async () => {
        if (!teamLog.date || !teamLog.name || !teamLog.hours || !teamLog.rate) {
            return alert("Please fill all fields for the team member log.");
        }
        await addSubcontractorTeamLog({ ...teamLog, subcontractorId: selectedSubcontractorId, subcontractorName: selectedSubcontractor.name });
        setTeamLog({ date: '', name: '', hours: '', rate: '' });
        handleGenerateLedger();
    };

    return (
        <div className="space-y-6">
            <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
                <h3 className="text-xl font-bold text-white mb-4">Generate Subcontractor Payment Ledger</h3>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 items-end mb-4">
                    <Dropdown label="Select Subcontractor" value={selectedSubcontractorId} onChange={e => setSelectedSubcontractorId(e.target.value)} options={subcontractors} placeholder="Choose subcontractor..."/>
                    <Input label="Period Start Date" type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
                    <Input label="Period End Date" type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
                    <Button onClick={handleGenerateLedger} disabled={generating || !selectedSubcontractorId}>
                        {generating ? 'Generating...' : 'Generate Ledger'}
                    </Button>
                </div>
            </div>

            {results && selectedSubcontractor && (
                <div className="space-y-6 animate-fade-in">
                    <div className="bg-green-900/50 border border-green-500/50 p-6 rounded-xl text-center">
                        <p className="text-sm font-medium text-green-300">Total Payment Due to {selectedSubcontractor.name}</p>
                        <p className="text-5xl font-bold text-white font-mono">R {results.grandTotal.toFixed(2)}</p>
                    </div>
                    
                    {selectedSubcontractor.paymentModel !== 'per_hour' && (
                        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
                            <h4 className="font-bold text-white mb-2">Piece-Work Ledger ({selectedSubcontractor.paymentModel})</h4>
                            <table className="w-full text-left text-sm">
                                <thead><tr className="border-b border-gray-600"><th className="p-2">Completed Job</th><th className="p-2 text-right">Weight/Unit</th><th className="p-2 text-right">Rate</th><th className="p-2 text-right">Line Total</th></tr></thead>
                                <tbody>{results.pieceWorkJobs.map(job => (<tr key={job.id}><td className="p-2">{job.partName}</td><td className="p-2 text-right">{job.product?.weight || 1} {selectedSubcontractor.paymentModel === 'per_kg' ? 'kg' : 'unit'}</td><td className="p-2 text-right">R{selectedSubcontractor.rate.toFixed(2)}</td><td className="p-2 text-right font-bold">R{job.lineTotal.toFixed(2)}</td></tr>))}</tbody>
                                <tfoot><tr className="border-t-2 border-gray-600"><td colSpan="3" className="p-2 font-bold text-right">Piece-Work Subtotal</td><td className="p-2 text-right font-bold text-lg text-green-400">R{results.pieceWorkPay.toFixed(2)}</td></tr></tfoot>
                            </table>
                        </div>
                    )}
                    
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 space-y-4">
                            <h4 className="font-bold text-white">Ad-Hoc Hourly Work ({selectedSubcontractor.name})</h4>
                            <div className="grid grid-cols-4 gap-2 items-end">
                                <Input label="Date" type="date" value={adHocLog.date} onChange={e => setAdHocLog({...adHocLog, date: e.target.value})} />
                                <Input label="Description" value={adHocLog.description} onChange={e => setAdHocLog({...adHocLog, description: e.target.value})} />
                                <Input label="Hours" type="number" value={adHocLog.hours} onChange={e => setAdHocLog({...adHocLog, hours: e.target.value})} />
                                <Input label="Rate" type="number" value={adHocLog.rate} placeholder="R/hr" onChange={e => setAdHocLog({...adHocLog, rate: e.target.value})} />
                            </div>
                            <Button onClick={handleAddAdHocLog} className="w-full"><PlusCircle size={16} className="mr-2"/>Log Ad-Hoc Hours</Button>
                            <table className="w-full text-left text-sm">
                                <thead><tr className="border-b border-gray-600"><th className="p-1">Date</th><th className="p-1">Description</th><th className="p-1 text-right">Hours</th><th className="p-1 text-right">Pay</th></tr></thead>
                                <tbody>{results.adHocLogs.map((log, i) => (<tr key={i}><td className="p-1">{log.date}</td><td className="p-1">{log.description}</td><td className="p-1 text-right">{log.hours}</td><td className="p-1 text-right">R{(log.hours * log.rate).toFixed(2)}</td></tr>))}</tbody>
                                <tfoot><tr className="border-t-2 border-gray-600"><td colSpan="3" className="p-1 font-bold text-right">Ad-Hoc Subtotal</td><td className="p-1 text-right font-bold text-lg text-green-400">R{results.adHocPay.toFixed(2)}</td></tr></tfoot>
                            </table>
                        </div>
                        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 space-y-4">
                            <h4 className="font-bold text-white">Team Hours</h4>
                            <div className="grid grid-cols-4 gap-2 items-end">
                                <Input label="Date" type="date" value={teamLog.date} onChange={e => setTeamLog({...teamLog, date: e.target.value})} />
                                <Input label="Name" value={teamLog.name} onChange={e => setTeamLog({...teamLog, name: e.target.value})} />
                                <Input label="Hours" type="number" value={teamLog.hours} onChange={e => setTeamLog({...teamLog, hours: e.target.value})} />
                                <Input label="Rate" type="number" value={teamLog.rate} onChange={e => setTeamLog({...teamLog, rate: e.target.value})} />
                            </div>
                            <Button onClick={handleAddTeamLog} className="w-full"><PlusCircle size={16} className="mr-2"/>Log Team Hours</Button>
                            <table className="w-full text-left text-sm">
                                <thead><tr className="border-b border-gray-600"><th className="p-1">Date</th><th className="p-1">Name</th><th className="p-1 text-right">Hours</th><th className="p-1 text-right">Pay</th></tr></thead>
                                <tbody>{results.teamLogs.map((log, i) => (<tr key={i}><td className="p-1">{log.date}</td><td className="p-1">{log.name}</td><td className="p-1 text-right">{log.hours}</td><td className="p-1 text-right">R{(log.hours * log.rate).toFixed(2)}</td></tr>))}</tbody>
                                <tfoot><tr className="border-t-2 border-gray-600"><td colSpan="3" className="p-1 font-bold text-right">Team Subtotal</td><td className="p-1 text-right font-bold text-lg text-green-400">R{results.teamPay.toFixed(2)}</td></tr></tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default SubcontractorLedger;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\qc\QcQueue.jsx
==================================================
import React, { useState, useEffect, useMemo } from 'react';
import { listenToJobCards, processQcDecision } from '../../../api/firestore'; // Use the new function
import Button from '../../ui/Button';

const QcQueue = () => {
  const [allJobs, setAllJobs] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = listenToJobCards((fetchedJobs) => {
      setAllJobs(fetchedJobs);
      setLoading(false);
    });
    return () => unsubscribe();
  }, []);

  const qcJobs = useMemo(() => {
    return allJobs.filter(job => job.status === 'Awaiting QC');
  }, [allJobs]);

  const handleApprove = async (job) => {
    if (window.confirm(`Are you sure you want to approve this job? This will deduct used items from stock.`)) {
      try {
        await processQcDecision(job, true); // Call with 'true' for approval
        alert('Job approved and stock updated!');
      } catch (err) {
        alert('Failed to process approval.');
        console.error(err);
      }
    }
  };

  const handleReject = async (job) => {
    const reason = prompt(`Please provide a reason for rejecting this job:`);
    if (reason) {
      try {
        await processQcDecision(job, false, reason); // Call with 'false' and a reason for rejection
        alert('Job marked with an issue, and stock has been deducted.');
      } catch (err) {
        alert('Failed to process rejection.');
        console.error(err);
      }
    }
  };

  if (loading) return <p className="text-center text-gray-400">Loading QC queue...</p>;

  return (
    <div className="bg-gray-800 p-2 sm:p-6 rounded-xl border border-gray-700 shadow-lg">
      <div className="overflow-x-auto">
        <table className="w-full text-left">
           <thead>
            <tr className="border-b border-gray-600">
              <th className="p-3 text-sm font-semibold text-gray-400">Job ID</th>
              <th className="p-3 text-sm font-semibold text-gray-400">Part</th>
              <th className="p-3 text-sm font-semibold text-gray-400">Employee</th>
              <th className="p-3 text-sm font-semibold text-gray-400">Actions</th>
            </tr>
          </thead>
          <tbody>
            {(qcJobs || []).map(job => (
              <tr key={job.id} className="border-b border-gray-700 hover:bg-gray-700/50">
                <td className="p-3 text-gray-400 text-xs font-mono">{job.jobId}</td>
                <td className="p-3 text-gray-300">{job.partName}</td>
                <td className="p-3 text-gray-300">{job.employeeName}</td>
                <td className="p-3 flex space-x-2">
                  <Button onClick={() => handleApprove(job)} variant="primary" className="bg-green-600 hover:bg-green-700 py-1 px-3 text-sm">Approve</Button>
                  <Button onClick={() => handleReject(job)} variant="danger" className="py-1 px-3 text-sm">Reject</Button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        {qcJobs.length === 0 && !loading && <p className="text-center p-8 text-gray-400">The QC queue is empty.</p>}
      </div>
    </div>
  );
};

export default QcQueue;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\quotes\AddCustomWorkModal.jsx
==================================================
// src/components/features/quotes/AddCustomWorkModal.jsx (New File)

import React, { useState, useMemo, useRef, useEffect } from 'react';
import Button from '../../ui/Button';
import Input from '../../ui/Input';
import { X, PlusCircle, Trash2, Search } from 'lucide-react';

const AddCustomWorkModal = ({ onClose, onAdd, calculationData }) => {
    const { inventoryItems, averageBurdenedRate } = calculationData;

    const [description, setDescription] = useState('');
    const [estimatedHours, setEstimatedHours] = useState('');
    const [consumables, setConsumables] = useState([]);

    // State for the consumable search dropdown
    const [consumableSearchTerm, setConsumableSearchTerm] = useState('');
    const [filteredConsumableOptions, setFilteredConsumableOptions] = useState([]);
    const [selectedConsumableItem, setSelectedConsumableItem] = useState(null);
    const [consumableQuantity, setConsumableQuantity] = useState('');
    const consumableSearchRef = useRef(null);
    
    useEffect(() => {
        if (consumableSearchTerm.length > 0) {
            const lowerCaseSearchTerm = consumableSearchTerm.toLowerCase();
            const filtered = inventoryItems.filter(item =>
                item.name.toLowerCase().includes(lowerCaseSearchTerm) ||
                (item.itemCode && item.itemCode.toLowerCase().includes(lowerCaseSearchTerm))
            ).slice(0, 10);
            setFilteredConsumableOptions(filtered);
        } else {
            setFilteredConsumableOptions([]);
        }
    }, [consumableSearchTerm, inventoryItems]);

    const selectConsumableFromSearch = (item) => {
        setSelectedConsumableItem(item);
        setConsumableSearchTerm(item.name);
        setFilteredConsumableOptions([]);
    };

    const addConsumableToList = () => {
        if (!selectedConsumableItem || !consumableQuantity || parseFloat(consumableQuantity) <= 0) return;
        setConsumables([...consumables, { ...selectedConsumableItem, quantity: parseFloat(consumableQuantity) }]);
        setSelectedConsumableItem(null);
        setConsumableSearchTerm('');
        setConsumableQuantity('');
    };

    const removeConsumable = (id) => {
        setConsumables(consumables.filter(c => c.id !== id));
    };

    const calculatedCost = useMemo(() => {
        const materialCost = consumables.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        const laborCost = (parseFloat(estimatedHours) || 0) * averageBurdenedRate;
        return materialCost + laborCost;
    }, [consumables, estimatedHours, averageBurdenedRate]);

    const handleAddItemToQuote = () => {
        if (!description) return alert("Please provide a description for this custom work.");
        if (calculatedCost <= 0) return alert("The estimated cost must be greater than zero.");
        
        onAdd({
            description: description,
            cost: calculatedCost,
        });
        onClose();
    };

    return (
        <div onClick={onClose} className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4">
            <div onClick={(e) => e.stopPropagation()} className="bg-gray-900 rounded-xl border border-gray-700 w-full max-w-2xl max-h-[90vh] flex flex-col">
                <div className="flex justify-between items-center p-4 border-b border-gray-700">
                    <h2 className="text-xl font-bold text-white">Add Custom Work to Quote</h2>
                    <Button onClick={onClose} variant="secondary" className="p-2"><X size={20} /></Button>
                </div>

                <div className="p-6 overflow-y-auto space-y-4">
                    <Input label="Line Item Description" placeholder="e.g., Repair and reinforce customer bracket" value={description} onChange={e => setDescription(e.target.value)} />
                    <Input label="Estimated Labor (Hours)" type="number" placeholder="e.g., 4.5" value={estimatedHours} onChange={e => setEstimatedHours(e.target.value)} />

                    {/* Consumables Section */}
                    <div>
                        <h4 className="font-semibold text-white mb-2">Materials Needed</h4>
                        <div className="p-4 bg-gray-800/50 rounded-lg space-y-3">
                            <div className="flex items-end gap-2" ref={consumableSearchRef}>
                                <div className="flex-grow relative">
                                    <Input label="Search Inventory" value={consumableSearchTerm} onChange={(e) => { setConsumableSearchTerm(e.target.value); setSelectedConsumableItem(null); }} placeholder="Search for a material..." />
                                    <Search className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 mt-3" size={20} />
                                    {consumableSearchTerm.length > 0 && filteredConsumableOptions.length > 0 && (
                                        <ul className="absolute z-20 bg-gray-700 border border-gray-600 rounded-md w-full mt-1 max-h-48 overflow-y-auto shadow-lg">
                                            {filteredConsumableOptions.map(item => (
                                                <li key={item.id} className="p-2 text-sm text-gray-200 hover:bg-blue-600 cursor-pointer" onClick={() => selectConsumableFromSearch(item)}>{item.name}</li>
                                            ))}
                                        </ul>
                                    )}
                                </div>
                                <div className="w-24"><Input label="Quantity" type="number" value={consumableQuantity} onChange={e => setConsumableQuantity(e.target.value)} /></div>
                                <Button type="button" onClick={addConsumableToList} disabled={!selectedConsumableItem}>Add</Button>
                            </div>
                            <ul className="space-y-2 pt-3 border-t border-gray-700">
                                {consumables.map(c => (
                                    <li key={c.id} className="flex justify-between items-center bg-gray-700 p-2 rounded text-sm">
                                        <span>{c.name} : {c.quantity} {c.unit}</span>
                                        <Button type="button" onClick={() => removeConsumable(c.id)} variant="danger" className="py-0.5 px-2 text-xs">X</Button>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    </div>
                </div>

                <div className="p-4 bg-gray-900/50 border-t border-gray-700 flex justify-between items-center">
                    <div>
                        <p className="text-sm text-gray-400">Calculated Item Cost</p>
                        <p className="text-2xl font-bold text-white font-mono">R {calculatedCost.toFixed(2)}</p>
                    </div>
                    <Button onClick={handleAddItemToQuote} variant="primary">Add to Quote</Button>
                </div>
            </div>
        </div>
    );
};

export default AddCustomWorkModal;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\quotes\AddPurchasedItemModal.jsx
==================================================
// src/components/features/quotes/AddPurchasedItemModal.jsx (New File)

import React, { useState } from 'react';
import Button from '../../ui/Button';
import Input from '../../ui/Input';
import { X, ShoppingBag } from 'lucide-react';

const AddPurchasedItemModal = ({ onClose, onAdd }) => {
    const [description, setDescription] = useState('');
    const [estimatedCost, setEstimatedCost] = useState('');
    const [quantity, setQuantity] = useState(1);

    const handleAddItemToQuote = () => {
        if (!description || !estimatedCost || !quantity) {
            return alert("Please provide a description, estimated cost, and quantity.");
        }
        if (parseFloat(estimatedCost) <= 0 || parseInt(quantity, 10) <= 0) {
            return alert("Cost and quantity must be greater than zero.");
        }

        // Add the item to the quote's line items
        // We add 'isPurchasedItem: true' to identify it later
        onAdd({
            description,
            cost: parseFloat(estimatedCost) * parseInt(quantity, 10), // The total cost for the quantity
            isPurchasedItem: true,
            quantity: parseInt(quantity, 10),
            unitCost: parseFloat(estimatedCost)
        });

        onClose();
    };

    return (
        <div onClick={onClose} className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4">
            <div onClick={(e) => e.stopPropagation()} className="bg-gray-900 rounded-xl border border-gray-700 w-full max-w-lg max-h-[90vh] flex flex-col">
                <div className="flex justify-between items-center p-4 border-b border-gray-700">
                    <h2 className="text-xl font-bold text-white flex items-center gap-2">
                        <ShoppingBag /> Add Purchased Item to Quote
                    </h2>
                    <Button onClick={onClose} variant="secondary" className="p-2"><X size={20} /></Button>
                </div>

                <div className="p-6 overflow-y-auto space-y-4">
                    <Input 
                        label="Item Description" 
                        placeholder="e.g., 2x Hella Spotlights" 
                        value={description} 
                        onChange={e => setDescription(e.target.value)} 
                    />
                    <div className="grid grid-cols-2 gap-4">
                        <Input 
                            label="Estimated Cost (per item)" 
                            type="number" 
                            placeholder="e.g., 1500" 
                            value={estimatedCost} 
                            onChange={e => setEstimatedCost(e.target.value)} 
                        />
                        <Input 
                            label="Quantity" 
                            type="number" 
                            placeholder="e.g., 1" 
                            value={quantity} 
                            onChange={e => setQuantity(e.target.value)} 
                        />
                    </div>
                     <p className="text-xs text-gray-400">
                        This is for items you will buy specifically for this job. The cost you enter here is an estimate for the quote. You will confirm the actual price later.
                    </p>
                </div>

                <div className="p-4 bg-gray-900/50 border-t border-gray-700 flex justify-end">
                    <Button onClick={handleAddItemToQuote} variant="primary">Add to Quote</Button>
                </div>
            </div>
        </div>
    );
};

export default AddPurchasedItemModal;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\quotes\QuoteCreator.jsx
==================================================
// src/components/features/quotes/QuoteCreator.jsx (Final Version)

import React, { useState, useMemo } from 'react';
import { addQuote } from '../../../api/firestore';
import Button from '../../ui/Button';
import Input from '../../ui/Input';
import Dropdown from '../../ui/Dropdown';
import { X, PlusCircle, Trash2, DollarSign, Percent, FileText, Package, Wrench } from 'lucide-react';
import AddCustomWorkModal from './AddCustomWorkModal'; // Import the new modal

const QuoteCreator = ({ onClose, calculationData }) => {
    const { products, allRecipes, inventoryItems, averageBurdenedRate } = calculationData;

    const [customerName, setCustomerName] = useState('');
    const [customerEmail, setCustomerEmail] = useState('');
    const [lineItems, setLineItems] = useState([]);
    const [margin, setMargin] = useState('40');
    
    // State to control our new modal
    const [isCustomWorkModalOpen, setCustomWorkModalOpen] = useState(false);

    const [catalogProductId, setCatalogProductId] = useState('');

    const handleAddLineItem = (item) => {
        setLineItems(prevItems => [...prevItems, { ...item, id: Date.now() }]);
    };

    const handleAddCatalogItem = () => {
        if (!catalogProductId) return;
        const product = products.find(p => p.id === catalogProductId);
        if (!product) return alert("Selected product not found.");
        const productRecipes = allRecipes.filter(r => r.productId === product.id);
        if (productRecipes.length === 0) return alert("This product has no recipes defined. Cannot calculate cost.");

        const inventoryMap = new Map(inventoryItems.map(item => [item.id, item]));
        let totalMaterialCost = 0;
        let totalLaborCost = 0;

        productRecipes.forEach(recipe => {
            totalMaterialCost += (recipe.consumables || []).reduce((sum, consumable) => {
                const inventoryItem = inventoryMap.get(consumable.itemId);
                return sum + ((inventoryItem?.price || 0) * (consumable.quantity || 0));
            }, 0);
            totalLaborCost += (recipe.estimatedTime || 0) / 60 * averageBurdenedRate;
        });
        
        handleAddLineItem({ description: product.name, cost: totalMaterialCost + totalLaborCost });
        setCatalogProductId('');
    };

    const handleRemoveLineItem = (id) => {
        setLineItems(lineItems.filter(item => item.id !== id));
    };

    const totals = useMemo(() => {
        const subtotal = lineItems.reduce((sum, item) => sum + item.cost, 0);
        const marginDecimal = parseFloat(margin) / 100;
        const total = (marginDecimal < 1 && marginDecimal >= 0) ? subtotal / (1 - marginDecimal) : subtotal;
        const profit = total - subtotal;
        return { subtotal, total, profit };
    }, [lineItems, margin]);

    const handleSaveQuote = async () => {
        if (!customerName) return alert("Please enter a customer name.");
        if (lineItems.length === 0) return alert("Please add at least one line item.");
        const quoteData = { customerName, customerEmail, lineItems: lineItems.map(({ id, ...rest }) => rest), subtotal: totals.subtotal, margin: parseFloat(margin), total: totals.total, quoteId: `Q-${Date.now()}` };
        try {
            await addQuote(quoteData);
            alert(`Quote ${quoteData.quoteId} saved successfully!`);
            onClose();
        } catch (error) {
            console.error("Error saving quote:", error);
            alert("Failed to save quote. See console for details.");
        }
    };

    return (
        <>
            <div onClick={onClose} className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4">
                <div onClick={(e) => e.stopPropagation()} className="bg-gray-800 rounded-xl border border-gray-700 w-full max-w-4xl max-h-[90vh] flex flex-col">
                    <div className="flex justify-between items-center p-4 border-b border-gray-700">
                        <h2 className="text-xl font-bold text-white flex items-center gap-2"><FileText /> Create New Sales Quote</h2>
                        <Button onClick={onClose} variant="secondary" className="p-2"><X size={20} /></Button>
                    </div>

                    <div className="p-6 overflow-y-auto space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <Input label="Customer Name" placeholder="e.g., John Doe" value={customerName} onChange={e => setCustomerName(e.target.value)} />
                            <Input label="Customer Email" type="email" placeholder="e.g., john.doe@example.com" value={customerEmail} onChange={e => setCustomerEmail(e.target.value)} />
                        </div>

                        <div className="space-y-3">
                            <h3 className="font-semibold text-white">Quote Line Items</h3>
                            <div className="space-y-2 max-h-48 overflow-y-auto pr-2">
                                {lineItems.map((item) => (
                                    <div key={item.id} className="flex items-center gap-2 bg-gray-700/50 p-2 rounded-md">
                                        <p className="flex-grow text-gray-200">{item.description}</p>
                                        <p className="font-mono text-gray-300" title="Estimated True Cost">R {item.cost.toFixed(2)}</p>
                                        <Button onClick={() => handleRemoveLineItem(item.id)} variant="danger" className="p-1 h-7 w-7"><Trash2 size={14}/></Button>
                                    </div>
                                ))}
                            </div>
                            
                            <div className="flex items-end gap-2 p-4 border-t border-gray-700 bg-gray-900/50 rounded-lg">
                                <div className="flex-grow">
                                    <Dropdown label="Add from Product Catalog" value={catalogProductId} onChange={e => setCatalogProductId(e.target.value)} options={products} placeholder="Select a product..."/>
                                </div>
                                <Button onClick={handleAddCatalogItem} variant="secondary"><Package size={16} className="mr-2"/>Add Product</Button>
                                <div className="border-l border-gray-600 h-10 mx-2"></div>
                                <Button onClick={() => setCustomWorkModalOpen(true)} variant="secondary"><Wrench size={16} className="mr-2"/>Add Custom Work</Button>
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 pt-4 border-t border-gray-600">
                            <div className="bg-gray-900/50 p-4 rounded-lg">
                                <p className="text-sm text-gray-400 flex items-center gap-1"><DollarSign size={14}/> Subtotal (Cost)</p>
                                <p className="text-2xl font-bold font-mono text-white">R {totals.subtotal.toFixed(2)}</p>
                            </div>
                            <div className="bg-gray-900/50 p-4 rounded-lg flex flex-col justify-center">
                                <Input label="Profit Margin (%)" type="number" value={margin} onChange={e => setMargin(e.target.value)} />
                            </div>
                            <div className="bg-green-900/50 p-4 rounded-lg md:col-span-2">
                                <p className="text-sm text-green-300 flex items-center gap-1"><DollarSign size={14}/> Final Quoted Price</p>
                                <p className="text-4xl font-bold font-mono text-white">R {totals.total.toFixed(2)}</p>
                                <p className="text-xs text-gray-400 mt-1">Projected Profit: R {totals.profit.toFixed(2)}</p>
                            </div>
                        </div>
                    </div>

                    <div className="p-4 bg-gray-900/50 border-t border-gray-700 flex justify-end gap-2">
                        <Button onClick={onClose} variant="secondary">Cancel</Button>
                        <Button onClick={handleSaveQuote} variant="primary">Save Quote</Button>
                    </div>
                </div>
            </div>
            
            {isCustomWorkModalOpen && (
                <AddCustomWorkModal 
                    onClose={() => setCustomWorkModalOpen(false)}
                    onAdd={handleAddLineItem}
                    calculationData={calculationData}
                />
            )}
        </>
    );
};

export default QuoteCreator;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\scanner\Scanner.jsx
==================================================
import React, { useState } from 'react';
import { getJobByJobId, updateJobStatus } from '../../../api/firestore';
import Input from '../../ui/Input';
import Button from '../../ui/Button';

const Scanner = () => {
  const [jobIdInput, setJobIdInput] = useState('');
  const [foundJob, setFoundJob] = useState(null);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const handleFindJob = async (e) => {
    e.preventDefault();
    if (!jobIdInput.trim()) return;
    setLoading(true);
    setError('');
    setFoundJob(null);
    try {
      const job = await getJobByJobId(jobIdInput);
      setFoundJob(job);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateStatus = async (newStatus) => {
    if (!foundJob) return;
    try {
      await updateJobStatus(foundJob.id, newStatus);
      alert(`Job status for ${foundJob.jobId} updated to "${newStatus}"!`);
      // Reset the scanner for the next job
      setFoundJob(null);
      setJobIdInput('');
      setError('');
    } catch (err) {
      setError("Failed to update status. Please try again.");
      console.error(err);
    }
  };

  return (
    <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 max-w-2xl mx-auto">
      <form onSubmit={handleFindJob} className="flex items-center space-x-4">
        <Input
          name="jobId"
          value={jobIdInput}
          onChange={(e) => setJobIdInput(e.target.value)}
          placeholder="Scan or type Job ID..."
          className="flex-grow"
        />
        <Button type="submit" variant="primary" disabled={loading}>
          {loading ? 'Finding...' : 'Find Job'}
        </Button>
      </form>

      {error && <p className="mt-4 text-center text-red-400">{error}</p>}

      {foundJob && (
        <div className="mt-6 border-t border-gray-700 pt-6">
          <h3 className="text-xl font-bold text-white">{foundJob.partName}</h3>
          <p className="text-gray-400">Assigned to: {foundJob.employeeName}</p>
          <p className="text-gray-400">Current Status: <span className="font-semibold text-yellow-300">{foundJob.status}</span></p>

          <div className="mt-6 grid grid-cols-2 gap-4">
            {/* We can add more logic here later to show/hide buttons based on current status */}
            <Button onClick={() => handleUpdateStatus('In Progress')}>Start Job</Button>
            <Button onClick={() => handleUpdateStatus('Paused')} variant="secondary">Pause</Button>
            <Button onClick={() => handleUpdateStatus('Awaiting QC')} >Complete Job</Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Scanner;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\CampaignManager.jsx
==================================================
import React, { useState, useEffect } from 'react';
import { getCampaigns, addCampaign, updateCampaign, deleteCampaign } from '../../../api/firestore';
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import { DollarSign, Trash2, Edit, PlusCircle, Users } from 'lucide-react';

const CampaignManager = () => {
    const [campaigns, setCampaigns] = useState([]);
    const [loading, setLoading] = useState(true);
    const [editingCampaign, setEditingCampaign] = useState(null);

    const initialFormState = {
        name: '',
        platform: '',
        budget: '',
        startDate: '',
        endDate: '',
        leadsGenerated: '', // Add new field to form state
    };
    const [formData, setFormData] = useState(initialFormState);

    const fetchCampaigns = async () => {
        setLoading(true);
        try {
            const fetchedCampaigns = await getCampaigns();
            setCampaigns(fetchedCampaigns);
        } catch (error) {
            console.error("Error fetching campaigns:", error);
            alert("Could not load campaign data.");
        }
        setLoading(false);
    };

    useEffect(() => {
        fetchCampaigns();
    }, []);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleEditClick = (campaign) => {
        setEditingCampaign(campaign);
        setFormData({
            name: campaign.name,
            platform: campaign.platform,
            budget: campaign.budget,
            startDate: campaign.startDate?.toDate ? campaign.startDate.toDate().toISOString().split('T')[0] : '',
            endDate: campaign.endDate?.toDate ? campaign.endDate.toDate().toISOString().split('T')[0] : '',
            leadsGenerated: campaign.leadsGenerated || 0, // Set leads from campaign data
        });
    };

    const handleCancelEdit = () => {
        setEditingCampaign(null);
        setFormData(initialFormState);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.name || !formData.platform || !formData.budget || !formData.startDate) {
            alert("Please fill in name, platform, budget, and start date.");
            return;
        }

        const dataToSave = {
            name: formData.name,
            platform: formData.platform,
            budget: parseFloat(formData.budget),
            startDate: new Date(formData.startDate),
            endDate: formData.endDate ? new Date(formData.endDate) : null,
            leadsGenerated: Number(formData.leadsGenerated) || 0, // Ensure leads are saved as a number
        };

        try {
            if (editingCampaign) {
                await updateCampaign(editingCampaign.id, dataToSave);
                alert("Campaign updated successfully!");
            } else {
                await addCampaign(dataToSave);
                alert("Campaign added successfully!");
            }
            handleCancelEdit();
            fetchCampaigns();
        } catch (error) {
            console.error("Error saving campaign:", error);
            alert("Failed to save campaign.");
        }
    };

    const handleDeleteClick = async (campaignId) => {
        if (window.confirm("Are you sure you want to delete this campaign?")) {
            try {
                await deleteCampaign(campaignId);
                alert("Campaign deleted.");
                fetchCampaigns();
            } catch (error) {
                console.error("Error deleting campaign:", error);
                alert("Failed to delete campaign.");
            }
        }
    };

    const formatDate = (timestamp) => {
        if (!timestamp?.toDate) return 'N/A';
        return timestamp.toDate().toLocaleDateString('en-ZA');
    };

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Manage Marketing Campaigns</h3>
            
            <form onSubmit={handleSubmit} className="p-4 mb-6 bg-gray-900/50 rounded-lg space-y-4">
                <h4 className="text-lg font-semibold text-white">{editingCampaign ? 'Edit Campaign' : 'Add New Campaign'}</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <Input label="Campaign Name" name="name" value={formData.name} onChange={handleInputChange} placeholder="e.g., Winter Sale 2025" />
                    <Input label="Platform" name="platform" value={formData.platform} onChange={handleInputChange} placeholder="e.g., Facebook, Google Ads" />
                    <Input label="Budget (R)" name="budget" type="number" value={formData.budget} onChange={handleInputChange} placeholder="e.g., 5000" />
                    <Input label="Leads Generated" name="leadsGenerated" type="number" value={formData.leadsGenerated} onChange={handleInputChange} placeholder="e.g., 25" />
                    <Input label="Start Date" name="startDate" type="date" value={formData.startDate} onChange={handleInputChange} />
                    <Input label="End Date (Optional)" name="endDate" type="date" value={formData.endDate} onChange={handleInputChange} />
                </div>
                <div className="flex justify-end gap-2">
                    {editingCampaign && <Button type="button" variant="secondary" onClick={handleCancelEdit}>Cancel</Button>}
                    <Button type="submit" variant="primary">
                        {editingCampaign ? <><Edit size={16} className="mr-2"/>Save Changes</> : <><PlusCircle size={16} className="mr-2"/>Add Campaign</>}
                    </Button>
                </div>
            </form>

            <div className="space-y-3">
                {loading ? <p className="text-gray-400">Loading...</p> :
                    campaigns.map(campaign => (
                        <div key={campaign.id} className="bg-gray-700 p-4 rounded-lg flex flex-wrap items-center justify-between gap-4">
                            <div>
                                <p className="font-bold text-white">{campaign.name}</p>
                                <p className="text-sm text-gray-400">{campaign.platform}</p>
                            </div>
                            <div className="flex items-center gap-6">
                                <div className="text-center">
                                    <p className="text-xs text-gray-400">Leads</p>
                                    <p className="font-semibold text-blue-400">{campaign.leadsGenerated || 0}</p>
                                </div>
                                <div className="text-center">
                                    <p className="text-xs text-gray-400">Budget</p>
                                    <p className="font-semibold text-green-400">R{campaign.budget.toFixed(2)}</p>
                                </div>
                                <div className="text-center">
                                    <p className="text-xs text-gray-400">Date</p>
                                    <p className="text-sm text-gray-300">{formatDate(campaign.startDate)} - {formatDate(campaign.endDate)}</p>
                                </div>
                            </div>
                            <div className="flex gap-2">
                                <Button onClick={() => handleEditClick(campaign)} variant="secondary" size="sm" className="p-2"><Edit size={16}/></Button>
                                <Button onClick={() => handleDeleteClick(campaign.id)} variant="danger" size="sm" className="p-2"><Trash2 size={16}/></Button>
                            </div>
                        </div>
                    ))
                }
            </div>
        </div>
    );
};

export default CampaignManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\ComponentsManager.jsx
==================================================
// src/components/features/settings/ComponentsManager.jsx

import React, { useState, useEffect } from 'react';
import { getComponents, addComponent, deleteComponent, updateDocument, getSuppliers } from '../../../api/firestore';
import Button from '../../ui/Button';
import Input from '../../ui/Input';
import Dropdown from '../../ui/Dropdown';

const ComponentsManager = () => {
    const [components, setComponents] = useState([]);
    const [suppliers, setSuppliers] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [formData, setFormData] = useState({
        name: '',
        itemCode: '',
        supplierId: '',
        price: '',
        unit: 'Each',
        currentStock: '',
        reorderLevel: '',
        standardStockLevel: '',
        // NEW: Add new fields to the form state
        countMethod: 'Quantity', // Default to Quantity
        containerWeight: '',
        unitWeight: '',
    });

    const fetchData = async () => {
        setIsLoading(true);
        const [fetchedComponents, fetchedSuppliers] = await Promise.all([getComponents(), getSuppliers()]);
        setComponents(fetchedComponents);
        setSuppliers(fetchedSuppliers);
        setIsLoading(false);
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.name || !formData.supplierId) {
            alert("Please provide a name and select a supplier.");
            return;
        }
        try {
            await addComponent(formData);
            alert('Component added successfully!');
            setFormData({
                name: '', itemCode: '', supplierId: '', price: '', unit: 'Each',
                currentStock: '', reorderLevel: '', standardStockLevel: '',
                countMethod: 'Quantity', containerWeight: '', unitWeight: '' // Reset new fields
            });
            fetchData();
        } catch (error) {
            alert('Failed to add component.');
            console.error(error);
        }
    };
    
    const handleUpdate = async (id, updatedData) => {
        try {
            await updateDocument('components', id, updatedData);
            fetchData(); // Refresh data
        } catch (error) {
            console.error("Failed to update component: ", error);
        }
    };


    const handleDelete = async (id) => {
        if (window.confirm("Are you sure you want to delete this component?")) {
            try {
                await deleteComponent(id);
                alert('Component deleted successfully!');
                fetchData();
            } catch (error) {
                alert('Failed to delete component.');
                console.error(error);
            }
        }
    };

    if (isLoading) return <p>Loading components...</p>;

    return (
        <div className="space-y-6">
            <form onSubmit={handleSubmit} className="bg-gray-800 p-4 rounded-lg space-y-4">
                <h3 className="text-lg font-bold text-white">Add New Component</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <Input name="name" label="Component Name" value={formData.name} onChange={handleInputChange} placeholder="e.g., Mounting Bracket" />
                    <Input name="itemCode" label="Item Code" value={formData.itemCode} onChange={handleInputChange} placeholder="e.g., MB-001" />
                    <Dropdown name="supplierId" label="Supplier" value={formData.supplierId} onChange={handleInputChange} options={suppliers} placeholder="Select Supplier" />
                    <Input name="price" label="Price" type="number" value={formData.price} onChange={handleInputChange} placeholder="e.g., 150.00" />
                    <Input name="unit" label="Unit of Measure" value={formData.unit} onChange={handleInputChange} placeholder="e.g., Each, Box" />
                    <Input name="currentStock" label="In Stock" type="number" value={formData.currentStock} onChange={handleInputChange} placeholder="e.g., 100" />
                    <Input name="reorderLevel" label="Re-order At" type="number" value={formData.reorderLevel} onChange={handleInputChange} placeholder="e.g., 20" />
                    <Input name="standardStockLevel" label="Standard Stock Level" type="number" value={formData.standardStockLevel} onChange={handleInputChange} placeholder="e.g., 120" />
                    
                    {/* NEW: Fields for Count Method */}
                    <Dropdown 
                        name="countMethod" 
                        label="Count Method" 
                        value={formData.countMethod} 
                        onChange={handleInputChange}
                    >
                        <option value="Quantity">Quantity</option>
                        <option value="Weight">Weight</option>
                    </Dropdown>
                    
                    {/* NEW: Conditional fields for Weight */}
                    {formData.countMethod === 'Weight' && (
                        <>
                            <Input name="containerWeight" label="Container Weight (g)" type="number" value={formData.containerWeight} onChange={handleInputChange} placeholder="e.g., 50" />
                            <Input name="unitWeight" label="Weight per Unit (g)" type="number" value={formData.unitWeight} onChange={handleInputChange} placeholder="e.g., 2.5" />
                        </>
                    )}
                </div>
                <Button type="submit" variant="primary">Add Component</Button>
            </form>

            <div className="bg-gray-800 p-4 rounded-lg">
                <h3 className="text-lg font-bold text-white mb-4">Existing Components</h3>
                <div className="overflow-x-auto">
                    <table className="w-full text-sm text-left">
                        <thead className="text-xs text-gray-400 uppercase bg-gray-700">
                            <tr>
                                <th className="p-2">Name</th>
                                <th className="p-2">Code</th>
                                <th className="p-2">In Stock</th>
                                <th className="p-2">Count Method</th>
                                <th className="p-2">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {components.map(comp => (
                                <EditableComponentRow 
                                    key={comp.id} 
                                    component={comp} 
                                    suppliers={suppliers}
                                    onUpdate={handleUpdate}
                                    onDelete={handleDelete} 
                                />
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};


// A new sub-component to make the rows editable
const EditableComponentRow = ({ component, suppliers, onUpdate, onDelete }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [editData, setEditData] = useState(component);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setEditData(prev => ({ ...prev, [name]: value }));
    };

    const handleSave = () => {
        onUpdate(component.id, editData);
        setIsEditing(false);
    };

    if (!isEditing) {
        return (
            <tr className="border-b border-gray-700">
                <td className="p-2 text-white">{component.name}</td>
                <td className="p-2">{component.itemCode}</td>
                <td className="p-2">{component.currentStock}</td>
                <td className="p-2">{component.countMethod || 'Quantity'}</td>
                <td className="p-2 flex gap-2">
                    <Button onClick={() => setIsEditing(true)} size="sm">Edit</Button>
                    <Button onClick={() => onDelete(component.id)} variant="danger" size="sm">Delete</Button>
                </td>
            </tr>
        )
    }

    // Editing View
    return (
        <tr className="bg-gray-900">
            <td className="p-2"><Input name="name" value={editData.name} onChange={handleInputChange} /></td>
            <td className="p-2"><Input name="itemCode" value={editData.itemCode} onChange={handleInputChange} /></td>
            <td className="p-2"><Input name="currentStock" type="number" value={editData.currentStock} onChange={handleInputChange} /></td>
            <td className="p-2">
                <Dropdown name="countMethod" value={editData.countMethod} onChange={handleInputChange}>
                    <option value="Quantity">Quantity</option>
                    <option value="Weight">Weight</option>
                </Dropdown>
            </td>
            <td className="p-2 flex gap-2">
                <Button onClick={handleSave} variant="success" size="sm">Save</Button>
                <Button onClick={() => setIsEditing(false)} variant="secondary" size="sm">Cancel</Button>
            </td>
        </tr>
    );
}

export default ComponentsManager;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\DepartmentsManager.jsx
==================================================
import React, { useState, useEffect } from 'react';
import { getDepartments, addDepartment, deleteDepartment, updateDocument } from '../../../api/firestore'; // updateDocument imported
import Input from '../../ui/Input';
import Button from '../../ui/Button';

const DepartmentsManager = () => {
    const [departments, setDepartments] = useState([]);
    const [newDepartmentName, setNewDepartmentName] = useState('');
    const [loading, setLoading] = useState(true);
    const [editingDeptId, setEditingDeptId] = useState(null); // State to track which department is being edited

    const fetchDepartments = async () => {
        setLoading(true);
        const depts = await getDepartments(); // Fetches departments from Firestore 
        setDepartments(depts);
        setLoading(false);
    };

    useEffect(() => {
        fetchDepartments();
    }, []);

    const handleAddOrUpdate = async (e) => {
        e.preventDefault();
        if (!newDepartmentName.trim()) return;

        try {
            if (editingDeptId) {
                // If editingDeptId is set, update the existing department
                await updateDocument('departments', editingDeptId, { name: newDepartmentName }); // Uses updateDocument for generic update 
                alert("Department updated successfully!");
            } else {
                // Otherwise, add a new department
                await addDepartment(newDepartmentName); // Adds new department 
                alert("Department added successfully!");
            }
            setNewDepartmentName(''); // Clear input field
            setEditingDeptId(null); // Exit editing mode
            fetchDepartments(); // Refresh the list of departments
        } catch (error) {
            console.error("Error saving department:", error);
            alert(`Failed to ${editingDeptId ? 'update' : 'add'} department.`);
        }
    };

    const handleEdit = (dept) => {
        setNewDepartmentName(dept.name); // Pre-fill form with department's current name
        setEditingDeptId(dept.id); // Set the ID of the department being edited
    };

    const handleCancelEdit = () => {
        setNewDepartmentName(''); // Clear input field
        setEditingDeptId(null); // Exit editing mode
    };

    const handleDelete = async (id) => {
        if (window.confirm("Are you sure you want to delete this department?")) {
            try {
                await deleteDepartment(id); // Deletes department 
                alert("Department deleted successfully!");
                fetchDepartments(); // Refresh the list
            } catch (error) {
                console.error("Error deleting department:", error);
                alert("Failed to delete department.");
            }
        }
    };

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Manage Departments</h3>
            <form onSubmit={handleAddOrUpdate} className="flex items-center space-x-4 mb-6">
                <Input
                    name="departmentName"
                    value={newDepartmentName}
                    onChange={(e) => setNewDepartmentName(e.target.value)}
                    placeholder={editingDeptId ? "Edit department name..." : "New department name..."} // Dynamic placeholder
                    className="flex-grow"
                />
                {editingDeptId && ( // Show Cancel button only when in editing mode
                    <Button type="button" variant="secondary" onClick={handleCancelEdit}>
                        Cancel
                    </Button>
                )}
                <Button type="submit" variant="primary">
                    {editingDeptId ? "Update Department" : "Add Department"} {/* Dynamic button text */}
                </Button>
            </form>
            <div className="space-y-3">
                {loading ? (
                    <p>Loading departments...</p>
                ) : (
                    (departments || []).map(dept => (
                        <div key={dept.id} className="flex items-center justify-between bg-gray-700 p-3 rounded-lg">
                            <p className="text-gray-200">{dept.name}</p>
                            <div className="flex space-x-2"> {/* Container for action buttons */}
                                <Button onClick={() => handleEdit(dept)} variant="secondary" className="py-1 px-3 text-xs">
                                    Edit
                                </Button>
                                <Button onClick={() => handleDelete(dept.id)} variant="danger" className="py-1 px-3 text-xs">
                                    Delete
                                </Button>
                            </div>
                        </div>
                    ))
                )}
            </div>
        </div>
    );
};

export default DepartmentsManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\EmployeeSkillsModal.jsx
==================================================
// FILE: src/components/features/settings/EmployeeSkillsModal.jsx

import React, { useState, useEffect } from 'react';
import { getSkills, getEmployeeSkills, updateEmployeeSkillsAndLogHistory, getSkillHistoryForEmployee } from '../../../api/firestore'; // Added getSkillHistoryForEmployee to refresh local view
import Button from '../../ui/Button';
import Input from '../../ui/Input'; // Import Input component for number slider/input
import { X } from 'lucide-react';

const EmployeeSkillsModal = ({ employee, onClose }) => {
    const [allSkills, setAllSkills] = useState([]);
    const [employeeSkills, setEmployeeSkills] = useState({}); // Stores { skillId: proficiency_number }
    const [skillHistory, setSkillHistory] = useState([]); // To display history within modal
    const [loading, setLoading] = useState(true);

    // Map numerical proficiency to descriptive labels for UI
    const getProficiencyLabel = (level) => {
        switch (level) {
            case 0: return 'Not Acquired';
            case 1: return 'Beginner';
            case 2: return 'Basic'; // Added 'Basic'
            case 3: return 'Intermediate';
            case 4: return 'Advanced'; // Added 'Advanced'
            case 5: return 'Expert';
            default: return 'N/A';
        }
    };

    const fetchAllData = async () => {
        setLoading(true);
        try {
            const [fetchedSkills, currentSkills, fetchedHistory] = await Promise.all([
                getSkills(),
                getEmployeeSkills(employee.id),
                getSkillHistoryForEmployee(employee.id) // Fetch history for display
            ]);
            setAllSkills(fetchedSkills);
            setEmployeeSkills(currentSkills || {});
            setSkillHistory(fetchedHistory.sort((a,b) => b.assessmentDate.toDate() - a.assessmentDate.toDate())); // Sort history by date
        } catch (error) {
            console.error("Error fetching skills data:", error);
            alert("Failed to load skills data for this employee.");
        }
        setLoading(false);
    };

    useEffect(() => {
        if (employee) {
            fetchAllData();
        }
    }, [employee]);

    // Handle numerical proficiency change from slider/input
    const handleProficiencyChange = (skillId, newProficiencyValue) => {
        setEmployeeSkills(prevSkills => {
            const updatedSkills = { ...prevSkills };
            const numericValue = Number(newProficiencyValue); // Ensure it's a number

            if (numericValue === 0) {
                delete updatedSkills[skillId]; // Remove skill if proficiency is 0 (Not Acquired)
            } else {
                updatedSkills[skillId] = numericValue;
            }
            return updatedSkills;
        });
    };

    const handleSaveChanges = async () => {
        try {
            await updateEmployeeSkillsAndLogHistory(employee, employeeSkills, allSkills);
            alert(`Successfully updated skills for ${employee.name}.`);
            onClose(); // Close modal on success
        } catch (error) {
            console.error("Error saving employee skills:", error);
            alert("Failed to save skills. Please try again.");
        }
    };

    return (
        <div
            className="fixed inset-0 bg-black/60 z-50 flex justify-center items-center"
            onClick={onClose}
        >
            <div
                className="bg-gray-800 w-full max-w-lg rounded-xl shadow-lg border border-gray-700 flex flex-col"
                onClick={e => e.stopPropagation()}
            >
                <div className="flex justify-between items-center p-4 border-b border-gray-600">
                    <h3 className="text-xl font-bold text-white">Manage Skills for {employee.name}</h3>
                    <Button onClick={onClose} variant="icon" className="text-gray-400 hover:text-white">
                        <X size={24} />
                    </Button>
                </div>

                <div className="p-6 space-y-6 overflow-y-auto max-h-[60vh]">
                    {loading ? (
                        <p className="text-gray-300">Loading skills...</p>
                    ) : (
                        <>
                            {/* Skill Rating Section */}
                            <div>
                                <h4 className="text-lg font-semibold text-white mb-3">Current Skill Ratings (0-5)</h4>
                                <p className="text-sm text-gray-400 mb-4">
                                    Rate proficiency from 0 (Not Acquired) to 5 (Expert).
                                    Skills rated 0 will not be saved.
                                </p>
                                <div className="space-y-4">
                                    {allSkills.map(skill => (
                                        <div key={skill.id} className="grid grid-cols-2 items-center gap-4">
                                            <label className="text-gray-200" htmlFor={`skill-${skill.id}`}>{skill.name}</label>
                                            <div>
                                                <input
                                                    id={`skill-${skill.id}`}
                                                    type="range"
                                                    min="0"
                                                    max="5"
                                                    step="1"
                                                    value={employeeSkills[skill.id] || 0}
                                                    onChange={(e) => handleProficiencyChange(skill.id, e.target.value)}
                                                    className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer range-lg accent-blue-600"
                                                />
                                                <p className="text-center text-sm text-gray-400 mt-1">
                                                    {getProficiencyLabel(employeeSkills[skill.id] || 0)}
                                                </p>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>

                            {/* Skill History Section */}
                            <div className="mt-6 border-t border-gray-700 pt-6">
                                <h4 className="text-lg font-semibold text-white mb-3">Skill Assessment History</h4>
                                {skillHistory.length > 0 ? (
                                    <ul className="space-y-2">
                                        {skillHistory.map(record => (
                                            <li key={record.id} className="bg-gray-700/50 p-3 rounded-lg text-sm flex justify-between items-center">
                                                <div>
                                                    <p className="font-semibold text-white">{record.skillName}: {getProficiencyLabel(record.proficiency)}</p>
                                                    <p className="text-gray-400 text-xs">
                                                        Assessed: {record.assessmentDate ? new Date(record.assessmentDate.toDate()).toLocaleDateString('en-ZA') : 'N/A'}
                                                    </p>
                                                </div>
                                            </li>
                                        ))}
                                    </ul>
                                ) : (
                                    <p className="text-gray-400 text-sm">No skill assessment history for this employee.</p>
                                )}
                            </div>
                        </>
                    )}
                </div>

                <div className="flex justify-end items-center p-4 border-t border-gray-600 bg-gray-800/50 rounded-b-xl">
                    <Button onClick={onClose} variant="secondary" className="mr-2">Cancel</Button>
                    <Button onClick={handleSaveChanges} variant="primary">Save Changes</Button>
                </div>
            </div>
        </div>
    );
};

export default EmployeeSkillsModal;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\EmployeesManager.jsx
==================================================
// src/components/features/settings/EmployeesManager.jsx (UPGRADED)

import React, { useState, useEffect } from 'react';
import { getEmployees, addEmployee, deleteEmployee, getDepartments, updateDocument } from '../../../api/firestore';
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import Dropdown from '../../ui/Dropdown';
import { Award } from 'lucide-react';
import EmployeeSkillsModal from './EmployeeSkillsModal';

const EmployeesManager = () => {
    const [employees, setEmployees] = useState([]);
    const [departments, setDepartments] = useState([]);
    const [loading, setLoading] = useState(true);
    const [editingEmployeeId, setEditingEmployeeId] = useState(null);
    const [isSkillsModalOpen, setIsSkillsModalOpen] = useState(false);
    const [selectedEmployee, setSelectedEmployee] = useState(null);

    const initialFormState = {
        name: '',
        departmentId: '',
        employeeType: 'permanent', // 'permanent' or 'subcontractor'
        hourlyRate: '', // For permanent staff
        paymentModel: 'per_kg', // 'per_kg', 'per_hour', 'per_product'
        rate: '', // R40 (per kg), R90 (per hour), etc.
    };
    const [newEmployee, setNewEmployee] = useState(initialFormState);

    const fetchData = async () => {
        setLoading(true);
        const [fetchedEmployees, fetchedDepartments] = await Promise.all([
            getEmployees(),
            getDepartments()
        ]);
        setEmployees(fetchedEmployees);
        setDepartments(fetchedDepartments);
        setLoading(false);
    };

    useEffect(() => { fetchData(); }, []);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setNewEmployee(prev => ({ ...prev, [name]: value }));
    };

    const handleAddOrUpdate = async (e) => {
        e.preventDefault();
        if (!newEmployee.name.trim() || !newEmployee.departmentId) {
            alert("Please enter a name and select a department.");
            return;
        }

        try {
            const dataToSave = { 
                name: newEmployee.name,
                departmentId: newEmployee.departmentId,
                employeeType: newEmployee.employeeType,
                // Save data based on type
                hourlyRate: newEmployee.employeeType === 'permanent' ? (Number(newEmployee.hourlyRate) || 0) : 0,
                paymentModel: newEmployee.employeeType === 'subcontractor' ? newEmployee.paymentModel : null,
                rate: newEmployee.employeeType === 'subcontractor' ? (Number(newEmployee.rate) || 0) : 0,
            };

            if (editingEmployeeId) {
                await updateDocument('employees', editingEmployeeId, dataToSave);
                alert("Employee updated successfully!");
            } else {
                await addEmployee(dataToSave);
                alert("Employee added successfully!");
            }
            setNewEmployee(initialFormState);
            setEditingEmployeeId(null);
            fetchData();
        } catch (error) {
            console.error("Error saving employee:", error);
            alert(`Failed to ${editingEmployeeId ? 'update' : 'add'} employee.`);
        }
    };

    const handleEdit = (employee) => {
        setEditingEmployeeId(employee.id);
        setNewEmployee({
            name: employee.name || '',
            departmentId: employee.departmentId || '',
            employeeType: employee.employeeType || 'permanent',
            hourlyRate: employee.hourlyRate || '',
            paymentModel: employee.paymentModel || 'per_kg',
            rate: employee.rate || '',
        });
    };

    const handleCancelEdit = () => {
        setNewEmployee(initialFormState);
        setEditingEmployeeId(null);
    };

    const handleDelete = async (id) => {
        if (window.confirm("Are you sure?")) {
            await deleteEmployee(id);
            fetchData();
        }
    };

    const handleManageSkillsClick = (employee) => {
        setSelectedEmployee(employee);
        setIsSkillsModalOpen(true);
    };

    const getDepartmentName = (deptId) => departments.find(d => d.id === deptId)?.name || 'Unknown';

    return (
        <div className="bg-gray-800/50 p-6 rounded-lg border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Manage Employees & Subcontractors</h3>
            <form onSubmit={handleAddOrUpdate} className="space-y-4 items-end mb-6 p-4 bg-gray-900/50 rounded-lg">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <Input label="Name" name="name" value={newEmployee.name} onChange={handleInputChange} placeholder={editingEmployeeId ? "Edit name..." : "New name..."} />
                    <Dropdown label="Department" name="departmentId" value={newEmployee.departmentId} onChange={handleInputChange} options={departments || []} placeholder="Select department..." />
                    <Dropdown label="Employee Type" name="employeeType" value={newEmployee.employeeType} onChange={handleInputChange} options={[{id: 'permanent', name: 'Permanent'}, {id: 'subcontractor', name: 'Subcontractor'}]} />
                </div>
                
                {newEmployee.employeeType === 'permanent' && (
                    <div className="animate-fade-in">
                        <Input label="Hourly Rate (R)" name="hourlyRate" type="number" value={newEmployee.hourlyRate} onChange={handleInputChange} placeholder="e.g., 150.50" />
                    </div>
                )}

                {newEmployee.employeeType === 'subcontractor' && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 animate-fade-in">
                        <Dropdown label="Payment Model" name="paymentModel" value={newEmployee.paymentModel} onChange={handleInputChange} options={[{id: 'per_kg', name: 'Per Kilogram (kg)'}, {id: 'per_hour', name: 'Per Hour'}, {id: 'per_product', name: 'Per Product'}]} />
                        <Input label="Rate (R)" name="rate" type="number" value={newEmployee.rate} onChange={handleInputChange} placeholder="e.g., 40 for per_kg" />
                    </div>
                )}

                <div className="flex items-center gap-2 pt-4">
                    {editingEmployeeId && (
                        <Button type="button" variant="secondary" onClick={handleCancelEdit}>Cancel</Button>
                    )}
                    <Button type="submit" variant="primary" className="flex-grow">
                        {editingEmployeeId ? "Update" : "Add"}
                    </Button>
                </div>
            </form>

            <div className="space-y-3">
                {loading ? <p className="text-gray-400">Loading...</p> : (employees || []).map(emp => (
                    <div key={emp.id} className="flex items-center justify-between bg-gray-900/50 p-3 rounded-md">
                        <div>
                            <p className="text-gray-200">
                                {emp.name} - <span className="text-gray-400 text-sm">{getDepartmentName(emp.departmentId)}</span>
                                {emp.employeeType === 'permanent' && <span className="text-blue-400 font-mono text-sm ml-4">R{(emp.hourlyRate || 0).toFixed(2)}/hr</span>}
                                {emp.employeeType === 'subcontractor' && <span className="text-purple-400 font-mono text-sm ml-4">Subcontractor ({emp.paymentModel})</span>}
                            </p>
                        </div>
                        <div className="flex items-center gap-2">
                            <Button onClick={() => handleManageSkillsClick(emp)} variant="secondary" size="sm"><Award size={16} className="mr-1" /> Manage Skills</Button>
                            <Button onClick={() => handleEdit(emp)} variant="secondary" size="sm">Edit</Button>
                            <Button onClick={() => handleDelete(emp.id)} variant="danger" size="sm">Delete</Button>
                        </div>
                    </div>
                ))}
            </div>

            {isSkillsModalOpen && selectedEmployee && (
                <EmployeeSkillsModal employee={selectedEmployee} onClose={() => setIsSkillsModalOpen(false)} />
            )}
        </div>
    );
};

export default EmployeesManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\FinancialSettings.jsx
==================================================
// src/components/features/settings/FinancialSettings.jsx (UPDATED with Edit Functionality)
import React, { useState, useEffect } from 'react';
import { collection, doc, setDoc, onSnapshot, deleteDoc } from 'firebase/firestore';
import { db } from '../../../api/firebase';
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import { PlusCircle, Trash2, Edit } from 'lucide-react';

const FinancialSettings = () => {
    const [historicalData, setHistoricalData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [editingId, setEditingId] = useState(null); // State to track which item is being edited
    const [newData, setNewData] = useState({ year: '', month: '', totalSales: '', totalCOGS: '' });

    useEffect(() => {
        const historicalSalesCol = collection(db, 'historicalSales');
        const unsubscribe = onSnapshot(historicalSalesCol, (snapshot) => {
            const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            data.sort((a, b) => {
                if (a.year !== b.year) return b.year - a.year;
                return b.month - a.month;
            });
            setHistoricalData(data);
            setLoading(false);
        });
        return () => unsubscribe();
    }, []);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setNewData(prev => ({ ...prev, [name]: value }));
    };

    const handleSaveData = async (e) => {
        e.preventDefault();
        const { year, month, totalSales, totalCOGS } = newData;

        if (!year || !month || !totalSales || !totalCOGS || month < 1 || month > 12) {
            alert("Please enter valid data for all fields (Month must be 1-12).");
            return;
        }

        // If editing, use the existing ID. If adding, create a new one.
        const docId = editingId || `${year}-${String(month).padStart(2, '0')}`;
        const sales = parseFloat(totalSales);
        const cogs = parseFloat(totalCOGS);

        const dataToSave = {
            year: parseInt(year, 10),
            month: parseInt(month, 10),
            totalSales: sales,
            totalCOGS: cogs,
            grossProfit: sales - cogs,
        };

        try {
            const docRef = doc(db, 'historicalSales', docId);
            await setDoc(docRef, dataToSave, { merge: true });
            alert(`Financial data for ${docId} has been saved.`);
            handleCancelEdit(); // Reset form and editing state
        } catch (error) {
            console.error("Error saving historical data:", error);
            alert("Failed to save data.");
        }
    };
    
    // Function to handle clicking the "Edit" button
    const handleEditClick = (data) => {
        setEditingId(data.id);
        setNewData({
            year: data.year,
            month: data.month,
            totalSales: data.totalSales,
            totalCOGS: data.totalCOGS,
        });
    };

    // Function to cancel the edit
    const handleCancelEdit = () => {
        setEditingId(null);
        setNewData({ year: '', month: '', totalSales: '', totalCOGS: '' });
    };

    const handleDelete = async (docId) => {
        if (window.confirm(`Are you sure you want to delete the financial data for ${docId}?`)) {
            try {
                await deleteDoc(doc(db, 'historicalSales', docId));
                alert('Data deleted successfully.');
            } catch (error) {
                console.error("Error deleting historical data:", error);
                alert("Failed to delete data.");
            }
        }
    };

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Manage Historical Financial Data</h3>
            <p className="text-sm text-gray-400 mb-6">
                Enter your actual historical Sales and Cost of Goods Sold (COGS) for each month. This provides the most accurate data for all financial planning tools.
            </p>
            
            <form onSubmit={handleSaveData} className="grid grid-cols-1 md:grid-cols-5 gap-4 items-end mb-6 p-4 bg-gray-900/50 rounded-lg">
                <Input label="Year" name="year" type="number" value={newData.year} onChange={handleInputChange} placeholder="e.g., 2023" disabled={!!editingId} />
                <Input label="Month" name="month" type="number" value={newData.month} onChange={handleInputChange} placeholder="e.g., 1 for Jan" disabled={!!editingId} />
                <Input label="Total Sales (R)" name="totalSales" type="number" value={newData.totalSales} onChange={handleInputChange} placeholder="e.g., 300000" />
                <Input label="Total COGS (R)" name="totalCOGS" type="number" value={newData.totalCOGS} onChange={handleInputChange} placeholder="e.g., 90000" />
                <div className="flex gap-2">
                    {editingId && <Button type="button" variant="secondary" onClick={handleCancelEdit}>Cancel</Button>}
                    <Button type="submit" variant="primary" className="flex-grow">
                        {editingId ? 'Update' : <><PlusCircle size={16} className="mr-2"/> Save</>}
                    </Button>
                </div>
            </form>

            <div className="space-y-3 max-h-96 overflow-y-auto pr-2">
                {loading ? <p>Loading data...</p> : (
                    historicalData.map(data => (
                        <div key={data.id} className="grid grid-cols-5 gap-4 items-center bg-gray-700 p-3 rounded-lg text-sm">
                            <p className="font-bold text-white">{data.id}</p>
                            <p className="text-gray-300">Sales: <span className="font-mono">R{data.totalSales.toFixed(2)}</span></p>
                            <p className="text-gray-300">COGS: <span className="font-mono">R{data.totalCOGS.toFixed(2)}</span></p>
                            <div className="col-span-2 flex justify-end gap-2">
                                <Button onClick={() => handleEditClick(data)} variant="secondary" size="sm" className="p-2">
                                    <Edit size={16}/>
                                </Button>
                                <Button onClick={() => handleDelete(data.id)} variant="danger" size="sm" className="p-2">
                                    <Trash2 size={16}/>
                                </Button>
                            </div>
                        </div>
                    ))
                )}
            </div>
        </div>
    );
};

export default FinancialSettings;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\InventoryManager.jsx
==================================================
// src/components/features/settings/InventoryManager.jsx (Updated for Dynamic Supplier Pricing)

import React, { useState, useEffect, useMemo } from 'react';
import { getComponents, addComponent, deleteComponent, getRawMaterials, addRawMaterial, deleteRawMaterial, getWorkshopSupplies, addWorkshopSupply, deleteWorkshopSupply, getSuppliers, getSkills, updateDocument } from '../../../api/firestore';
import { useInventoryManager } from '../../../hooks/useInventoryManager';
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import Dropdown from '../../ui/Dropdown';
import { Search, Scale, Hash, Save, PlusCircle, Factory, Trash2, DollarSign } from 'lucide-react';

// New sub-component for managing supplier prices
const SupplierPricingManager = ({ manager, suppliers }) => {
    const [newPrice, setNewPrice] = useState('');
    const [newSupplierId, setNewSupplierId] = useState('');

    const handleAddClick = () => {
        manager.handleAddSupplierPrice(newSupplierId, newPrice);
        setNewPrice('');
        setNewSupplierId('');
    };
    
    // Filter out suppliers that are already linked to this item
    const availableSuppliers = useMemo(() => {
        const linkedSupplierIds = new Set(manager.supplierPrices.map(p => p.supplierId));
        return suppliers.filter(s => !linkedSupplierIds.has(s.id));
    }, [suppliers, manager.supplierPrices]);

    return (
        <div className="border-t border-gray-700 pt-4 mt-4">
            <h4 className="text-lg font-semibold text-white mb-3">Supplier Pricing for "{manager.newItem.name}"</h4>
            <div className="space-y-3 p-4 bg-gray-800 rounded-lg border border-gray-700">
                {/* List of existing prices */}
                <div className="space-y-2">
                    {manager.supplierPrices.map(priceLink => (
                        <div key={priceLink.id} className="flex items-center justify-between bg-gray-700 p-2 rounded-md">
                            <span className="text-gray-200">{priceLink.supplierName}</span>
                            <div className="flex items-center gap-3">
                                <span className="font-mono text-green-400">R {priceLink.price.toFixed(2)}</span>
                                <Button onClick={() => manager.handleDeleteSupplierPrice(priceLink.id)} variant="danger" size="sm" className="p-1 h-7 w-7"><Trash2 size={14} /></Button>
                            </div>
                        </div>
                    ))}
                    {manager.supplierPrices.length === 0 && <p className="text-xs text-gray-500 text-center">No suppliers linked yet.</p>}
                </div>
                {/* Form to add a new price */}
                <div className="flex items-end gap-2 border-t border-gray-600 pt-3">
                    <div className="flex-grow">
                        <Dropdown label="Add Supplier" options={availableSuppliers} value={newSupplierId} onChange={e => setNewSupplierId(e.target.value)} placeholder="Select supplier..." />
                    </div>
                    <div className="w-32">
                        <Input label="Price (R)" type="number" step="0.01" value={newPrice} onChange={e => setNewPrice(e.target.value)} placeholder="e.g., 15.50" />
                    </div>
                    <Button onClick={handleAddClick} variant="secondary"><PlusCircle size={16} className="mr-2"/>Add Price</Button>
                </div>
            </div>
        </div>
    );
};


const StockLevelIndicator = ({ currentStock, reorderLevel, standardStockLevel }) => {
    const stock = Number(currentStock);
    const reorder = Number(reorderLevel);
    const standard = Number(standardStockLevel);
    if (isNaN(stock) || isNaN(reorder) || isNaN(standard) || standard <= reorder) return <div className="text-xs text-gray-500 italic">Not tracked</div>;
    const isLowStock = stock < reorder;
    const range = standard - reorder;
    const stockInRange = stock - reorder;
    const percentage = Math.max(0, Math.min((stockInRange / range) * 100, 100));
    return (
        <div className="w-full">
            <div className="flex justify-between text-xs mb-1">
                <span className="font-semibold text-gray-300">{stock} / {standard}</span>
                <span className={`font-bold ${isLowStock ? 'text-red-400' : 'text-green-400'}`}>{isLowStock ? `Low (Reorder @ ${reorder})` : 'In Stock'}</span>
            </div>
            <div className="w-full bg-gray-600 rounded-full h-2"><div className={`h-2 rounded-full ${isLowStock ? 'bg-red-500' : 'bg-green-500'}`} style={{ width: `${percentage}%` }}></div></div>
        </div>
    );
};

const InventoryManager = () => {
  const [suppliers, setSuppliers] = useState([]);
  const [allSkills, setAllSkills] = useState([]);
  const [category, setCategory] = useState('components');

  const getProficiencyLabel = (level) => {
      switch (level) {
          case 0: return 'Not Applicable / No Minimum';
          case 1: return 'Beginner (1)';
          case 2: return 'Basic (2)';
          case 3: return 'Intermediate (3)';
          case 4: return 'Advanced (4)';
          case 5: return 'Expert (5)';
          default: return 'N/A';
      }
  };

  useEffect(() => {
    const fetchData = async () => {
      const [fetchedSuppliers, fetchedSkills] = await Promise.all([getSuppliers(), getSkills()]);
      setSuppliers(fetchedSuppliers);
      setAllSkills(fetchedSkills);
    };
    fetchData();
  }, []);

  const apiMap = useMemo(() => ({
    components: { get: getComponents, add: addComponent, update: (id, data) => updateDocument('components', id, data), delete: deleteComponent, categoryName: 'Component' },
    rawMaterials: { get: getRawMaterials, add: addRawMaterial, update: (id, data) => updateDocument('rawMaterials', id, data), delete: deleteRawMaterial, categoryName: 'Raw Material' },
    workshopSupplies: { get: getWorkshopSupplies, add: addWorkshopSupply, update: (id, data) => updateDocument('workshopSupplies', id, data), delete: deleteWorkshopSupply, categoryName: 'Workshop Supply' },
  }), []);

  const manager = useInventoryManager(apiMap[category], suppliers, allSkills);

  const categoryInfo = {
    components: { desc: 'Discrete parts that go into the final product (e.g., bolts, screws, brackets).', placeholder: 'e.g., 8mm Bolt' },
    rawMaterials: { desc: 'Bulk materials transformed into the product (e.g., resin, paint).', placeholder: 'e.g., Polyester Resin' },
    workshopSupplies: { desc: 'Items used during production but not part of the product (e.g., sandpaper).', placeholder: 'e.g., Sanding Disc' },
  };

  return (
    <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
      <div className="flex flex-wrap justify-between items-center mb-4 gap-4">
        <h3 className="text-xl font-bold text-white">Manage Inventory Items</h3>
        <select value={category} onChange={e => setCategory(e.target.value)} className="p-2 bg-gray-700 border border-gray-600 rounded-lg text-white">
          <option value="components">Components</option>
          <option value="rawMaterials">Raw Materials</option>
          <option value="workshopSupplies">Workshop Supplies</option>
        </select>
      </div>
      <p className="text-sm text-gray-400 mb-6">{categoryInfo[category].desc}</p>
      
      <form onSubmit={manager.handleSubmit} className="space-y-4 mb-6">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 items-end">
            <div className="lg:col-span-2"><Input label="Item Name" name="name" value={manager.newItem.name} onChange={manager.handleInputChange} placeholder={categoryInfo[category].placeholder} /></div>
            <Input label="Item Code" name="itemCode" value={manager.newItem.itemCode} onChange={manager.handleInputChange} placeholder="Optional" />
            <Input label="Default Price (fallback)" name="price" type="number" value={manager.newItem.price} onChange={manager.handleInputChange} placeholder="e.g., 12.50" />
            <Input label="Unit" name="unit" value={manager.newItem.unit} onChange={manager.handleInputChange} placeholder="e.g., each, kg" />
            <div className="grid grid-cols-3 gap-2">
                <Input label="In Stock" name="currentStock" type="number" value={manager.newItem.currentStock} onChange={manager.handleInputChange} placeholder="50" />
                <Input label="Reorder" name="reorderLevel" type="number" value={manager.newItem.reorderLevel} onChange={manager.handleInputChange} placeholder="20" />
                <Input label="Standard" name="standardStockLevel" type="number" value={manager.newItem.standardStockLevel} onChange={manager.handleInputChange} placeholder="200" />
            </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-4 items-end p-4 bg-gray-900/50 rounded-lg">
            <div className="lg:col-span-1">
                <label className="block text-sm font-medium text-gray-400 mb-1">Stock Take Method</label>
                <select name="stockTakeMethod" value={manager.newItem.stockTakeMethod || 'quantity'} onChange={manager.handleInputChange} className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white">
                    <option value="quantity">By Quantity</option>
                    <option value="weight">By Weight</option>
                </select>
            </div>
            
            {manager.newItem.stockTakeMethod === 'weight' && (
                <>
                    <Input label="Weight per Unit (g)" name="unitWeight" type="number" step="0.01" value={manager.newItem.unitWeight} onChange={manager.handleInputChange} placeholder="e.g., 2.5" />
                    <Input label="Container Tare Weight (g)" name="tareWeight" type="number" step="0.1" value={manager.newItem.tareWeight} onChange={manager.handleInputChange} placeholder="e.g., 36" />
                </>
            )}

            {category === 'rawMaterials' && (
                <div className="flex items-center justify-center h-full pt-6">
                    <label className="flex items-center gap-2 text-sm font-medium text-gray-300">
                        <input type="checkbox" name="requiresCatalyst" checked={manager.newItem.requiresCatalyst || false} onChange={manager.handleInputChange} className="h-5 w-5 rounded bg-gray-700 text-blue-600 focus:ring-blue-500" />
                        Requires Catalyst
                    </label>
                </div>
            )}
        </div>

        {/* --- DYNAMIC SUPPLIER PRICING UI --- */}
        {manager.editingItemId && (
            <SupplierPricingManager manager={manager} suppliers={suppliers} />
        )}

        {manager.newItem.name.trim() && (
            <div className="border-t border-gray-700 pt-4 mt-4">
                <h4 className="text-lg font-semibold text-white mb-3">Associated Skills for "{manager.newItem.name}"</h4>
                <p className="text-sm text-gray-400 mb-4">
                    Define skills typically required to work with or process this material/component.
                </p>
                <div className="space-y-4 max-h-60 overflow-y-auto pr-2">
                    {allSkills.map(skill => {
                        const currentAssociatedSkill = manager.newItem.associatedSkills?.find(s => s.skillId === skill.id);
                        const isIncluded = !!currentAssociatedSkill;

                        return (
                            <div key={skill.id} className="bg-gray-800 p-3 rounded-lg border border-gray-700">
                                <div className="flex items-center gap-3 mb-2">
                                    <input
                                        type="checkbox"
                                        checked={isIncluded}
                                        onChange={(e) => manager.handleToggleSkillAssociation(skill.id, e.target.checked)}
                                        className="h-4 w-4 rounded bg-gray-700 text-blue-600 focus:ring-blue-500"
                                    />
                                    <label className="font-bold text-white flex-grow">{skill.name}</label>
                                </div>

                                {isIncluded && (
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-400 mb-1">Default Min. Proficiency (0-5)</label>
                                            <input
                                                type="range"
                                                min="0"
                                                max="5"
                                                step="1"
                                                value={currentAssociatedSkill.defaultMinimumProficiency || 0}
                                                onChange={(e) => manager.handleAssociatedSkillChange(skill.id, 'defaultMinimumProficiency', e.target.value)}
                                                className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer range-lg accent-blue-600"
                                            />
                                            <p className="text-center text-sm text-gray-400 mt-1">
                                                {getProficiencyLabel(currentAssociatedSkill.defaultMinimumProficiency || 0)}
                                            </p>
                                        </div>
                                        <div>
                                            <Input
                                                label="Importance Weight (0-10)"
                                                type="number"
                                                min="0"
                                                max="10"
                                                value={currentAssociatedSkill.importanceWeight || 0}
                                                onChange={(e) => manager.handleAssociatedSkillChange(skill.id, 'importanceWeight', e.target.value)}
                                                placeholder="e.g., 5"
                                            />
                                            <p className="text-xs text-gray-500 mt-1">Higher value = more critical skill for this item.</p>
                                        </div>
                                    </div>
                                )}
                            </div>
                        );
                    })}
                </div>
            </div>
        )}

        <div className="flex justify-end gap-2">
          {manager.editingItemId && <Button type="button" variant="secondary" onClick={manager.cancelEdit}>Cancel</Button>}
          <Button type="submit" variant="primary">{manager.editingItemId ? <><Save size={16} className="mr-2"/> Update Item</> : <><PlusCircle size={16} className="mr-2"/> Add Item</>}</Button>
        </div>
      </form>

      <div className="flex flex-wrap gap-4 items-center mb-4 p-4 bg-gray-900/50 rounded-lg">
        <div className="relative flex-grow">
          <Input name="search-inventory" placeholder="Search by name..." value={manager.searchTerm} onChange={e => manager.setSearchTerm(e.target.value)} />
          <Search className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
        </div>
        <div>
          <select name="sort-inventory" value={manager.sortBy} onChange={e => manager.setSortBy(e.target.value)} className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white">
            <option value="name-asc">Sort by Name (A-Z)</option>
            <option value="name-desc">Sort by Name (Z-A)</option>
            <option value="supplier">Sort by Supplier</option>
            <option value="stock-low-high">Sort by Stock Level</option>
          </select>
        </div>
        <div className="flex items-center space-x-2 text-white">
          <input type="checkbox" id="lowStockToggle" checked={manager.showLowStock} onChange={e => manager.setShowLowStock(e.target.checked)} className="h-5 w-5 rounded bg-gray-700 text-blue-600 focus:ring-blue-500" />
          <label htmlFor="lowStockToggle" className="text-sm font-medium">Show only low stock</label>
        </div>
      </div>

      <div className="hidden md:grid grid-cols-5 gap-4 px-3 py-2 text-sm font-semibold text-gray-400 border-b border-gray-700">
        <div className="col-span-3">Name</div>
        <div className="col-span-2">Stock Level</div>
      </div>
      <div className="space-y-3 mt-2">
        {manager.loading ? <p className="text-center p-4">Loading...</p> : (manager.displayedItems || []).map(item => (
          <div key={item.id} className="grid grid-cols-1 md:grid-cols-5 gap-4 items-center bg-gray-700 p-3 rounded-lg">
            <p className="font-semibold col-span-3 flex items-center gap-2">
                {item.stockTakeMethod === 'weight' ? <Scale size={14} className="text-gray-400" title="Counted by Weight"/> : <Hash size={14} className="text-gray-400" title="Counted by Quantity"/>}
                {item.name}
                {item.requiresCatalyst && <span className="text-xs bg-blue-500/50 text-blue-300 px-2 py-0.5 rounded-full" title="Requires Catalyst">C</span>}
                {item.associatedSkills?.length > 0 && <Factory size={14} className="text-gray-400" title="Associated Skill(s)"/>}
            </p>
            <div className="col-span-2 flex items-center gap-4">
                <div className="flex-grow"><StockLevelIndicator {...item} /></div>
                <Button onClick={() => manager.handleEdit(item)} variant="secondary" className="py-1 px-3 text-xs">Manage</Button>
            </div>
          </div>
        ))}
         {(manager.displayedItems || []).length === 0 && !manager.loading && <p className="text-center p-4 text-gray-500">No items found.</p>}
      </div>
    </div>
  );
};

export default InventoryManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\MasterProductManager.jsx
==================================================
// src/components/features/settings/MasterProductManager.jsx (New File)

import React, { useState, useEffect, useMemo } from 'react';
import { 
    getMasterProducts, addMasterProduct, deleteMasterProduct, updateMasterProduct,
    getLinkedRecipesForMasterProduct, linkRecipeToMasterProduct, unlinkRecipeFromMasterProduct,
    getParts, getDepartments 
} from '../../../api/firestore';
import Button from '../../ui/Button';
import Input from '../../ui/Input';
import Dropdown from '../../ui/Dropdown';
import { Trash2, Link as LinkIcon, X } from 'lucide-react';

const MasterProductManager = () => {
    // State for data from Firestore
    const [masterProducts, setMasterProducts] = useState([]);
    const [parts, setParts] = useState([]);
    const [departments, setDepartments] = useState([]);
    const [linkedRecipes, setLinkedRecipes] = useState([]);
    const [loading, setLoading] = useState(true);

    // State for UI control
    const [selectedProductId, setSelectedProductId] = useState(null);
    const [newProductName, setNewProductName] = useState('');
    const [newProductDescription, setNewProductDescription] = useState('');

    // State for linking form
    const [partToLinkId, setPartToLinkId] = useState('');
    const [departmentToLinkId, setDepartmentToLinkId] = useState('');

    // Fetch initial data
    const fetchData = async () => {
        setLoading(true);
        const [products, fetchedParts, fetchedDepartments] = await Promise.all([
            getMasterProducts(),
            getParts(),
            getDepartments()
        ]);
        setMasterProducts(products);
        setParts(fetchedParts);
        setDepartments(fetchedDepartments);
        setLoading(false);
    };

    useEffect(() => {
        fetchData();
    }, []);

    // Fetch linked recipes whenever a master product is selected
    useEffect(() => {
        if (selectedProductId) {
            const fetchLinks = async () => {
                const links = await getLinkedRecipesForMasterProduct(selectedProductId);
                setLinkedRecipes(links);
            };
            fetchLinks();
        } else {
            setLinkedRecipes([]);
        }
    }, [selectedProductId]);

    const selectedMasterProduct = useMemo(() => {
        return masterProducts.find(p => p.id === selectedProductId);
    }, [selectedProductId, masterProducts]);

    // Handlers
    const handleAddMasterProduct = async (e) => {
        e.preventDefault();
        if (!newProductName.trim()) return alert('Product name is required.');
        await addMasterProduct({ name: newProductName, description: newProductDescription });
        setNewProductName('');
        setNewProductDescription('');
        fetchData();
    };

    const handleDeleteMasterProduct = async (productId) => {
        if (window.confirm("Are you sure you want to delete this master product and all its links? This cannot be undone.")) {
            await deleteMasterProduct(productId);
            setSelectedProductId(null);
            fetchData();
        }
    };

    const handleLinkRecipe = async (e) => {
        e.preventDefault();
        if (!partToLinkId || !departmentToLinkId) return alert('Please select a part and a department.');
        
        const partName = parts.find(p => p.id === partToLinkId)?.name || 'Unknown Part';
        const departmentName = departments.find(d => d.id === departmentToLinkId)?.name || 'Unknown Dept';
        const jobStepDetailId = `${partToLinkId}_${departmentToLinkId}`;

        await linkRecipeToMasterProduct({
            masterProductId: selectedProductId,
            jobStepDetailId,
            partId: partToLinkId,
            departmentId: departmentToLinkId,
            partName,
            departmentName
        });
        
        const links = await getLinkedRecipesForMasterProduct(selectedProductId);
        setLinkedRecipes(links);
        setPartToLinkId('');
        setDepartmentToLinkId('');
    };

    const handleUnlinkRecipe = async (linkId) => {
        await unlinkRecipeFromMasterProduct(linkId);
        const links = await getLinkedRecipesForMasterProduct(selectedProductId);
        setLinkedRecipes(links);
    };

    if (loading) return <p className="text-gray-400">Loading Master Product Manager...</p>;

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-2xl font-bold text-white mb-6">Master Product Manager</h3>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/* Left Column: List and Add Form */}
                <div className="lg:col-span-1 space-y-6">
                    <div>
                        <h4 className="font-bold text-lg text-white mb-2">Master Product List</h4>
                        <div className="space-y-2 max-h-96 overflow-y-auto pr-2">
                            {masterProducts.map(product => (
                                <div 
                                    key={product.id}
                                    onClick={() => setSelectedProductId(product.id)}
                                    className={`p-3 rounded-md cursor-pointer transition-colors ${selectedProductId === product.id ? 'bg-blue-600 text-white' : 'bg-gray-700 hover:bg-gray-600'}`}
                                >
                                    <p className="font-semibold">{product.name}</p>
                                    <p className="text-xs opacity-70">{product.description}</p>
                                </div>
                            ))}
                        </div>
                    </div>
                    <form onSubmit={handleAddMasterProduct} className="space-y-4 border-t border-gray-700 pt-6">
                        <h4 className="font-bold text-lg text-white">Add New Master Product</h4>
                        <Input label="Product Name" value={newProductName} onChange={e => setNewProductName(e.target.value)} placeholder="e.g., Volvo Cab Extender"/>
                        <Input label="Description" value={newProductDescription} onChange={e => setNewProductDescription(e.target.value)} placeholder="A brief description"/>
                        <Button type="submit" variant="primary" className="w-full">Create Product</Button>
                    </form>
                </div>

                {/* Right Column: Editor */}
                <div className="lg:col-span-2">
                    {selectedMasterProduct ? (
                        <div className="space-y-6">
                            <div>
                                <h4 className="text-xl font-bold text-blue-400">{selectedMasterProduct.name}</h4>
                                <p className="text-gray-400">{selectedMasterProduct.description}</p>
                            </div>

                            {/* Linked Recipes List */}
                            <div className="space-y-3">
                                <h5 className="font-semibold text-white">Linked Recipes ({linkedRecipes.length})</h5>
                                {linkedRecipes.length > 0 ? (
                                    linkedRecipes.map(link => (
                                        <div key={link.id} className="flex items-center justify-between bg-gray-700/50 p-3 rounded-lg">
                                            <div>
                                                <p className="font-semibold text-gray-200">{link.partName}</p>
                                                <p className="text-xs text-gray-400">{link.departmentName} Department</p>
                                            </div>
                                            <Button onClick={() => handleUnlinkRecipe(link.id)} variant="danger" size="sm" className="p-2">
                                                <X size={16}/>
                                            </Button>
                                        </div>
                                    ))
                                ) : (
                                    <p className="text-sm text-gray-500">No recipes linked yet.</p>
                                )}
                            </div>

                            {/* Link New Recipe Form */}
                            <form onSubmit={handleLinkRecipe} className="space-y-3 border-t border-gray-700 pt-6">
                                <h5 className="font-semibold text-white">Link New Recipe</h5>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <Dropdown label="Select Part" value={partToLinkId} onChange={e => setPartToLinkId(e.target.value)} options={parts} placeholder="Choose a part..."/>
                                    <Dropdown label="Select Department" value={departmentToLinkId} onChange={e => setDepartmentToLinkId(e.target.value)} options={departments} placeholder="Choose a department..."/>
                                </div>
                                <Button type="submit" variant="secondary" className="w-full"><LinkIcon size={16} className="mr-2"/>Link Recipe to Master Product</Button>
                            </form>

                             <div className="text-right border-t border-gray-700 pt-6">
                                <Button onClick={() => handleDeleteMasterProduct(selectedProductId)} variant="danger">
                                    <Trash2 size={16} className="mr-2"/> Delete Master Product
                                </Button>
                            </div>
                        </div>
                    ) : (
                        <div className="flex items-center justify-center h-full bg-gray-900/50 p-6 rounded-xl border-2 border-dashed border-gray-700 text-gray-500">
                           <p>Select a Master Product from the list on the left to manage its recipes.</p>
                       </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default MasterProductManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\OverheadsManager.jsx
==================================================
// src/components/features/settings/OverheadsManager.jsx (UPGRADED to use Expense Type)
import React, { useState, useEffect, useMemo } from 'react';
import { 
    getOverheadCategories, addOverheadCategory, updateOverheadCategory, deleteOverheadCategory,
    getOverheadExpenses, addOverheadExpense, updateOverheadExpense, deleteOverheadExpense 
} from '../../../api/firestore'; 
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import Dropdown from '../../ui/Dropdown';
import { ChevronDown, ChevronRight, FilePlus, DollarSign, Building, Users, TrendingUp, HelpCircle } from 'lucide-react'; 

// NEW: ExpenseTypeBadge to visualize the cost classification
const ExpenseTypeBadge = ({ type }) => {
    const config = {
        'Fixed Operational': { color: 'bg-blue-500', icon: <Building size={12} />, title: 'Fixed Operational Cost' },
        'Team & Training': { color: 'bg-purple-500', icon: <Users size={12} />, title: 'Team & Training Cost' },
        'Growth & Marketing': { color: 'bg-green-500', icon: <TrendingUp size={12} />, title: 'Growth & Marketing Investment' },
        'Discretionary/Reviewable': { color: 'bg-yellow-500', icon: <HelpCircle size={12} />, title: 'Discretionary/Reviewable Cost' }
    };
    const { color = 'bg-gray-500', icon = null, title = 'Uncategorized' } = config[type] || {};
    return (
        <span className={`w-6 h-6 rounded-full flex items-center justify-center text-white ${color}`} title={title}>
            {icon}
        </span>
    );
};

const OverheadsManager = () => {
    const [overheadCategories, setOverheadCategories] = useState([]);
    const [allExpenses, setAllExpenses] = useState({});
    const [newCategoryName, setNewCategoryName] = useState('');
    const [editingCategoryId, setEditingCategoryId] = useState(null);
    const [selectedCategoryId, setSelectedCategoryId] = useState(null);
    // UPDATED: state now uses expenseType instead of priority
    const [newExpense, setNewExpense] = useState({ name: '', amount: '', expenseType: 'Fixed Operational' });
    const [editingExpenseId, setEditingExpenseId] = useState(null);
    const [loading, setLoading] = useState(true);

    const fetchAllData = async () => {
        setLoading(true);
        try {
            const fetchedCategories = await getOverheadCategories();
            setOverheadCategories(fetchedCategories);

            const expensesMap = {};
            const expensePromises = fetchedCategories.map(async (cat) => {
                const expenses = await getOverheadExpenses(cat.id);
                expensesMap[cat.id] = expenses;
            });
            await Promise.all(expensePromises);
            setAllExpenses(expensesMap);

        } catch (error) {
            console.error("Error fetching overhead data:", error);
            alert("Failed to load overhead data.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchAllData();
    }, []);

    const categoryTotals = useMemo(() => {
        const totals = {};
        for (const catId in allExpenses) {
            totals[catId] = allExpenses[catId].reduce((sum, exp) => sum + (exp.amount || 0), 0);
        }
        return totals;
    }, [allExpenses]);

    // NEW: Calculate totals for each expense type
    const totalsByType = useMemo(() => {
        const totals = {
            'Fixed Operational': 0,
            'Team & Training': 0,
            'Growth & Marketing': 0,
            'Discretionary/Reviewable': 0,
        };
        Object.values(allExpenses).flat().forEach(expense => {
            if (totals[expense.expenseType] !== undefined) {
                totals[expense.expenseType] += expense.amount || 0;
            }
        });
        return totals;
    }, [allExpenses]);

    const grandTotal = useMemo(() => {
        return Object.values(categoryTotals).reduce((sum, total) => sum + total, 0);
    }, [categoryTotals]);

    const handleAddOrUpdateCategory = async (e) => {
        e.preventDefault();
        if (!newCategoryName.trim()) return;
        try {
            const dataToSave = { name: newCategoryName.trim() };
            if (editingCategoryId) {
                await updateOverheadCategory(editingCategoryId, dataToSave);
            } else {
                await addOverheadCategory(dataToSave);
            }
            setNewCategoryName('');
            setEditingCategoryId(null);
            fetchAllData(); 
        } catch (error) {
            alert(`Failed to save category.`);
        }
    };

    const handleAddOrUpdateExpense = async (e) => {
        e.preventDefault();
        if (!selectedCategoryId || !newExpense.name.trim() || newExpense.amount === '' || parseFloat(newExpense.amount) < 0) {
            alert("Please enter a valid expense name, amount, and select an expense type.");
            return;
        }
        try {
            // UPDATED: saving expenseType now
            const dataToSave = {
                name: newExpense.name.trim(),
                amount: parseFloat(newExpense.amount),
                expenseType: newExpense.expenseType,
            };
            if (editingExpenseId) {
                await updateOverheadExpense(selectedCategoryId, editingExpenseId, dataToSave);
            } else {
                await addOverheadExpense(selectedCategoryId, dataToSave);
            }
            setNewExpense({ name: '', amount: '', expenseType: 'Fixed Operational' });
            setEditingExpenseId(null);
            fetchAllData();
        } catch (error) {
            alert(`Failed to save expense.`);
        }
    };

    const handleEditExpense = (expense) => {
        setNewExpense({ name: expense.name, amount: expense.amount || '', expenseType: expense.expenseType || 'Fixed Operational' });
        setEditingExpenseId(expense.id);
    };

    const handleCancelEditExpense = () => {
        setNewExpense({ name: '', amount: '', expenseType: 'Fixed Operational' });
        setEditingExpenseId(null);
    };

    const handleEditCategory = (category) => { setNewCategoryName(category.name); setEditingCategoryId(category.id); };
    const handleCancelEditCategory = () => { setNewCategoryName(''); setEditingCategoryId(null); };
    const handleDeleteCategory = async (categoryId) => { if (window.confirm("Delete category and ALL expenses?")) { await deleteOverheadCategory(categoryId); fetchAllData(); if (selectedCategoryId === categoryId) setSelectedCategoryId(null); }};
    const handleSelectCategory = (categoryId) => { setSelectedCategoryId(prev => prev === categoryId ? null : categoryId); handleCancelEditExpense();};
    const handleDeleteExpense = async (expenseId) => { if (window.confirm("Delete this expense?")) { await deleteOverheadExpense(selectedCategoryId, expenseId); fetchAllData(); }};
    const handleExpenseInputChange = (e) => { const { name, value } = e.target; setNewExpense(prev => ({ ...prev, [name]: value }));};

    // NEW: Options for the Expense Type dropdown
    const expenseTypeOptions = [
        { id: 'Fixed Operational', name: 'Fixed Operational' },
        { id: 'Team & Training', name: 'Team & Training' },
        { id: 'Growth & Marketing', name: 'Growth & Marketing' },
        { id: 'Discretionary/Reviewable', name: 'Discretionary/Reviewable' },
    ];

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <div className="flex justify-between items-start mb-4">
                 <h3 className="text-xl font-bold text-white flex items-center"><FilePlus size={22} className="mr-2 text-blue-400"/> Manage Overheads & Fixed Costs</h3>
                 {/* NEW: Display totals by type */}
                 <div className="text-right">
                    <p className="text-sm text-gray-400">Grand Total</p>
                    <p className="text-2xl font-bold text-green-400 font-mono">R {grandTotal.toLocaleString('en-ZA', {minimumFractionDigits: 2})}</p>
                    <div className="flex gap-4 mt-2 justify-end text-xs">
                        {Object.entries(totalsByType).map(([type, total]) => (
                            <div key={type} className="flex items-center gap-2">
                                <ExpenseTypeBadge type={type} />
                                <span className="text-gray-400">R {total.toLocaleString('en-ZA')}</span>
                            </div>
                        ))}
                    </div>
                 </div>
            </div>

            <form onSubmit={handleAddOrUpdateCategory} className="flex items-center space-x-4 mb-6 p-4 bg-gray-900/50 rounded-lg">
                <Input label="Category Name" name="categoryName" value={newCategoryName} onChange={(e) => setNewCategoryName(e.target.value)} placeholder={editingCategoryId ? "Edit category name..." : "New category name (e.g., Rent & Utilities)"} className="flex-grow"/>
                {editingCategoryId && (<Button type="button" variant="secondary" onClick={handleCancelEditCategory}>Cancel</Button>)}
                <Button type="submit" variant="primary">{editingCategoryId ? "Update Category" : "Add Category"}</Button>
            </form>

            <div className="space-y-3">
                {loading ? <p>Loading categories...</p> : (overheadCategories || []).length === 0 ? <p className="text-center p-4 text-gray-500">No overhead categories added yet.</p> :
                    (overheadCategories || []).map(category => (
                        <div key={category.id} className="bg-gray-700 p-3 rounded-lg">
                            <div className="flex items-center justify-between">
                                <button onClick={() => handleSelectCategory(category.id)} className="flex-grow text-left text-gray-200 font-semibold flex items-center py-1">
                                    {selectedCategoryId === category.id ? <ChevronDown size={18} className="mr-2"/> : <ChevronRight size={18} className="mr-2"/>}
                                    {category.name}
                                </button>
                                <span className="font-mono text-gray-300 mr-4">R {categoryTotals[category.id]?.toLocaleString('en-ZA', {minimumFractionDigits: 2}) || '0.00'}</span>
                                <div className="flex space-x-2">
                                    <Button onClick={() => handleEditCategory(category)} variant="secondary" className="py-1 px-3 text-xs">Edit</Button>
                                    <Button onClick={() => handleDeleteCategory(category.id)} variant="danger" className="py-1 px-3 text-xs">Delete</Button>
                                </div>
                            </div>

                            {selectedCategoryId === category.id && (
                                <div className="mt-4 p-4 bg-gray-800 rounded-lg animate-fade-in border border-gray-700">
                                    <form onSubmit={handleAddOrUpdateExpense} className="grid grid-cols-1 md:grid-cols-4 gap-3 items-end mb-4">
                                        <Input label="Expense Name" name="name" value={newExpense.name} onChange={handleExpenseInputChange} placeholder={editingExpenseId ? "Edit name..." : "e.g., Ranos Rent"}/>
                                        <Input label="Amount (R)" name="amount" type="number" value={newExpense.amount} onChange={handleExpenseInputChange} placeholder="e.g., 2000.00"/>
                                        {/* UPDATED: Dropdown now for Expense Type */}
                                        <Dropdown label="Expense Type" name="expenseType" value={newExpense.expenseType} onChange={handleExpenseInputChange} options={expenseTypeOptions} />
                                        <div className="flex gap-2">
                                            {editingExpenseId && (<Button type="button" variant="secondary" onClick={handleCancelEditExpense}>Cancel</Button>)}
                                            <Button type="submit" variant="primary" className="flex-grow">{editingExpenseId ? "Update" : "Add"}</Button>
                                        </div>
                                    </form>

                                    <div className="space-y-2 max-h-48 overflow-y-auto mt-4 pt-4 border-t border-gray-700">
                                        {(allExpenses[category.id] || []).length === 0 ? <p className="text-gray-400 text-sm">No expenses in this category yet.</p> :
                                            (allExpenses[category.id] || []).map(expense => (
                                                <div key={expense.id} className="flex items-center justify-between bg-gray-700 p-2 rounded-md text-sm">
                                                    <div className="flex items-center gap-3">
                                                        <ExpenseTypeBadge type={expense.expenseType} />
                                                        <p className="text-gray-200">{expense.name}</p>
                                                    </div>
                                                    <div className="flex items-center gap-4">
                                                        <p className="text-gray-300 font-mono">R {(expense.amount || 0).toFixed(2)}</p>
                                                        <div className="flex space-x-2">
                                                            <Button onClick={() => handleEditExpense(expense)} variant="secondary" className="py-0.5 px-2 text-xs">Edit</Button>
                                                            <Button onClick={() => handleDeleteExpense(expense.id)} variant="danger" className="py-0.5 px-2 text-xs">Del</Button>
                                                        </div>
                                                    </div>
                                                </div>
                                            ))
                                        }
                                    </div>
                                </div>
                            )}
                        </div>
                    ))
                }
            </div>
        </div>
    );
};

export default OverheadsManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\RawMaterialsManager.jsx
==================================================
import React, { useState, useEffect } from 'react';
import { getRawMaterials, addRawMaterial, deleteRawMaterial, getSuppliers, updateDocument } from '../../../api/firestore';
import Button from '../../ui/Button';
import Input from '../../ui/Input';
import Dropdown from '../../ui/Dropdown';

const RawMaterialsManager = () => {
    const [materials, setMaterials] = useState([]);
    const [suppliers, setSuppliers] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [formData, setFormData] = useState({
        name: '',
        itemCode: '',
        supplierId: '',
        price: '',
        unit: 'kg',
        currentStock: '',
        reorderLevel: '',
        standardStockLevel: '',
        // NEW: Add new fields to the form state
        countMethod: 'Weight', // Default to Weight for materials
        containerWeight: '',
        unitWeight: '',
    });

    const fetchData = async () => {
        setIsLoading(true);
        const [fetchedMaterials, fetchedSuppliers] = await Promise.all([getRawMaterials(), getSuppliers()]);
        setMaterials(fetchedMaterials);
        setSuppliers(fetchedSuppliers);
        setIsLoading(false);
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.name || !formData.supplierId) {
            alert("Please provide a name and select a supplier.");
            return;
        }
        try {
            await addRawMaterial(formData);
            alert('Raw material added successfully!');
            setFormData({
                name: '', itemCode: '', supplierId: '', price: '', unit: 'kg',
                currentStock: '', reorderLevel: '', standardStockLevel: '',
                countMethod: 'Weight', containerWeight: '', unitWeight: '' // Reset new fields
            });
            fetchData();
        } catch (error) {
            alert('Failed to add raw material.');
            console.error(error);
        }
    };

    const handleUpdate = async (id, updatedData) => {
        try {
            await updateDocument('rawMaterials', id, updatedData);
            fetchData();
        } catch (error) {
            console.error("Failed to update raw material: ", error);
        }
    };
    
    const handleDelete = async (id) => {
        if (window.confirm("Are you sure you want to delete this raw material?")) {
            try {
                await deleteRawMaterial(id);
                alert('Raw material deleted successfully!');
                fetchData();
            } catch (error) {
                alert('Failed to delete raw material.');
                console.error(error);
            }
        }
    };

    if (isLoading) return <p>Loading raw materials...</p>;

    return (
        <div className="space-y-6">
            <form onSubmit={handleSubmit} className="bg-gray-800 p-4 rounded-lg space-y-4">
                <h3 className="text-lg font-bold text-white">Add New Raw Material</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <Input name="name" label="Material Name" value={formData.name} onChange={handleInputChange} placeholder="e.g., Mild Steel Sheet" />
                    <Input name="itemCode" label="Item Code" value={formData.itemCode} onChange={handleInputChange} placeholder="e.g., STL-001" />
                    <Dropdown name="supplierId" label="Supplier" value={formData.supplierId} onChange={handleInputChange} options={suppliers} placeholder="Select Supplier" />
                    <Input name="price" label="Price" type="number" value={formData.price} onChange={handleInputChange} placeholder="e.g., 25.50" />
                    <Input name="unit" label="Unit of Measure" value={formData.unit} onChange={handleInputChange} placeholder="e.g., kg, meter" />
                    <Input name="currentStock" label="In Stock" type="number" value={formData.currentStock} onChange={handleInputChange} placeholder="e.g., 500" />
                    <Input name="reorderLevel" label="Re-order At" type="number" value={formData.reorderLevel} onChange={handleInputChange} placeholder="e.g., 100" />
                    <Input name="standardStockLevel" label="Standard Stock Level" type="number" value={formData.standardStockLevel} onChange={handleInputChange} placeholder="e.g., 600" />
                    
                    {/* NEW: Fields for Count Method */}
                    <Dropdown 
                        name="countMethod" 
                        label="Count Method" 
                        value={formData.countMethod} 
                        onChange={handleInputChange}
                    >
                        <option value="Quantity">Quantity</option>
                        <option value="Weight">Weight</option>
                    </Dropdown>
                    
                    {/* NEW: Conditional fields for Weight */}
                    {formData.countMethod === 'Weight' && (
                        <>
                            <Input name="containerWeight" label="Container Weight (g)" type="number" value={formData.containerWeight} onChange={handleInputChange} placeholder="e.g., 50" />
                            <Input name="unitWeight" label="Weight per Unit (g)" type="number" value={formData.unitWeight} onChange={handleInputChange} placeholder="e.g., 1" />
                        </>
                    )}
                </div>
                <Button type="submit" variant="primary">Add Raw Material</Button>
            </form>

            <div className="bg-gray-800 p-4 rounded-lg">
                 <h3 className="text-lg font-bold text-white mb-4">Existing Raw Materials</h3>
                <div className="overflow-x-auto">
                    <table className="w-full text-sm text-left">
                         <thead className="text-xs text-gray-400 uppercase bg-gray-700">
                            <tr>
                                <th className="p-2">Name</th>
                                <th className="p-2">Code</th>
                                <th className="p-2">In Stock</th>
                                <th className="p-2">Count Method</th>
                                <th className="p-2">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {materials.map(mat => (
                                <EditableMaterialRow 
                                    key={mat.id} 
                                    material={mat} 
                                    onUpdate={handleUpdate}
                                    onDelete={handleDelete} 
                                />
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

// A new sub-component to make the rows editable
const EditableMaterialRow = ({ material, onUpdate, onDelete }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [editData, setEditData] = useState(material);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setEditData(prev => ({ ...prev, [name]: value }));
    };

    const handleSave = () => {
        onUpdate(material.id, editData);
        setIsEditing(false);
    };

    if (!isEditing) {
        return (
            <tr className="border-b border-gray-700">
                <td className="p-2 text-white">{material.name}</td>
                <td className="p-2">{material.itemCode}</td>
                <td className="p-2">{material.currentStock}</td>
                <td className="p-2">{material.countMethod || 'Weight'}</td>
                <td className="p-2 flex gap-2">
                    <Button onClick={() => setIsEditing(true)} size="sm">Edit</Button>
                    <Button onClick={() => onDelete(material.id)} variant="danger" size="sm">Delete</Button>
                </td>
            </tr>
        )
    }

    // Editing View
    return (
        <tr className="bg-gray-900">
            <td className="p-2"><Input name="name" value={editData.name} onChange={handleInputChange} /></td>
            <td className="p-2"><Input name="itemCode" value={editData.itemCode} onChange={handleInputChange} /></td>
            <td className="p-2"><Input name="currentStock" type="number" value={editData.currentStock} onChange={handleInputChange} /></td>
            <td className="p-2">
                <Dropdown name="countMethod" value={editData.countMethod} onChange={handleInputChange}>
                    <option value="Quantity">Quantity</option>
                    <option value="Weight">Weight</option>
                </Dropdown>
            </td>
            <td className="p-2 flex gap-2">
                <Button onClick={handleSave} variant="success" size="sm">Save</Button>
                <Button onClick={() => setIsEditing(false)} variant="secondary" size="sm">Cancel</Button>
            </td>
        </tr>
    );
}

export default RawMaterialsManager;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\ReworkReasonsManager.jsx
==================================================
// src/components/features/settings/ReworkReasonsManager.jsx (New File)

import React, { useState, useEffect } from 'react';
import { collection, getDocs, addDoc, deleteDoc, doc, updateDoc, query, orderBy } from 'firebase/firestore';
import { db } from '../../../api/firebase';
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import { Trash2, Edit, PlusCircle } from 'lucide-react';

const ReworkReasonsManager = () => {
    const [reasons, setReasons] = useState([]);
    const [loading, setLoading] = useState(true);
    const [editingId, setEditingId] = useState(null);
    const [reasonName, setReasonName] = useState('');

    const reasonsCollection = collection(db, 'reworkReasons');

    const fetchData = async () => {
        setLoading(true);
        const q = query(reasonsCollection, orderBy('name'));
        const snapshot = await getDocs(q);
        setReasons(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
        setLoading(false);
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleAddOrUpdate = async (e) => {
        e.preventDefault();
        if (!reasonName.trim()) return;

        try {
            if (editingId) {
                await updateDoc(doc(db, 'reworkReasons', editingId), { name: reasonName.trim() });
            } else {
                await addDoc(reasonsCollection, { name: reasonName.trim() });
            }
            setReasonName('');
            setEditingId(null);
            fetchData();
        } catch (error) {
            console.error("Error saving rework reason:", error);
            alert("Failed to save rework reason.");
        }
    };

    const handleEdit = (reason) => {
        setEditingId(reason.id);
        setReasonName(reason.name);
    };

    const handleDelete = async (id) => {
        if (window.confirm("Are you sure you want to delete this reason? This might affect historical reports.")) {
            await deleteDoc(doc(db, 'reworkReasons', id));
            fetchData();
        }
    };

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Manage Rework Reasons</h3>
            <p className="text-sm text-gray-400 mb-4">Define the standard failure modes for Quality Control checks. This will power your rework analysis dashboards.</p>
            <form onSubmit={handleAddOrUpdate} className="flex items-center space-x-4 mb-6">
                <Input
                    name="reasonName"
                    value={reasonName}
                    onChange={(e) => setReasonName(e.target.value)}
                    placeholder={editingId ? "Edit reason..." : "New reason (e.g., Poor Surface Finish)"}
                    className="flex-grow"
                />
                {editingId && (<Button type="button" variant="secondary" onClick={() => { setEditingId(null); setReasonName(''); }}>Cancel</Button>)}
                <Button type="submit" variant="primary">
                    {editingId ? <><Edit size={16} className="mr-2"/>Update</> : <><PlusCircle size={16} className="mr-2"/>Add Reason</>}
                </Button>
            </form>
            <div className="space-y-3">
                {loading ? <p>Loading...</p> : reasons.map(reason => (
                    <div key={reason.id} className="flex items-center justify-between bg-gray-700 p-3 rounded-lg">
                        <p className="text-gray-200">{reason.name}</p>
                        <div className="flex space-x-2">
                            <Button onClick={() => handleEdit(reason)} variant="secondary" size="sm" className="py-1 px-2 text-xs">Edit</Button>
                            <Button onClick={() => handleDelete(reason.id)} variant="danger" size="sm" className="py-1 px-2 text-xs">Delete</Button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default ReworkReasonsManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\SkillsManager.jsx
==================================================
import React, { useState, useEffect } from 'react';
// Corrected firestore path
import { getSkills, addSkill, deleteSkill, updateSkill } from '../../../api/firestore'; 
// CORRECTED UI COMPONENT PATHS
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import { Edit, Trash2, Check, X } from 'lucide-react';

const SkillsManager = () => {
    const [skills, setSkills] = useState([]);
    const [newSkillName, setNewSkillName] = useState('');
    const [loading, setLoading] = useState(true);
    const [editingSkillId, setEditingSkillId] = useState(null);
    const [editingSkillName, setEditingSkillName] = useState('');

    const fetchSkills = async () => {
        setLoading(true);
        try {
            const fetchedSkills = await getSkills();
            setSkills(fetchedSkills);
        } catch (error) {
            console.error("Error fetching skills:", error);
            alert("Could not fetch skills.");
        }
        setLoading(false);
    };

    useEffect(() => {
        fetchSkills();
    }, []);

    const handleAddSkill = async (e) => {
        e.preventDefault();
        if (!newSkillName.trim()) return;
        try {
            await addSkill(newSkillName.trim());
            setNewSkillName('');
            await fetchSkills(); // Refresh list
        } catch (error) {
            console.error("Error adding skill:", error);
            alert("Failed to add skill.");
        }
    };

    const handleDeleteSkill = async (skillId) => {
        if (window.confirm("Are you sure you want to delete this skill?")) {
            try {
                await deleteSkill(skillId);
                await fetchSkills(); // Refresh list
            } catch (error) {
                console.error("Error deleting skill:", error);
                alert("Failed to delete skill.");
            }
        }
    };

    const handleEditClick = (skill) => {
        setEditingSkillId(skill.id);
        setEditingSkillName(skill.name);
    };

    const handleCancelEdit = () => {
        setEditingSkillId(null);
        setEditingSkillName('');
    };

    const handleUpdateSkill = async (skillId) => {
        if (!editingSkillName.trim()) return;
        try {
            await updateSkill(skillId, { name: editingSkillName.trim() });
            setEditingSkillId(null);
            setEditingSkillName('');
            await fetchSkills(); // Refresh list
        } catch (error) {
            console.error("Error updating skill:", error);
            alert("Failed to update skill.");
        }
    };

    return (
        <div className="bg-gray-800/50 p-6 rounded-lg border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Manage Skills</h3>
            {/* Add Skill Form */}
            <form onSubmit={handleAddSkill} className="flex items-center gap-4 mb-6">
                <Input
                    type="text"
                    value={newSkillName}
                    onChange={(e) => setNewSkillName(e.target.value)}
                    placeholder="New skill name..."
                    className="flex-grow"
                />
                <Button type="submit" variant="primary">Add Skill</Button>
            </form>

            {/* Skills List */}
            <div className="space-y-3">
                {loading ? (
                    <p className="text-gray-400">Loading skills...</p>
                ) : (
                    skills.map((skill) => (
                        <div key={skill.id} className="flex items-center justify-between bg-gray-900/50 p-3 rounded-md">
                            {editingSkillId === skill.id ? (
                                <Input
                                    type="text"
                                    value={editingSkillName}
                                    onChange={(e) => setEditingSkillName(e.target.value)}
                                    className="flex-grow mr-2"
                                />
                            ) : (
                                <p className="text-gray-200">{skill.name}</p>
                            )}
                            <div className="flex items-center gap-2">
                                {editingSkillId === skill.id ? (
                                    <>
                                        <Button onClick={() => handleUpdateSkill(skill.id)} variant="icon" className="text-green-500 hover:text-green-400">
                                            <Check size={18} />
                                        </Button>
                                        <Button onClick={handleCancelEdit} variant="icon" className="text-red-500 hover:text-red-400">
                                            <X size={18} />
                                        </Button>
                                    </>
                                ) : (
                                    <>
                                        <Button onClick={() => handleEditClick(skill)} variant="secondary" size="sm">
                                            <Edit size={16} className="mr-1" /> Edit
                                        </Button>
                                        <Button onClick={() => handleDeleteSkill(skill.id)} variant="danger" size="sm">
                                            <Trash2 size={16} className="mr-1" /> Delete
                                        </Button>
                                    </>
                                )}
                            </div>
                        </div>
                    ))
                )}
            </div>
        </div>
    );
};

export default SkillsManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\SuppliersManager.jsx
==================================================
import React, { useState, useEffect } from 'react';
import { getSuppliers, addSupplier, deleteSupplier, updateSupplier } from '../../../api/firestore'; // Import updateSupplier
import Input from '../../ui/Input';
import Button from '../../ui/Button';

const SuppliersManager = () => {
  const [suppliers, setSuppliers] = useState([]);
  const [newSupplier, setNewSupplier] = useState({ name: '', email: '', estimatedEtaDays: '', minOrderAmount: '' });
  const [loading, setLoading] = useState(true);
  const [editingSupplierId, setEditingSupplierId] = useState(null); // New state to track which supplier is being edited

  const fetchSuppliers = async () => {
    setLoading(true);
    const fetchedSuppliers = await getSuppliers();
    setSuppliers(fetchedSuppliers);
    setLoading(false);
  };

  useEffect(() => {
    fetchSuppliers();
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewSupplier(prevState => ({ ...prevState, [name]: value }));
  };

  const handleAddOrUpdate = async (e) => { // Renamed handler to handle both add and update
    e.preventDefault();
    if (!newSupplier.name.trim()) {
      alert("Supplier name is required.");
      return;
    }
    try {
      const dataToSave = {
        ...newSupplier,
        estimatedEtaDays: parseInt(newSupplier.estimatedEtaDays, 10) || 0,
        minOrderAmount: parseFloat(newSupplier.minOrderAmount) || 0,
      };

      if (editingSupplierId) {
        // If editingSupplierId is set, update the existing supplier using updateSupplier
        await updateSupplier(editingSupplierId, dataToSave); 
        alert("Supplier updated successfully!");
      } else {
        // Otherwise, add a new supplier
        await addSupplier(dataToSave);
        alert("Supplier added successfully!");
      }
      setNewSupplier({ name: '', email: '', estimatedEtaDays: '', minOrderAmount: '' }); // Reset form
      setEditingSupplierId(null); // Clear editing state
      fetchSuppliers(); // Refresh list
    } catch (error) {
      console.error("Error saving supplier:", error);
      alert(`Failed to ${editingSupplierId ? 'update' : 'add'} supplier.`); // Dynamic error message
    }
  };

  const handleEdit = (supplier) => { // Handler for edit button click
    setNewSupplier({
        name: supplier.name,
        email: supplier.email || '', // Ensure email is handled if it's null/undefined
        estimatedEtaDays: supplier.estimatedEtaDays || '', // Ensure numeric values are converted to string for input
        minOrderAmount: supplier.minOrderAmount || '' // Ensure numeric values are converted to string for input
    });
    setEditingSupplierId(supplier.id); // Set the ID of the supplier being edited
  };

  const handleCancelEdit = () => { // Handler to cancel editing
    setNewSupplier({ name: '', email: '', estimatedEtaDays: '', minOrderAmount: '' }); // Reset form
    setEditingSupplierId(null); // Exit editing mode
  };

  const handleDelete = async (id) => {
    if (window.confirm("Are you sure you want to delete this supplier?")) {
      await deleteSupplier(id);
      fetchSuppliers();
    }
  };

  return (
    <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
      <h3 className="text-xl font-bold text-white mb-4">Manage Suppliers</h3>
      <form onSubmit={handleAddOrUpdate} className="grid grid-cols-1 md:grid-cols-5 gap-4 items-end mb-6"> {/* Use universal handler */}
        <Input label="Supplier Name" name="name" value={newSupplier.name} onChange={handleInputChange} placeholder={editingSupplierId ? "Edit supplier name..." : "e.g., Bolt & Nut Centre"} /> {/* Dynamic placeholder */}
        <Input label="Email Address" name="email" type="email" value={newSupplier.email} onChange={handleInputChange} placeholder={editingSupplierId ? "Edit email..." : "e.g., sales@bolts.co.za"} /> {/* Dynamic placeholder */}
        <Input label="ETA (in days)" name="estimatedEtaDays" type="number" value={newSupplier.estimatedEtaDays} onChange={handleInputChange} placeholder={editingSupplierId ? "Edit ETA..." : "e.g., 3"} /> {/* Dynamic placeholder */}
        <Input label="Min. Order (R)" name="minOrderAmount" type="number" value={newSupplier.minOrderAmount} onChange={handleInputChange} placeholder={editingSupplierId ? "Edit min order..." : "e.g., 500"} /> {/* Dynamic placeholder */}
        {editingSupplierId && ( // Show cancel button only when in editing mode
            <Button type="button" variant="secondary" onClick={handleCancelEdit}>Cancel</Button>
        )}
        <Button type="submit" variant="primary">
            {editingSupplierId ? "Update Supplier" : "Add Supplier"} {/* Dynamic button text */}
        </Button>
      </form>

      <div className="hidden md:grid grid-cols-5 gap-4 px-3 py-2 text-sm font-semibold text-gray-400 border-b border-gray-700">
        <div className="col-span-2">Supplier Name</div>
        <div>Email</div>
        <div>Lead Time</div>
        <div className="text-right">Min. Order</div>
      </div>
      <div className="space-y-3 mt-2">
        {loading ? <p>Loading...</p> : (suppliers || []).map(sup => (
          <div key={sup.id} className="grid grid-cols-1 md:grid-cols-5 gap-4 items-center bg-gray-700 p-3 rounded-lg">
            <p className="text-gray-200 font-semibold col-span-2">{sup.name}</p>
            <p className="text-gray-400">{sup.email}</p>
            <p className="text-gray-400">{sup.estimatedEtaDays} days</p>
            <p className="text-gray-400 text-right">R {(sup.minOrderAmount || 0).toFixed(2)}</p>
            <div className="md:col-start-6 text-right flex space-x-2 justify-end"> {/* Added flex for buttons */}
                <Button onClick={() => handleEdit(sup)} variant="secondary" className="py-1 px-3 text-xs">Edit</Button> {/* Edit button */}
                <Button onClick={() => handleDelete(sup.id)} variant="danger" className="py-1 px-3 text-xs">Delete</Button>
            </div>
          </div>
        ))}
         {(suppliers.length === 0 && !loading && <p className="text-center p-4 text-gray-500">No suppliers added yet.</p>)}
      </div>
    </div>
  );
};

export default SuppliersManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\ToolAccessoriesManager.jsx
==================================================
import React, { useState, useEffect, useMemo } from 'react';
import { getTools, getToolAccessories, addToolAccessory, deleteToolAccessory, updateDocument } from '../../../api/firestore'; // updateDocument imported
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import Dropdown from '../../ui/Dropdown';

const ToolAccessoriesManager = () => {
    const [tools, setTools] = useState([]);
    const [accessories, setAccessories] = useState([]);
    const [newAccessoryName, setNewAccessoryName] = useState('');
    const [selectedToolId, setSelectedToolId] = useState('');
    const [loading, setLoading] = useState(true);
    const [editingAccessoryId, setEditingAccessoryId] = useState(null); // State to track which accessory is being edited

    const fetchData = async () => {
        setLoading(true);
        const [fetchedTools, fetchedAccessories] = await Promise.all([getTools(), getToolAccessories()]); // Fetches tools  and accessories 
        setTools(fetchedTools);
        setAccessories(fetchedAccessories);
        setLoading(false);
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleAddOrUpdate = async (e) => {
        e.preventDefault();
        if (!newAccessoryName.trim() || !selectedToolId) {
            alert("Please select a parent tool and enter an accessory name.");
            return;
        }
        try {
            const dataToSave = { name: newAccessoryName, toolId: selectedToolId };

            if (editingAccessoryId) {
                // If editingAccessoryId is set, update the existing accessory
                await updateDocument('toolAccessories', editingAccessoryId, dataToSave); // Uses updateDocument for generic update 
                alert("Accessory updated successfully!");
            } else {
                // Otherwise, add a new accessory
                await addToolAccessory(dataToSave); // Adds new accessory 
                alert("Accessory added successfully!");
            }
            setNewAccessoryName(''); // Clear input field
            setSelectedToolId(''); // Clear selected tool
            setEditingAccessoryId(null); // Exit editing mode
            fetchData(); // Refresh the list
        } catch (error) {
            console.error("Error saving accessory:", error);
            alert(`Failed to ${editingAccessoryId ? 'update' : 'add'} accessory.`);
        }
    };

    const handleEdit = (accessory) => { // Handler for edit button click
        setNewAccessoryName(accessory.name); // Pre-fill form with accessory's current name
        setSelectedToolId(accessory.toolId); // Pre-fill with parent tool ID
        setEditingAccessoryId(accessory.id); // Set the ID of the accessory being edited
    };

    const handleCancelEdit = () => { // Handler to cancel editing
        setNewAccessoryName(''); // Clear input field
        setSelectedToolId(''); // Clear selected tool
        setEditingAccessoryId(null); // Exit editing mode
    };

    const handleDelete = async (id) => {
        if (window.confirm("Are you sure you want to delete this accessory?")) {
            await deleteToolAccessory(id); // Deletes tool accessory 
            fetchData(); // Refresh the list
        }
    };
    
    // Group accessories by their parent tool for a clean display
    const groupedAccessories = useMemo(() => {
        const groups = {};
        accessories.forEach(acc => {
            if (!groups[acc.toolId]) {
                const tool = tools.find(t => t.id === acc.toolId);
                groups[acc.toolId] = { toolName: tool ? tool.name : 'Unknown Tool', items: [] };
            }
            groups[acc.toolId].items.push(acc);
        });
        return Object.values(groups);
    }, [accessories, tools]);

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Manage Tool Accessories</h3>
            <form onSubmit={handleAddOrUpdate} className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end mb-6">
                <Dropdown
                    label="Parent Tool"
                    name="toolId"
                    value={selectedToolId}
                    onChange={(e) => setSelectedToolId(e.target.value)}
                    options={tools}
                    placeholder="Select a tool..."
                />
                <Input
                    label="Accessory Name"
                    name="accessoryName"
                    value={newAccessoryName}
                    onChange={(e) => setNewAccessoryName(e.target.value)}
                    placeholder={editingAccessoryId ? "Edit accessory name..." : "New accessory name..."} // Dynamic placeholder
                />
                {editingAccessoryId && ( // Show Cancel button only when in editing mode
                    <Button type="button" variant="secondary" onClick={handleCancelEdit}>
                        Cancel
                    </Button>
                )}
                <Button type="submit" variant="primary">
                    {editingAccessoryId ? "Update Accessory" : "Add Accessory"} {/* Dynamic button text */}
                </Button>
            </form>
            <div className="space-y-4 mt-6">
                {loading ? (
                    <p>Loading...</p>
                ) : (groupedAccessories.map(group => (
                    <div key={group.toolName}>
                        <h4 className="font-semibold text-blue-400 border-b border-gray-700 pb-1 mb-2">{group.toolName} Accessories</h4>
                        <ul className="space-y-2">
                            {group.items.map(item => (
                                <li key={item.id} className="flex items-center justify-between bg-gray-700 p-3 rounded-lg text-sm">
                                    <p className="text-gray-200">{item.name}</p>
                                    <div className="flex space-x-2"> {/* Container for action buttons */}
                                        <Button onClick={() => handleEdit(item)} variant="secondary" className="py-0.5 px-2 text-xs">
                                            Edit
                                        </Button>
                                        <Button onClick={() => handleDelete(item.id)} variant="danger" className="py-0.5 px-2 text-xs">
                                            Delete
                                        </Button>
                                    </div>
                                </li>
                            ))}
                        </ul>
                    </div>
                )))}
            </div>
        </div>
    );
};

export default ToolAccessoriesManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\ToolsManager.jsx
==================================================
// src/components/features/settings/ToolsManager.jsx (UPGRADED for ABC)

import React, { useState, useEffect } from 'react';
import { getTools, addTool, deleteTool, updateDocument, getSkills } from '../../../api/firestore';
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import Dropdown from '../../ui/Dropdown';
import { Wrench, PlusCircle, Save, DollarSign } from 'lucide-react';

const ToolsManager = () => {
    const [tools, setTools] = useState([]);
    const [allSkills, setAllSkills] = useState([]);
    const [loading, setLoading] = useState(true);
    
    // State for the form, now an object to hold all tool properties
    const [formData, setFormData] = useState({
        name: '',
        hourlyRate: '', // <-- NEW: state for hourly rate
        associatedSkills: [],
    });
    const [editingToolId, setEditingToolId] = useState(null);

    const getProficiencyLabel = (level) => {
        switch (level) {
            case 0: return 'Not Applicable / No Minimum';
            case 1: return 'Beginner (1)';
            case 2: return 'Basic (2)';
            case 3: return 'Intermediate (3)';
            case 4: return 'Advanced (4)';
            case 5: return 'Expert (5)';
            default: return 'N/A';
        }
    };
    
    const fetchData = async () => {
        setLoading(true);
        try {
            const [fetchedTools, fetchedSkills] = await Promise.all([getTools(), getSkills()]);
            setTools(fetchedTools);
            setAllSkills(fetchedSkills);
        } catch (error) {
            console.error("Error fetching data for Tools Manager:", error);
            alert("Failed to load tools or skills.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleToggleSkillAssociation = (skillId, isChecked) => {
        setFormData(prev => {
            const existingSkills = prev.associatedSkills || [];
            if (isChecked) {
                return { ...prev, associatedSkills: [...existingSkills, { skillId, defaultMinimumProficiency: 0, importanceWeight: 0 }] };
            } else {
                return { ...prev, associatedSkills: existingSkills.filter(s => s.skillId !== skillId) };
            }
        });
    };

    const handleAssociatedSkillChange = (skillId, field, value) => {
        setFormData(prev => ({
            ...prev,
            associatedSkills: prev.associatedSkills.map(skill =>
                skill.skillId === skillId ? { ...skill, [field]: Number(value) } : skill
            )
        }));
    };

    const resetForm = () => {
        setFormData({ name: '', hourlyRate: '', associatedSkills: [] });
        setEditingToolId(null);
    };

    const handleAddOrUpdate = async (e) => {
        e.preventDefault();
        if (!formData.name.trim()) {
            alert("Tool name is required.");
            return;
        }
        try {
            const filteredAssociatedSkills = (formData.associatedSkills || []).filter(s =>
                s.defaultMinimumProficiency > 0 || s.importanceWeight > 0
            );
            const toolDataToSave = {
                name: formData.name.trim(),
                hourlyRate: Number(formData.hourlyRate) || 0, // <-- NEW: save hourly rate
                associatedSkills: filteredAssociatedSkills,
            };
            
            if (editingToolId) {
                await updateDocument('tools', editingToolId, toolDataToSave);
                alert("Tool updated successfully!");
            } else {
                await addTool(toolDataToSave);
                alert("Tool added successfully!");
            }
            resetForm();
            fetchData();
        } catch (error) {
            console.error("Error saving tool:", error);
            alert(`Failed to ${editingToolId ? 'update' : 'add'} tool.`);
        }
    };

    const handleEdit = (tool) => {
        setEditingToolId(tool.id);
        setFormData({
            name: tool.name,
            hourlyRate: tool.hourlyRate || '',
            associatedSkills: tool.associatedSkills || [],
        });
    };

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Manage Tools & Machine Rates</h3>
            <form onSubmit={handleAddOrUpdate} className="space-y-4 mb-6 p-4 bg-gray-900/50 rounded-lg">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="md:col-span-2">
                        <Input
                            label="Tool Name"
                            name="name"
                            value={formData.name}
                            onChange={handleInputChange}
                            placeholder={editingToolId ? "Edit tool name..." : "New tool name..."}
                        />
                    </div>
                    <div>
                        {/* --- NEW HOURLY RATE INPUT --- */}
                        <Input
                            label="Hourly Rate (R)"
                            name="hourlyRate"
                            type="number"
                            value={formData.hourlyRate}
                            onChange={handleInputChange}
                            placeholder="e.g., 25.50"
                        />
                    </div>
                </div>

                {formData.name.trim() && (
                    <div className="border-t border-gray-700 pt-4 mt-4">
                         <h4 className="text-lg font-semibold text-white mb-3">Associated Skills for "{formData.name}"</h4>
                         {/* ... Associated skills JSX remains unchanged ... */}
                    </div>
                )}
                
                <div className="flex justify-end gap-2">
                    {editingToolId && <Button type="button" variant="secondary" onClick={resetForm}>Cancel</Button>}
                    <Button type="submit" variant="primary">
                        {editingToolId ? <><Save size={16} className="mr-2"/> Update Tool</> : <><PlusCircle size={16} className="mr-2"/> Add Tool</>}
                    </Button>
                </div>
            </form>

            <div className="space-y-3">
                {loading ? <p>Loading tools...</p> : (tools || []).map(tool => (
                    <div key={tool.id} className="flex items-center justify-between bg-gray-700 p-3 rounded-lg">
                        <p className="text-gray-200 flex items-center gap-3">
                            <Wrench size={18} className="text-gray-400"/> 
                            {tool.name}
                            {/* --- DISPLAY THE HOURLY RATE --- */}
                            {tool.hourlyRate > 0 && (
                                <span className="text-xs flex items-center gap-1 bg-yellow-500/20 text-yellow-300 px-2 py-0.5 rounded-full">
                                    <DollarSign size={12}/>
                                    {`R${tool.hourlyRate.toFixed(2)}/hr`}
                                </span>
                            )}
                        </p>
                        <div className="flex space-x-2">
                            <Button onClick={() => handleEdit(tool)} variant="secondary" className="py-1 px-3 text-xs">Edit</Button>
                            <Button onClick={() => deleteTool(tool.id)} variant="danger" className="py-1 px-3 text-xs">Delete</Button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default ToolsManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\TrainingManager.jsx
==================================================
// src/components/features/settings/TrainingManager.jsx (Corrected)

import React, { useState, useEffect } from 'react';
import {
    getSkills,
    getTrainingResources,
    addTrainingResource,
    updateTrainingResource,
    deleteTrainingResource
} from '../../../api/firestore'; // Correct: Imports our custom API functions
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import Dropdown from '../../ui/Dropdown';
import { PlusCircle, Trash2, Edit } from 'lucide-react';

const TrainingManager = () => {
    const [resources, setResources] = useState([]);
    const [skills, setSkills] = useState([]);
    const [loading, setLoading] = useState(true);
    const [editingId, setEditingId] = useState(null);
    const [formData, setFormData] = useState({
        skillId: '',
        resourceName: '',
        type: 'Video',
        url: ''
    });

    const resourceTypes = [
        { id: 'Video', name: 'Video' },
        { id: 'Document', name: 'Document' },
        { id: 'External Link', name: 'External Link' }
    ];

    const fetchData = async () => {
        setLoading(true);
        try {
            const [fetchedResources, fetchedSkills] = await Promise.all([
                getTrainingResources(),
                getSkills()
            ]);
            setResources(fetchedResources);
            setSkills(fetchedSkills);
        } catch (error) {
            console.error("Error fetching training data:", error);
            alert("Could not load training data.");
        }
        setLoading(false);
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleCancelEdit = () => {
        setEditingId(null);
        setFormData({ skillId: '', resourceName: '', type: 'Video', url: '' });
    };

    const handleEditClick = (resource) => {
        setEditingId(resource.id);
        setFormData({
            skillId: resource.skillId,
            resourceName: resource.resourceName,
            type: resource.type,
            url: resource.url
        });
    };

    const handleDelete = async (resourceId) => {
        if (window.confirm("Are you sure you want to delete this training resource?")) {
            try {
                await deleteTrainingResource(resourceId);
                alert("Resource deleted.");
                fetchData();
            } catch (error) {
                console.error("Error deleting resource:", error);
                alert("Failed to delete resource.");
            }
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.skillId || !formData.resourceName.trim() || !formData.url.trim()) {
            return alert("Please select a skill and fill in the resource name and URL.");
        }

        try {
            if (editingId) {
                await updateTrainingResource(editingId, formData);
                alert("Resource updated successfully!");
            } else {
                await addTrainingResource(formData);
                alert("Resource added successfully!");
            }
            handleCancelEdit();
            fetchData();
        } catch (error) {
            console.error("Error saving resource:", error);
            alert("Failed to save training resource.");
        }
    };

    const getSkillName = (skillId) => {
        return skills.find(s => s.id === skillId)?.name || 'Unknown Skill';
    };

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Manage Training Resources</h3>
            
            <form onSubmit={handleSubmit} className="p-4 mb-6 bg-gray-900/50 rounded-lg space-y-4">
                <h4 className="text-lg font-semibold text-white">{editingId ? 'Edit Resource' : 'Add New Resource'}</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <Dropdown label="Associated Skill" name="skillId" value={formData.skillId} onChange={handleInputChange} options={skills} placeholder="Select skill..." required/>
                    <Input label="Resource Name" name="resourceName" value={formData.resourceName} onChange={handleInputChange} placeholder="e.g., Advanced TIG Welding" required/>
                    <Input label="URL" name="url" value={formData.url} onChange={handleInputChange} placeholder="https://..." required/>
                    <Dropdown label="Type" name="type" value={formData.type} onChange={handleInputChange} options={resourceTypes} />
                </div>
                <div className="flex justify-end gap-2">
                    {editingId && <Button type="button" variant="secondary" onClick={handleCancelEdit}>Cancel</Button>}
                    <Button type="submit" variant="primary">
                        {editingId ? <><Edit size={16} className="mr-2"/>Save Changes</> : <><PlusCircle size={16} className="mr-2"/>Add Resource</>}
                    </Button>
                </div>
            </form>

            <div className="space-y-3">
                {loading ? <p className="text-gray-400">Loading...</p> :
                    resources.map(resource => (
                        <div key={resource.id} className="bg-gray-700 p-4 rounded-lg flex flex-wrap items-center justify-between gap-4">
                            <div>
                                <p className="font-bold text-white">{resource.resourceName}</p>
                                <p className="text-sm text-purple-400 font-semibold">{getSkillName(resource.skillId)}</p>
                                <a href={resource.url} target="_blank" rel="noopener noreferrer" className="text-xs text-blue-400 hover:underline break-all">{resource.url}</a>
                            </div>
                            <div className="flex gap-2">
                                <Button onClick={() => handleEditClick(resource)} variant="secondary" size="sm" className="p-2"><Edit size={16}/></Button>
                                <Button onClick={() => handleDelete(resource.id)} variant="danger" size="sm" className="p-2"><Trash2 size={16}/></Button>
                            </div>
                        </div>
                    ))
                }
            </div>
        </div>
    );
};

export default TrainingManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\UnifiedProductManager.jsx
==================================================
// src/components/features/settings/UnifiedProductManager.jsx (REFACTORED for new data model)

import React, { useState, useEffect, useMemo } from 'react';
import {
    getProducts, addProduct, updateProduct, deleteProduct,
    getProductCategories, addProductCategory,
    getJobStepDetails, setJobStepDetail, getDepartments,
    getTools, getToolAccessories, getAllInventoryItems,
    linkRecipeToProduct, getLinkedRecipesForProduct, unlinkRecipeFromProduct,
    getSkills
} from '../../../api/firestore';
import Button from '../../ui/Button';
import Input from '../../ui/Input';
import Dropdown from '../../ui/Dropdown';
import Textarea from '../../ui/Textarea';
import { X, Save, Link as LinkIcon, Package, Wrench, Settings2, Search, Trash2, ChevronDown, ChevronRight, PackagePlus, FolderPlus, Star, PlusCircle } from 'lucide-react';

// Note: The ConsumableEditor sub-component is no longer needed here as recipe editing is complex
// and better handled in a dedicated, more focused interface if required later.
// This simplifies the UnifiedProductManager to focus on high-level product and category management.

const UnifiedProductManager = () => {
    // State for all data fetched from Firestore
    const [products, setProducts] = useState([]);
    const [categories, setCategories] = useState([]);
    const [allRecipes, setAllRecipes] = useState([]);
    const [departments, setDepartments] = useState([]);
    
    // UI Control State
    const [loading, setLoading] = useState(true);
    const [selectedProductId, setSelectedProductId] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [expandedCategories, setExpandedCategories] = useState({});
    
    // Form State for creating new items
    const [newProduct, setNewProduct] = useState({ name: '', partNumber: '', sellingPrice: '', categoryId: '', weight: '' });
    const [newCategoryName, setNewCategoryName] = useState('');
    
    // State for the currently selected product being edited
    const [editProductData, setEditProductData] = useState(null);
    
    // State for recipe links
    const [linkedRecipes, setLinkedRecipes] = useState([]);

    // Fetch all necessary data on component mount
    const fetchData = async () => {
        setLoading(true);
        try {
            const [prods, cats, recipes, depts] = await Promise.all([
                getProducts(), getProductCategories(), getJobStepDetails(), getDepartments()
            ]);
            setProducts(prods); 
            setCategories(cats); 
            setAllRecipes(recipes); 
            setDepartments(depts);
        } catch (error) { 
            console.error("Failed to fetch initial data:", error); 
        }
        setLoading(false);
    };

    useEffect(() => { fetchData(); }, []);

    // Effect to update form and fetch linked recipes when a product is selected
    useEffect(() => {
        if (selectedProductId) {
            const product = products.find(p => p.id === selectedProductId);
            setEditProductData(product);
            const fetchLinks = async () => setLinkedRecipes(await getLinkedRecipesForProduct(selectedProductId));
            fetchLinks();
        } else {
            setEditProductData(null);
            setLinkedRecipes([]);
        }
    }, [selectedProductId, products]);

    // Memoized calculation to filter and categorize products for display
    const productsByCategory = useMemo(() => {
        const filtered = searchTerm 
            ? products.filter(p => p.name.toLowerCase().includes(searchTerm.toLowerCase()) || p.partNumber?.toLowerCase().includes(searchTerm.toLowerCase()))
            : products;
        const categorized = categories.reduce((acc, category) => {
            acc[category.id] = filtered.filter(p => p.categoryId === category.id);
            return acc;
        }, {});
        categorized['uncategorized'] = filtered.filter(p => !p.categoryId);
        return categorized;
    }, [products, categories, searchTerm]);

    // Handlers for adding/updating/deleting data
    const handleAddNewCategory = async () => {
        if (!newCategoryName.trim()) return;
        await addProductCategory(newCategoryName);
        setNewCategoryName('');
        fetchData();
    };
    
    const handleAddNewProduct = async (e) => {
        e.preventDefault();
        if (!newProduct.name || !newProduct.partNumber || !newProduct.categoryId) return alert('Category, Product Name, and Part Number are required.');
        try {
            const productData = { ...newProduct, weight: Number(newProduct.weight) || 0 };
            await addProduct(productData);
            setNewProduct({ name: '', partNumber: '', sellingPrice: '', categoryId: '', weight: '' });
            fetchData();
        } catch (error) { alert(error.message); }
    };

    const handleUpdateProduct = async () => {
        if (!editProductData.name || !editProductData.partNumber) return alert('Product Name and Part Number are required.');
        await updateProduct(selectedProductId, {
            name: editProductData.name, 
            partNumber: editProductData.partNumber,
            sellingPrice: Number(editProductData.sellingPrice) || 0,
            photoUrl: editProductData.photoUrl || '',
            categoryId: editProductData.categoryId || '',
            weight: Number(editProductData.weight) || 0,
        });
        alert('Product updated successfully!');
        fetchData();
    };

    const handleDeleteProduct = async (productId) => {
        if (window.confirm("Are you sure you want to PERMANENTLY delete this product and all its recipes?")) {
            await deleteProduct(productId);
            setSelectedProductId(null);
            fetchData();
        }
    };
    
    if (loading) return <p className="text-gray-400">Loading Product Catalog...</p>;
    
    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-2xl font-bold text-white mb-6">Unified Product Catalog</h3>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/* Left Column: Product List and Creation Forms */}
                <div className="lg:col-span-1 space-y-6">
                    <div>
                        <Input placeholder="Search all products..." value={searchTerm} onChange={e => setSearchTerm(e.target.value)} className="mb-4" />
                        <div className="space-y-1 max-h-[30rem] overflow-y-auto pr-2">
                            {categories.map(category => (
                               <div key={category.id}>
                                    <div onClick={() => setExpandedCategories(p => ({...p, [category.id]: !p[category.id]}))} className="flex items-center justify-between p-3 rounded-lg bg-gray-700 cursor-pointer hover:bg-gray-600">
                                        <span className="font-semibold text-white">{category.name}</span>
                                        {expandedCategories[category.id] ? <ChevronDown/> : <ChevronRight/>}
                                    </div>
                                    {expandedCategories[category.id] && (
                                        <div className="pl-4 mt-1 space-y-1">
                                            {(productsByCategory[category.id] || []).map(p => (
                                                <div key={p.id} onClick={() => setSelectedProductId(p.id)} className={`p-2 rounded-md cursor-pointer ${selectedProductId === p.id ? 'bg-blue-600 text-white' : 'hover:bg-gray-900/50'}`}>
                                                    <p className="font-semibold">{p.name}</p>
                                                    <p className="text-xs opacity-70">Part #: {p.partNumber}</p>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </div>
                            ))}
                             {/* Uncategorized Products */}
                             {productsByCategory['uncategorized']?.length > 0 && (
                                <div>
                                     <div onClick={() => setExpandedCategories(p => ({...p, uncategorized: !p.uncategorized}))} className="flex items-center justify-between p-3 rounded-lg bg-gray-700 cursor-pointer hover:bg-gray-600">
                                        <span className="font-semibold text-white">Uncategorized</span>
                                        {expandedCategories.uncategorized ? <ChevronDown/> : <ChevronRight/>}
                                    </div>
                                    {expandedCategories.uncategorized && (
                                        <div className="pl-4 mt-1 space-y-1">
                                            {productsByCategory['uncategorized'].map(p => (
                                                 <div key={p.id} onClick={() => setSelectedProductId(p.id)} className={`p-2 rounded-md cursor-pointer ${selectedProductId === p.id ? 'bg-blue-600 text-white' : 'hover:bg-gray-900/50'}`}>
                                                    <p className="font-semibold">{p.name}</p>
                                                    <p className="text-xs opacity-70">Part #: {p.partNumber}</p>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </div>
                             )}
                        </div>
                    </div>
                    <div className="space-y-4 border-t border-gray-700 pt-6">
                        <h4 className="font-bold text-lg text-white">Add New Category</h4>
                        <div className="flex gap-2">
                            <Input placeholder="e.g., Fiberglass Panels" value={newCategoryName} onChange={e => setNewCategoryName(e.target.value)} />
                            <Button onClick={handleAddNewCategory}><FolderPlus size={16} /></Button>
                        </div>
                    </div>
                     <form onSubmit={handleAddNewProduct} className="space-y-4 border-t border-gray-700 pt-6">
                         <h4 className="font-bold text-lg text-white">Add New Product</h4>
                         <Dropdown label="Category" value={newProduct.categoryId} onChange={e => setNewProduct({...newProduct, categoryId: e.target.value})} options={categories} required/>
                         <Input label="Product Name" value={newProduct.name} onChange={e => setNewProduct({...newProduct, name: e.target.value})} required/>
                         <Input label="Part Number" value={newProduct.partNumber} onChange={e => setNewProduct({...newProduct, partNumber: e.target.value})} required/>
                         <Input label="Selling Price (R)" type="number" value={newProduct.sellingPrice} onChange={e => setNewProduct({...newProduct, sellingPrice: e.target.value})} />
                         <Input label="Weight (kg)" type="number" step="0.01" value={newProduct.weight} onChange={e => setNewProduct({...newProduct, weight: e.target.value})} />
                         <Button type="submit" variant="primary" className="w-full"><PackagePlus size={16} className="mr-2"/>Create New Product</Button>
                    </form>
                </div>

                {/* Right Column: Editor for Selected Product */}
                <div className="lg:col-span-2">
                     {!selectedProductId ? (
                        <div className="flex items-center justify-center h-full bg-gray-900/50 p-6 rounded-xl border-2 border-dashed border-gray-700 text-gray-500">
                            <p>Select a product from the list to view its details and associated manufacturing recipes.</p>
                        </div>
                     ) : (
                        <div className="bg-gray-900/50 p-6 rounded-xl">
                             <div className="flex justify-between items-center pb-4 mb-4 border-b border-gray-700">
                                <h3 className="text-2xl font-bold text-white">{editProductData?.name}</h3>
                                <Button onClick={() => handleDeleteProduct(selectedProductId)} variant="danger" size="sm" className="p-2"><Trash2 size={16}/></Button>
                            </div>
                            <div className="space-y-4">
                                <Dropdown label="Category" value={editProductData?.categoryId || ''} onChange={e => setEditProductData({...editProductData, categoryId: e.target.value})} options={categories} placeholder="Choose a category..."/>
                                <Input label="Product Name" value={editProductData?.name || ''} onChange={e => setEditProductData({...editProductData, name: e.target.value})} />
                                <Input label="Part Number" value={editProductData?.partNumber || ''} disabled />
                                <Input label="Selling Price (R)" type="number" value={editProductData?.sellingPrice || ''} onChange={e => setEditProductData({...editProductData, sellingPrice: e.target.value})} />
                                <Input label="Weight (kg)" type="number" step="0.01" value={editProductData?.weight || ''} onChange={e => setEditProductData({...editProductData, weight: e.target.value})} />
                                <Input label="Photo URL" value={editProductData?.photoUrl || ''} onChange={e => setEditProductData({...editProductData, photoUrl: e.target.value})} placeholder="Paste image link here..."/>
                                {editProductData?.photoUrl && <img src={editProductData.photoUrl} alt="Product Preview" className="w-48 h-48 rounded-lg object-cover border-2 border-gray-600" />}
                                <Button onClick={handleUpdateProduct}><Save size={16} className="mr-2"/> Save Details</Button>
                            </div>

                            {/* Linked Recipes Display */}
                            <div className="mt-6 pt-6 border-t border-gray-700">
                                <h4 className="text-xl font-bold text-white mb-4">Manufacturing Recipes</h4>
                                <p className="text-sm text-gray-400 mb-4">This product is manufactured using the recipes from the following departments. You can edit these recipes in the <span className="font-bold text-blue-400">Settings &gt; Products & Recipes</span> tab.</p>
                                <div className="space-y-2">
                                     {linkedRecipes.length > 0 ? (
                                        linkedRecipes.map(link => (
                                            <div key={link.id} className="flex items-center justify-between bg-gray-700/50 p-3 rounded-lg">
                                                <p className="font-semibold text-gray-200">{link.departmentName} Department</p>
                                            </div>
                                        ))
                                    ) : (
                                        <p className="text-sm text-gray-500 text-center py-4">No manufacturing recipes are defined for this product yet.</p>
                                    )}
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default UnifiedProductManager;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\settings\WorkshopSuppliesManager.jsx
==================================================
import React, { useState, useEffect } from 'react';
import { getWorkshopSupplies, addWorkshopSupply, deleteWorkshopSupply, getSuppliers, updateDocument } from '../../../api/firestore';
import Button from '../../ui/Button';
import Input from '../../ui/Input';
import Dropdown from '../../ui/Dropdown';

const WorkshopSuppliesManager = () => {
    const [supplies, setSupplies] = useState([]);
    const [suppliers, setSuppliers] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [formData, setFormData] = useState({
        name: '',
        itemCode: '',
        supplierId: '',
        price: '',
        unit: 'Each',
        currentStock: '',
        reorderLevel: '',
        standardStockLevel: '',
        // NEW: Add new fields to the form state
        countMethod: 'Quantity', // Default to Quantity
        containerWeight: '',
        unitWeight: '',
    });
    
    const fetchData = async () => {
        setIsLoading(true);
        const [fetchedSupplies, fetchedSuppliers] = await Promise.all([getWorkshopSupplies(), getSuppliers()]);
        setSupplies(fetchedSupplies);
        setSuppliers(fetchedSuppliers);
        setIsLoading(false);
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.name || !formData.supplierId) {
            alert("Please provide a name and select a supplier.");
            return;
        }
        try {
            await addWorkshopSupply(formData);
            alert('Supply added successfully!');
            setFormData({
                name: '', itemCode: '', supplierId: '', price: '', unit: 'Each',
                currentStock: '', reorderLevel: '', standardStockLevel: '',
                countMethod: 'Quantity', containerWeight: '', unitWeight: '' // Reset new fields
            });
            fetchData();
        } catch (error) {
            alert('Failed to add supply.');
            console.error(error);
        }
    };
    
    const handleUpdate = async (id, updatedData) => {
        try {
            await updateDocument('workshopSupplies', id, updatedData);
            fetchData();
        } catch (error) {
            console.error("Failed to update supply: ", error);
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm("Are you sure you want to delete this supply?")) {
            try {
                await deleteWorkshopSupply(id);
                alert('Supply deleted successfully!');
                fetchData();
            } catch (error) {
                alert('Failed to delete supply.');
                console.error(error);
            }
        }
    };

    if (isLoading) return <p>Loading supplies...</p>;

    return (
        <div className="space-y-6">
            <form onSubmit={handleSubmit} className="bg-gray-800 p-4 rounded-lg space-y-4">
                <h3 className="text-lg font-bold text-white">Add New Workshop Supply</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <Input name="name" label="Supply Name" value={formData.name} onChange={handleInputChange} placeholder="e.g., Sanding Discs" />
                    <Input name="itemCode" label="Item Code" value={formData.itemCode} onChange={handleInputChange} placeholder="e.g., SD-120" />
                    <Dropdown name="supplierId" label="Supplier" value={formData.supplierId} onChange={handleInputChange} options={suppliers} placeholder="Select Supplier" />
                    <Input name="price" label="Price" type="number" value={formData.price} onChange={handleInputChange} placeholder="e.g., 5.00" />
                    <Input name="unit" label="Unit of Measure" value={formData.unit} onChange={handleInputChange} placeholder="e.g., Box of 100" />
                    <Input name="currentStock" label="In Stock" type="number" value={formData.currentStock} onChange={handleInputChange} placeholder="e.g., 50" />
                    <Input name="reorderLevel" label="Re-order At" type="number" value={formData.reorderLevel} onChange={handleInputChange} placeholder="e.g., 10" />
                    <Input name="standardStockLevel" label="Standard Stock Level" type="number" value={formData.standardStockLevel} onChange={handleInputChange} placeholder="e.g., 60" />
                    
                    {/* NEW: Fields for Count Method */}
                    <Dropdown 
                        name="countMethod" 
                        label="Count Method" 
                        value={formData.countMethod} 
                        onChange={handleInputChange}
                    >
                        <option value="Quantity">Quantity</option>
                        <option value="Weight">Weight</option>
                    </Dropdown>
                    
                    {/* NEW: Conditional fields for Weight */}
                    {formData.countMethod === 'Weight' && (
                        <>
                            <Input name="containerWeight" label="Container Weight (g)" type="number" value={formData.containerWeight} onChange={handleInputChange} placeholder="e.g., 20" />
                            <Input name="unitWeight" label="Weight per Unit (g)" type="number" value={formData.unitWeight} onChange={handleInputChange} placeholder="e.g., 0.5" />
                        </>
                    )}
                </div>
                <Button type="submit" variant="primary">Add Supply</Button>
            </form>

            <div className="bg-gray-800 p-4 rounded-lg">
                 <h3 className="text-lg font-bold text-white mb-4">Existing Workshop Supplies</h3>
                <div className="overflow-x-auto">
                    <table className="w-full text-sm text-left">
                         <thead className="text-xs text-gray-400 uppercase bg-gray-700">
                            <tr>
                                <th className="p-2">Name</th>
                                <th className="p-2">Code</th>
                                <th className="p-2">In Stock</th>
                                <th className="p-2">Count Method</th>
                                <th className="p-2">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {supplies.map(supply => (
                                <EditableSupplyRow 
                                    key={supply.id} 
                                    supply={supply} 
                                    onUpdate={handleUpdate}
                                    onDelete={handleDelete} 
                                />
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

// A new sub-component to make the rows editable
const EditableSupplyRow = ({ supply, onUpdate, onDelete }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [editData, setEditData] = useState(supply);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setEditData(prev => ({ ...prev, [name]: value }));
    };

    const handleSave = () => {
        onUpdate(supply.id, editData);
        setIsEditing(false);
    };

    if (!isEditing) {
        return (
            <tr className="border-b border-gray-700">
                <td className="p-2 text-white">{supply.name}</td>
                <td className="p-2">{supply.itemCode}</td>
                <td className="p-2">{supply.currentStock}</td>
                <td className="p-2">{supply.countMethod || 'Quantity'}</td>
                <td className="p-2 flex gap-2">
                    <Button onClick={() => setIsEditing(true)} size="sm">Edit</Button>
                    <Button onClick={() => onDelete(supply.id)} variant="danger" size="sm">Delete</Button>
                </td>
            </tr>
        )
    }

    // Editing View
    return (
        <tr className="bg-gray-900">
            <td className="p-2"><Input name="name" value={editData.name} onChange={handleInputChange} /></td>
            <td className="p-2"><Input name="itemCode" value={editData.itemCode} onChange={handleInputChange} /></td>
            <td className="p-2"><Input name="currentStock" type="number" value={editData.currentStock} onChange={handleInputChange} /></td>
            <td className="p-2">
                <Dropdown name="countMethod" value={editData.countMethod} onChange={handleInputChange}>
                    <option value="Quantity">Quantity</option>
                    <option value="Weight">Weight</option>
                </Dropdown>
            </td>
            <td className="p-2 flex gap-2">
                <Button onClick={handleSave} variant="success" size="sm">Save</Button>
                <Button onClick={() => setIsEditing(false)} variant="secondary" size="sm">Cancel</Button>
            </td>
        </tr>
    );
}

export default WorkshopSuppliesManager;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\sidebar\CalculatorApplet.jsx
==================================================
import React, { useState } from 'react';

// Reusable button component for our calculator
const CalcButton = ({ onClick, children, className = '' }) => (
  <button 
    onClick={() => onClick(children)}
    className={`bg-gray-600 hover:bg-gray-500 text-white font-bold py-4 rounded-lg text-xl transition-colors ${className}`}
  >
    {children}
  </button>
);

const CalculatorApplet = () => {
  const [display, setDisplay] = useState('0');
  const [firstOperand, setFirstOperand] = useState(null);
  const [operator, setOperator] = useState(null);
  const [waitingForSecondOperand, setWaitingForSecondOperand] = useState(false);

  const handleDigitClick = (digit) => {
    if (waitingForSecondOperand) {
      setDisplay(String(digit));
      setWaitingForSecondOperand(false);
    } else {
      setDisplay(display === '0' ? String(digit) : display + digit);
    }
  };

  const handleDecimalClick = () => {
    if (!display.includes('.')) {
      setDisplay(display + '.');
    }
  };

  const handleOperatorClick = (nextOperator) => {
    const inputValue = parseFloat(display);

    if (operator && !waitingForSecondOperand) {
      const result = calculate(firstOperand, inputValue, operator);
      setDisplay(String(result));
      setFirstOperand(result);
    } else {
      setFirstOperand(inputValue);
    }

    setWaitingForSecondOperand(true);
    setOperator(nextOperator);
  };

  const calculate = (op1, op2, op) => {
    switch (op) {
      case '+': return op1 + op2;
      case '-': return op1 - op2;
      case 'Ã—': return op1 * op2;
      case 'Ã·': return op1 / op2;
      default: return op2;
    }
  };

  const handleEqualsClick = () => {
    const inputValue = parseFloat(display);
    if (operator && !waitingForSecondOperand) {
      const result = calculate(firstOperand, inputValue, operator);
      setDisplay(String(result));
      setFirstOperand(null);
      setOperator(null);
    }
  };

  const handleClearClick = () => {
    setDisplay('0');
    setFirstOperand(null);
    setOperator(null);
    setWaitingForSecondOperand(false);
  };

  return (
    <div className="p-2">
      {/* Display Screen */}
      <div className="bg-gray-900 text-white text-4xl text-right font-mono p-4 rounded-lg mb-2 overflow-x-auto">
        {display}
      </div>
      {/* Calculator Buttons */}
      <div className="grid grid-cols-4 gap-2">
        <CalcButton onClick={handleClearClick} className="col-span-2 bg-red-600 hover:bg-red-500">C</CalcButton>
        <CalcButton onClick={handleOperatorClick}>Ã·</CalcButton>
        <CalcButton onClick={handleOperatorClick}>Ã—</CalcButton>
        <CalcButton onClick={handleDigitClick}>7</CalcButton>
        <CalcButton onClick={handleDigitClick}>8</CalcButton>
        <CalcButton onClick={handleDigitClick}>9</CalcButton>
        <CalcButton onClick={handleOperatorClick}>-</CalcButton>
        <CalcButton onClick={handleDigitClick}>4</CalcButton>
        <CalcButton onClick={handleDigitClick}>5</CalcButton>
        <CalcButton onClick={handleDigitClick}>6</CalcButton>
        <CalcButton onClick={handleOperatorClick}>+</CalcButton>
        <CalcButton onClick={handleDigitClick}>1</CalcButton>
        <CalcButton onClick={handleDigitClick}>2</CalcButton>
        <CalcButton onClick={handleDigitClick}>3</CalcButton>
        <CalcButton onClick={handleEqualsClick} className="row-span-2 bg-blue-600 hover:bg-blue-500">=</CalcButton>
        <CalcButton onClick={handleDigitClick} className="col-span-2">0</CalcButton>
        <CalcButton onClick={handleDecimalClick}>.</CalcButton>
      </div>
    </div>
  );
};

export default CalculatorApplet;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\sidebar\CalendarApplet.jsx
==================================================
import React, { useState } from 'react';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';

const CalendarApplet = () => {
  const [date, setDate] = useState(new Date());

  return (
    <div className="p-2 text-white">
        {/* This style block helps the calendar theme match our dark mode app */}
        <style>{`
            .react-calendar { background: transparent; border: none; }
            .react-calendar__tile:enabled:hover, .react-calendar__tile:enabled:focus { background-color: #374151; }
            .react-calendar__tile--now { background-color: #3b82f6 !important; color: white !important; }
            .react-calendar__tile--active { background-color: #1d4ed8 !important; color: white !important; }
            .react-calendar__month-view__days__day--neighboringMonth { color: #6b7280 !important; }
        `}</style>
        <Calendar 
            onChange={setDate} 
            value={date} 
            className="bg-transparent border-none"
        />
    </div>
  );
};

export default CalendarApplet;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\sidebar\NotesApplet.jsx
==================================================
import React, { useState, useEffect } from 'react';

const NotesApplet = () => {
  // Load saved notes from localStorage or default to empty
  const [notes, setNotes] = useState(() => {
    const savedNotes = localStorage.getItem('tojemos-sidebar-notes');
    return savedNotes || '';
  });

  // This useEffect hook saves the notes to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('tojemos-sidebar-notes', notes);
  }, [notes]);

  return (
    <div className="p-2">
      <h4 className="font-bold text-gray-300 text-sm mb-2">Scratchpad</h4>
      <textarea
        value={notes}
        onChange={(e) => setNotes(e.target.value)}
        placeholder="Type your notes here..."
        className="w-full h-48 p-2 bg-gray-900 border border-gray-600 rounded-md text-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
      />
    </div>
  );
};

export default NotesApplet;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\sidebar\WeatherApplet.jsx
==================================================
import React, { useState, useEffect } from 'react';
import { Sun, Cloud, CloudRain, Wind, Thermometer, ArrowDown, ArrowUp } from 'lucide-react';
import Button from '../../ui/Button';

// A small component to display a single weather detail
const WeatherDetail = ({ icon, value, unit }) => (
    <div className="flex items-center text-sm text-gray-300">
        {icon}
        <span className="ml-2">{value}{unit}</span>
    </div>
);

const WeatherApplet = () => {
    const [weather, setWeather] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchWeather = async () => {
            // API URL for Cape Town's coordinates with the specific data we want
            const apiUrl = "https://api.open-meteo.com/v1/forecast?latitude=-33.92&longitude=18.42&daily=temperature_2m_max,temperature_2m_min,precipitation_probability_max,windspeed_10m_max&timezone=auto";
            
            try {
                const response = await fetch(apiUrl);
                const data = await response.json();
                // We only need today's data, which is the first item in the arrays
                setWeather({
                    maxTemp: Math.round(data.daily.temperature_2m_max[0]),
                    minTemp: Math.round(data.daily.temperature_2m_min[0]),
                    rainProb: data.daily.precipitation_probability_max[0],
                    windSpeed: Math.round(data.daily.windspeed_10m_max[0]),
                });
            } catch (error) {
                console.error("Failed to fetch weather data:", error);
            } finally {
                setLoading(false);
            }
        };

        fetchWeather();
    }, []);

    if (loading) {
        return <div className="p-2 text-sm text-gray-400">Loading Weather...</div>;
    }

    if (!weather) {
        return <div className="p-2 text-sm text-red-400">Could not load weather.</div>;
    }

    return (
        <div className="p-2 space-y-3">
            <div className="flex items-center justify-between">
                <div className="flex items-center">
                    <CloudRain size={32} className="text-blue-400" />
                    <div className="ml-3">
                        <p className="font-bold text-white">Cape Town</p>
                        <p className="text-xs text-gray-400">Today's Forecast</p>
                    </div>
                </div>
            </div>

            <div className="grid grid-cols-2 gap-3">
                <WeatherDetail icon={<ArrowUp size={16} className="text-red-400"/>} value={weather.maxTemp} unit="Â°C" />
                <WeatherDetail icon={<ArrowDown size={16} className="text-blue-400"/>} value={weather.minTemp} unit="Â°C" />
                <WeatherDetail icon={<CloudRain size={16} className="text-sky-300"/>} value={weather.rainProb} unit="%" />
                <WeatherDetail icon={<Wind size={16} className="text-gray-300"/>} value={weather.windSpeed} unit=" km/h" />
            </div>

            <a href="https://www.google.com/search?q=weather+cape+town" target="_blank" rel="noopener noreferrer">
                 <Button variant="secondary" className="w-full text-xs py-1">
                    View 7-Day Forecast
                 </Button>
            </a>
        </div>
    );
};

export default WeatherApplet;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\stock\FutureDemandAnalyzer.jsx
==================================================
// src/components/features/stock/FutureDemandAnalyzer.jsx (New File)

import React, { useState, useMemo } from 'react';
import { listenToJobCards, getAllInventoryItems } from '../../../api/firestore';
import Button from '../../ui/Button';
import Input from '../../ui/Input';
import { X, TrendingDown, Check, AlertTriangle } from 'lucide-react';

const FutureDemandAnalyzer = ({ onClose }) => {
    const [daysToAnalyze, setDaysToAnalyze] = useState(14);
    const [analysis, setAnalysis] = useState(null);
    const [loading, setLoading] = useState(false);

    const handleAnalyze = async () => {
        setLoading(true);
        setAnalysis(null);

        try {
            const allJobs = await new Promise(resolve => {
                const unsubscribe = listenToJobCards(jobs => {
                    unsubscribe();
                    resolve(jobs);
                });
            });

            const inventoryItems = await getAllInventoryItems();
            const inventoryMap = new Map(inventoryItems.map(item => [item.id, item]));

            const now = new Date();
            const futureDate = new Date();
            futureDate.setDate(now.getDate() + Number(daysToAnalyze));

            const scheduledJobs = allJobs.filter(job => {
                const scheduled = job.scheduledDate?.toDate();
                return scheduled && scheduled >= now && scheduled <= futureDate;
            });

            const requiredMaterials = new Map();

            for (const job of scheduledJobs) {
                const consumables = job.processedConsumables || [];
                for (const consumable of consumables) {
                    const requiredQty = requiredMaterials.get(consumable.id) || 0;
                    requiredMaterials.set(consumable.id, requiredQty + consumable.quantity);
                }
            }

            const analysisResults = [];
            for (const [itemId, futureDemand] of requiredMaterials.entries()) {
                const item = inventoryMap.get(itemId);
                if (item) {
                    const projectedStock = (item.currentStock || 0) - futureDemand;
                    analysisResults.push({
                        ...item,
                        futureDemand,
                        projectedStock,
                    });
                }
            }

            analysisResults.sort((a,b) => a.projectedStock - b.projectedStock);
            setAnalysis(analysisResults);

        } catch (error) {
            console.error("Error analyzing future demand:", error);
            alert("Failed to analyze demand. See console for details.");
        }
        setLoading(false);
    };

    return (
        <div onClick={onClose} className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4 animate-fade-in">
            <div onClick={(e) => e.stopPropagation()} className="bg-gray-800 rounded-xl border border-gray-700 w-full max-w-4xl max-h-[90vh] flex flex-col">
                <div className="flex justify-between items-center p-4 border-b border-gray-700">
                    <h2 className="text-xl font-bold text-white">Predictive Inventory Analyzer</h2>
                    <Button onClick={onClose} variant="secondary" className="p-2"><X size={20} /></Button>
                </div>

                <div className="p-4 bg-gray-900/50 border-b border-gray-700 flex items-end gap-4">
                    <div className="w-48">
                        <Input
                            label="Days to Analyze"
                            type="number"
                            value={daysToAnalyze}
                            onChange={e => setDaysToAnalyze(e.target.value)}
                        />
                    </div>
                    <Button onClick={handleAnalyze} disabled={loading}>
                        {loading ? 'Analyzing...' : 'Analyze Future Demand'}
                    </Button>
                </div>

                <div className="p-6 overflow-y-auto">
                    {!analysis && <p className="text-center text-gray-500">Enter the number of days you want to forecast and click "Analyze".</p>}
                    {analysis && (
                        <table className="w-full text-left text-sm">
                            <thead>
                                <tr className="border-b border-gray-600">
                                    <th className="p-2">Item</th>
                                    <th className="p-2 text-center">Current</th>
                                    <th className="p-2 text-center">Required</th>
                                    <th className="p-2 text-center">Projected</th>
                                    <th className="p-2">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                {analysis.map(item => {
                                    const isCritical = item.projectedStock < 0;
                                    const isLow = item.projectedStock >= 0 && item.projectedStock < item.reorderLevel;
                                    return (
                                        <tr key={item.id} className="border-b border-gray-700">
                                            <td className="p-2 font-semibold text-white">{item.name}</td>
                                            <td className="p-2 text-gray-300 text-center">{item.currentStock}</td>
                                            <td className="p-2 text-blue-400 text-center">{item.futureDemand.toFixed(2)}</td>
                                            <td className={`p-2 font-bold text-center ${isCritical ? 'text-red-500' : isLow ? 'text-yellow-400' : 'text-white'}`}>
                                                {item.projectedStock.toFixed(2)}
                                            </td>
                                            <td className="p-2">
                                                {isCritical && <span className="flex items-center gap-1 text-red-500"><TrendingDown size={14}/> Critical</span>}
                                                {isLow && <span className="flex items-center gap-1 text-yellow-400"><AlertTriangle size={14}/> Low</span>}
                                                {!isCritical && !isLow && <span className="flex items-center gap-1 text-green-400"><Check size={14}/> OK</span>}
                                            </td>
                                        </tr>
                                    );
                                })}
                            </tbody>
                        </table>
                    )}
                </div>
            </div>
        </div>
    );
};

export default FutureDemandAnalyzer;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\stock\InTransitOrders.jsx
==================================================
import React, { useState } from 'react';
import { receiveStockAndUpdateInventory, requeueOrDeleteItem } from '../../../api/firestore';
import Button from '../../ui/Button';

const InTransitOrders = ({ items, suppliers, onStockReceived }) => {
  const [receivedQuantities, setReceivedQuantities] = useState({});

  const getSupplierName = (supplierId) => (suppliers || []).find(s => s.id === supplierId)?.name || 'N/A';
  
  const handleQuantityChange = (itemId, qty) => {
    setReceivedQuantities(prev => ({ ...prev, [itemId]: qty }));
  };

  const handleReceiveStock = async (item) => {
    const qtyReceived = receivedQuantities[item.id] || item.orderedQty;
    if (!qtyReceived || qtyReceived <= 0) {
      return alert("Please enter a valid quantity received.");
    }
    if (!window.confirm(`Are you sure you want to add ${qtyReceived} of ${item.itemName} to your stock?`)) {
      return;
    }
    try {
      await receiveStockAndUpdateInventory(item, qtyReceived);
      alert("Stock updated successfully!");
      if (onStockReceived) onStockReceived();
    } catch (error) {
      console.error("Error receiving stock: ", error);
      alert("Failed to update stock. Please check the console for details.");
    }
  };

  const handleCancelOrder = async (item) => {
    if (window.confirm(`Are you sure you want to cancel this in-transit order for "${item.itemName}"? This may add it back to the purchase queue.`)) {
        try {
            await requeueOrDeleteItem(item);
            alert("Order cancelled successfully.");
            if (onStockReceived) onStockReceived();
        } catch (error) {
            console.error("Error cancelling order:", error);
            alert("Failed to cancel order.");
        }
    }
  };
  
  const calculateEta = (etaTimestamp) => {
    if (!etaTimestamp?.seconds) return { text: 'N/A', color: 'text-gray-400' };
    const etaDate = new Date(etaTimestamp.seconds * 1000);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const diffTime = etaDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays < 0) return { text: `Overdue by ${Math.abs(diffDays)} day(s)`, color: 'text-red-500 font-bold' };
    if (diffDays === 0) return { text: 'Arriving Today', color: 'text-yellow-400 font-bold' };
    if (diffDays === 1) return { text: 'Arriving Tomorrow', color: 'text-blue-400' };
    return { text: `Arriving in ${diffDays} days`, color: 'text-gray-300' };
  };

  return (
    <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
        <h3 className="text-xl font-bold text-white mb-4">In-Transit Orders</h3>
        <div className="overflow-x-auto">
            <table className="w-full text-left">
              <thead>
                <tr className="border-b border-gray-600">
                  <th className="p-2 text-sm font-semibold text-gray-400">Item</th>
                  <th className="p-2 text-sm font-semibold text-gray-400">Supplier</th>
                  <th className="p-2 text-sm font-semibold text-gray-400 text-center">Qty Ordered</th>
                  <th className="p-2 text-sm font-semibold text-gray-400">ETA</th>
                  <th className="p-2 text-sm font-semibold text-gray-400 w-32">Qty Received</th>
                  <th className="p-2 text-sm font-semibold text-gray-400">Actions</th>
                </tr>
              </thead>
              <tbody>
                {(items || []).map(item => {
                    const eta = calculateEta(item.expectedArrivalDate);
                    return(
                        <tr key={item.id} className="border-b border-gray-700">
                          <td className="p-2 text-gray-200">{item.itemName}</td>
                          <td className="p-2 text-gray-400">{getSupplierName(item.supplierId)}</td>
                          <td className="p-2 text-gray-300 font-bold text-center">{item.orderedQty}</td>
                          <td className={`p-2 text-sm ${eta.color}`}>{eta.text}</td>
                          <td className="p-2">
                            {/* --- THIS IS THE CORRECTED PART --- */}
                            <input 
                                type="number" 
                                value={receivedQuantities[item.id] || item.orderedQty}
                                onChange={(e) => handleQuantityChange(item.id, e.target.value)}
                                className="w-full p-2 bg-gray-700 border border-gray-600 rounded-lg text-white text-center focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                          </td>
                          <td className="p-2 flex gap-2">
                            <Button variant="success" className="text-xs py-1 px-2" onClick={() => handleReceiveStock(item)}>Receive</Button>
                            <Button variant="danger" className="text-xs py-1 px-2" onClick={() => handleCancelOrder(item)}>Cancel</Button>
                          </td>
                        </tr>
                    )
                })}
              </tbody>
            </table>
            {items.length === 0 && <p className="text-center p-8 text-gray-400">No items are currently on order.</p>}
        </div>
    </div>
  );
};

export default InTransitOrders;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\stock\PurchaseQueue.jsx
==================================================
// src/components/features/stock/PurchaseQueue.jsx (Upgraded for Dynamic Supplier Quoting)

import React, { useState, useEffect, useMemo } from 'react';
import { getPurchaseQueue, getSuppliers, markItemsAsOrdered, getSupplierPricingForItem } from '../../../api/firestore';
import Button from '../../ui/Button';
import { ThumbsUp, Tag } from 'lucide-react';
import Input from '../../ui/Input';

const PurchaseQueue = ({ onOrderPlaced }) => {
  const [queuedItems, setQueuedItems] = useState([]);
  const [suppliers, setSuppliers] = useState([]);
  const [allPricing, setAllPricing] = useState({});
  const [orderQuantities, setOrderQuantities] = useState({});
  const [selectedSuppliers, setSelectedSuppliers] = useState({});
  const [loading, setLoading] = useState(true);

  const fetchData = async () => {
    setLoading(true);
    const [queue, supplierList] = await Promise.all([getPurchaseQueue(), getSuppliers()]);
    const pendingItems = queue.filter(item => item.status === 'pending');
    setQueuedItems(pendingItems);
    setSuppliers(supplierList);

    // Fetch all pricing info for all queued items
    const pricingMap = {};
    const pricingPromises = pendingItems.map(async (item) => {
      const prices = await getSupplierPricingForItem(item.itemId);
      pricingMap[item.itemId] = prices;
    });
    await Promise.all(pricingPromises);
    setAllPricing(pricingMap);

    // Pre-select the cheapest supplier for each item
    const initialSelections = {};
    pendingItems.forEach(item => {
        const prices = pricingMap[item.itemId] || [];
        if (prices.length > 0) {
            const cheapest = prices.reduce((min, p) => p.price < min.price ? p : min, prices[0]);
            initialSelections[item.itemId] = cheapest.supplierId;
        }
    });
    setSelectedSuppliers(initialSelections);

    setLoading(false);
  };

  useEffect(() => {
    fetchData();
  }, []);

  const handleQuantityChange = (itemId, qty) => {
    setOrderQuantities(prev => ({ ...prev, [itemId]: qty }));
  };

  const handleSupplierSelection = (itemId, supplierId) => {
    setSelectedSuppliers(prev => ({...prev, [itemId]: supplierId}));
  };

  // Group items by the *currently selected* supplier
  const groupedBySelectedSupplier = useMemo(() => {
    const groups = {};
    queuedItems.forEach(item => {
      const selectedSupplierId = selectedSuppliers[item.itemId];
      if (!selectedSupplierId) return; // Skip if no supplier is selected for this item

      if (!groups[selectedSupplierId]) {
        const supplierDetails = suppliers.find(s => s.id === selectedSupplierId);
        if(supplierDetails) {
            groups[selectedSupplierId] = { supplierDetails: supplierDetails, items: [] };
        }
      }
      if(groups[selectedSupplierId]) {
        groups[selectedSupplierId].items.push(item);
      }
    });
    return Object.values(groups).sort((a, b) => a.supplierDetails.name.localeCompare(b.supplierDetails.name));
  }, [queuedItems, suppliers, selectedSuppliers]);

  const handleGenerateEmail = (group) => {
    const supplierEmail = group.supplierDetails.email || '';
    const subject = encodeURIComponent(`Purchase Order - TOJEM`);
    let body = `Hi ${group.supplierDetails.contactPerson || group.supplierDetails.name},\n\nPlease supply the following items:\n\n`;
    
    group.items.forEach(item => {
      const recommendedQty = Math.max(0, (item.standardStockLevel || 0) - (item.currentStock || 0));
      const orderQty = orderQuantities[item.id] || recommendedQty;
      if (orderQty > 0) {
        body += `- ${item.itemName} (Code: ${item.itemCode || 'N/A'}) --- Qty: ${orderQty}\n`;
      }
    });

    body += `\nThank you,\nTojem`;
    const encodedBody = encodeURIComponent(body);
    window.location.href = `mailto:${supplierEmail}?subject=${subject}&body=${encodedBody}`;

    markItemsAsOrdered(group.supplierDetails, group.items, orderQuantities).then(() => {
        alert("Items have been marked as ordered and removed from the queue.");
        fetchData();
        if(onOrderPlaced) onOrderPlaced();
    });
  };
  
  const getItemPricingOptions = (itemId) => {
      return allPricing[itemId] || [];
  };

  if (loading) return <p className="text-center text-gray-400">Loading purchase queue...</p>;

  return (
    <div className="space-y-6">
      {queuedItems.length === 0 && <div className="bg-gray-800 p-8 rounded-xl border border-gray-700 text-center text-gray-400">Your purchase queue is empty.</div>}
      
      {/* Items to be ordered, now listed individually */}
       {queuedItems.length > 0 && (
            <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
                <h3 className="text-xl font-bold text-white mb-4">Items Requiring Purchase</h3>
                <div className="space-y-4">
                    {queuedItems.map(item => {
                        const pricingOptions = getItemPricingOptions(item.itemId);
                        const cheapestOption = pricingOptions.length > 0 ? pricingOptions.reduce((min, p) => p.price < min.price ? p : min) : null;
                        const recommendedQty = Math.max(0, (item.standardStockLevel || 0) - (item.currentStock || 0));
                        return (
                            <div key={item.id} className="grid grid-cols-1 lg:grid-cols-4 gap-4 items-center bg-gray-900/50 p-4 rounded-lg">
                                <div>
                                    <p className="font-semibold text-white">{item.itemName}</p>
                                    <p className="text-xs text-gray-400">{item.itemCode || 'No Code'}</p>
                                </div>
                                <div>
                                    <label className="text-xs text-gray-400 block mb-1">Select Supplier</label>
                                    <select 
                                        value={selectedSuppliers[item.itemId] || ''}
                                        onChange={(e) => handleSupplierSelection(item.itemId, e.target.value)}
                                        className="w-full p-2 bg-gray-700 border border-gray-600 rounded-lg text-white text-sm"
                                    >
                                        <option value="" disabled>Choose...</option>
                                        {pricingOptions.map(p => (
                                            <option key={p.id} value={p.supplierId}>
                                                {p.supplierName} - R{p.price.toFixed(2)} {p.supplierId === cheapestOption?.supplierId ? ' (Best Price)' : ''}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                                <div>
                                    <p className="text-xs text-gray-400 text-center">Current: {item.currentStock}</p>
                                    <p className="text-xs text-green-400 text-center">Recommended to order: {recommendedQty}</p>
                                </div>
                                <div>
                                    <Input 
                                        label="Order Qty"
                                        type="number"
                                        value={orderQuantities[item.id] || recommendedQty}
                                        onChange={(e) => handleQuantityChange(item.id, e.target.value)}
                                    />
                                </div>
                            </div>
                        );
                    })}
                </div>
            </div>
        )}

      {/* Grouped orders ready to be generated */}
      {groupedBySelectedSupplier.map(({ supplierDetails, items }) => (
        <div key={supplierDetails.id} className="bg-blue-900/20 p-6 rounded-xl border border-blue-500/50">
          <div className="flex justify-between items-center mb-4">
            <div>
              <h3 className="text-xl font-bold text-white flex items-center gap-2"><ThumbsUp/> Order for: {supplierDetails.name}</h3>
              <p className="text-sm text-gray-400">{supplierDetails.email}</p>
            </div>
            <Button onClick={() => handleGenerateEmail({ supplierDetails, items })}>Generate Email & Mark as Ordered</Button>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full text-left text-sm">
              <thead className="border-b border-blue-400/30">
                <tr>
                  <th className="p-2 font-semibold text-gray-300">Item</th>
                  <th className="p-2 font-semibold text-gray-300 text-center">Order Qty</th>
                  <th className="p-2 font-semibold text-gray-300 text-right">Price</th>
                </tr>
              </thead>
              <tbody>
                {items.map(item => {
                    const pricing = allPricing[item.itemId]?.find(p => p.supplierId === supplierDetails.id);
                    const orderQty = orderQuantities[item.id] || Math.max(0, (item.standardStockLevel || 0) - (item.currentStock || 0));
                  return (
                    <tr key={item.id} className="border-b border-blue-400/20">
                      <td className="p-2 text-gray-200">{item.itemName}</td>
                      <td className="p-2 text-white font-bold text-center">{orderQty}</td>
                      <td className="p-2 text-green-400 font-mono text-right">R {pricing ? pricing.price.toFixed(2) : 'N/A'}</td>
                    </tr>
                  )
                })}
              </tbody>
            </table>
          </div>
        </div>
      ))}
    </div>
  );
};

export default PurchaseQueue;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\stock\StockControlDashboard.jsx
==================================================
import React, { useState, useEffect, useMemo } from 'react';
import { getAllInventoryItems, getSuppliers, getPurchaseQueue, addToPurchaseQueue } from '../../../api/firestore';
import Input from '../../ui/Input';
import Button from '../../ui/Button';
import { Search } from 'lucide-react';

const StockLevelIndicator = ({ currentStock, reorderLevel, standardStockLevel }) => {
    const stock = Number(currentStock);
    const reorder = Number(reorderLevel);
    const standard = Number(standardStockLevel);
    if (isNaN(stock) || isNaN(reorder) || isNaN(standard) || standard <= reorder) return <div className="text-xs text-gray-500 italic">Not tracked</div>;
    const isLowStock = stock < reorder;
    const range = standard - reorder;
    const stockInRange = stock - reorder;
    const percentage = Math.max(0, Math.min((stockInRange / range) * 100, 100));
    return (
        <div className="w-full">
            <div className="flex justify-between text-xs mb-1">
                <span className="font-semibold text-gray-300">{stock} / {standard}</span>
                <span className={`font-bold ${isLowStock ? 'text-red-400' : 'text-green-400'}`}>{isLowStock ? `Low (Reorder at ${reorder})` : 'In Stock'}</span>
            </div>
            <div className="w-full bg-gray-600 rounded-full h-2"><div className={`h-2 rounded-full ${isLowStock ? 'bg-red-500' : 'bg-green-500'}`} style={{ width: `${percentage}%` }}></div></div>
        </div>
    );
};

const StockControlDashboard = () => {
  const [allItems, setAllItems] = useState([]);
  const [suppliers, setSuppliers] = useState([]);
  const [queuedItemIds, setQueuedItemIds] = useState(new Set());
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortBy, setSortBy] = useState('name-asc');
  const [showLowStock, setShowLowStock] = useState(false);

  const fetchData = async () => {
    setLoading(true);
    const [inventory, supplierList, queue] = await Promise.all([getAllInventoryItems(), getSuppliers(), getPurchaseQueue()]);
    setAllItems(inventory);
    setSuppliers(supplierList);
    setQueuedItemIds(new Set(queue.map(item => item.itemId)));
    setLoading(false);
  };

  useEffect(() => { fetchData(); }, []);

  const getSupplierName = (supplierId) => (suppliers || []).find(s => s.id === supplierId)?.name || 'N/A';

  const displayedItems = useMemo(() => {
    let filtered = [...(allItems || [])];
    if (showLowStock) { filtered = filtered.filter(item => Number(item.currentStock) < Number(item.reorderLevel)); }
    if (searchTerm) { filtered = filtered.filter(item => item.name.toLowerCase().includes(searchTerm.toLowerCase())); }
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'name-asc': return a.name.localeCompare(b.name);
        case 'supplier': return getSupplierName(a.supplierId).localeCompare(getSupplierName(b.supplierId));
        case 'stock-low-high': return (a.currentStock / a.reorderLevel) - (b.currentStock / b.reorderLevel);
        default: return 0;
      }
    });
    return filtered;
  }, [allItems, searchTerm, sortBy, showLowStock, suppliers]);

  const handleAddToQueue = async (item) => {
    try {
      await addToPurchaseQueue({
        itemId: item.id,
        itemName: item.name,
        supplierId: item.supplierId,
        itemCode: item.itemCode || '',
        category: item.category,
        currentStock: item.currentStock,
        reorderLevel: item.reorderLevel,
        standardStockLevel: item.standardStockLevel,
        price: item.price,
        unit: item.unit
      });
      setQueuedItemIds(prev => new Set(prev).add(item.id));
    } catch (error) {
      console.error("Error adding to queue:", error);
      alert("Failed to add to reorder list.");
    }
  };

  if (loading) return <p className="text-center text-gray-400">Loading all inventory...</p>;

  return (
    <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
      <div className="flex flex-wrap gap-4 items-center mb-4 p-4 bg-gray-900/50 rounded-lg">
          <div className="relative flex-grow">
            <Input placeholder="Search all inventory..." value={searchTerm} onChange={e => setSearchTerm(e.target.value)} />
            <Search className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
          </div>
          <div>
            <select value={sortBy} onChange={e => setSortBy(e.target.value)} className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white">
              <option value="name-asc">Sort by Name</option>
              <option value="supplier">Sort by Supplier</option>
              <option value="stock-low-high">Sort by Stock Level</option>
            </select>
          </div>
          <div className="flex items-center space-x-2 text-white">
            <input type="checkbox" id="lowStockToggle" checked={showLowStock} onChange={e => setShowLowStock(e.target.checked)} className="h-5 w-5 rounded bg-gray-700 text-blue-600 focus:ring-blue-500" />
            <label htmlFor="lowStockToggle" className="text-sm font-medium">Show only low stock</label>
          </div>
      </div>
      <div className="overflow-x-auto">
        <table className="w-full text-left">
          <thead>
            <tr className="border-b border-gray-600">
              <th className="p-3 text-sm font-semibold text-gray-400">Item Name</th>
              <th className="p-3 text-sm font-semibold text-gray-400">Category</th>
              <th className="p-3 text-sm font-semibold text-gray-400">Supplier</th>
              <th className="p-3 text-sm font-semibold text-gray-400 w-1/4">Stock Level</th>
              <th className="p-3 text-sm font-semibold text-gray-400">Actions</th>
            </tr>
          </thead>
          <tbody>
            {(displayedItems).map(item => {
              const isQueued = queuedItemIds.has(item.id);
              return (
                // --- THIS IS THE CORRECTED LINE ---
                <tr key={`${item.id}-${item.category}`} className="border-b border-gray-700 hover:bg-gray-700/50">
                  <td className="p-3 text-gray-200 font-semibold">{item.name}</td>
                  <td className="p-3 text-gray-400">{item.category}</td>
                  <td className="p-3 text-gray-400">{getSupplierName(item.supplierId)}</td>
                  <td className="p-3">
                    <StockLevelIndicator 
                        currentStock={item.currentStock} 
                        reorderLevel={item.reorderLevel} 
                        standardStockLevel={item.standardStockLevel} 
                    />
                  </td>
                  <td className="p-3">
                    {isQueued ? (
                      <Button variant="success" disabled={true} className="text-xs">Queued</Button>
                    ) : (
                      <Button variant="primary" onClick={() => handleAddToQueue(item)} className="text-xs">Add to Queue</Button>
                    )}
                  </td>
                </tr>
              )
            })}
          </tbody>
        </table>
        {displayedItems.length === 0 && !loading && <p className="text-center p-8 text-gray-400">No inventory items found.</p>}
      </div>
    </div>
  );
};

export default StockControlDashboard;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\stock\StockTakeComponents.jsx
==================================================
// src/components/features/stock/StockTakeComponents.jsx (Corrected)

import React from 'react';
import Input from '../../ui/Input';
import { CheckCircle, AlertCircle, XCircle } from 'lucide-react';

// REMOVED: The incorrect import for 'reconcileStockLevels' was here. This component should not call the API.

export const Summary = ({ data }) => {
    return (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-gray-800 p-4 rounded-lg border border-gray-700">
                <h4 className="text-sm text-gray-400 font-medium">Total Items</h4>
                <p className="text-2xl font-bold text-white">{data.totalItems}</p>
            </div>
            <div className="bg-gray-800 p-4 rounded-lg border border-gray-700">
                <h4 className="text-sm text-gray-400 font-medium flex items-center gap-1"><CheckCircle size={16} className="text-green-500" />Counted</h4>
                <p className="text-2xl font-bold text-white">{data.counted}</p>
            </div>
            <div className="bg-gray-800 p-4 rounded-lg border border-gray-700">
                <h4 className="text-sm text-gray-400 font-medium flex items-center gap-1"><XCircle size={16} className="text-yellow-500" />Uncounted</h4>
                <p className="text-2xl font-bold text-white">{data.uncounted}</p>
            </div>
            <div className="bg-gray-800 p-4 rounded-lg border border-gray-700">
                <h4 className="text-sm text-gray-400 font-medium flex items-center gap-1"><AlertCircle size={16} className="text-red-500" />Discrepancies</h4>
                <p className="text-2xl font-bold text-white">{data.discrepancies}</p>
            </div>
        </div>
    );
};

export const StockCountList = ({ items, onCountChange }) => {
    return (
        <div className="bg-gray-800 rounded-lg border border-gray-700 overflow-hidden">
            <div className="overflow-x-auto">
                <table className="w-full text-left">
                    <thead className="bg-gray-900/50">
                        <tr>
                            <th className="p-3 text-sm font-semibold text-gray-400">Item Name</th>
                            <th className="p-3 text-sm font-semibold text-gray-400">Item Code</th>
                            <th className="p-3 text-sm font-semibold text-gray-400 text-center">System Count</th>
                            <th className="p-3 text-sm font-semibold text-gray-400 text-center w-48">Physical Count</th>
                            <th className="p-3 text-sm font-semibold text-gray-400 text-center">Variance</th>
                        </tr>
                    </thead>
                    <tbody>
                        {items.map(item => (
                            <tr key={item.id} className="border-t border-gray-700 hover:bg-gray-700/50">
                                <td className="p-2 text-white font-medium">{item.name}</td>
                                <td className="p-2 text-gray-400 font-mono">{item.itemCode || 'N/A'}</td>
                                <td className="p-2 text-gray-300 font-mono text-center">{item.systemCount}</td>
                                <td className="p-2">
                                    <Input
                                        type="number"
                                        value={item.physicalCount}
                                        onChange={(e) => onCountChange(item.id, e.target.value)}
                                        className="text-center bg-gray-900"
                                        placeholder="Enter count..."
                                    />
                                </td>
                                <td className={`p-2 font-bold text-lg font-mono text-center ${item.variance > 0 ? 'text-green-400' : item.variance < 0 ? 'text-red-400' : 'text-gray-500'}`}>
                                    {item.hasBeenCounted ? (item.variance > 0 ? `+${item.variance}` : item.variance) : '-'}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
};


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\tracking\JobDetailsModal.jsx
==================================================
// src/components/features/tracking/JobDetailsModal.jsx (Fully Expanded & Corrected)

import React, { useState, useEffect, useMemo, useRef } from 'react';
import Button from '../../ui/Button';
import Input from '../../ui/Input';
import Textarea from '../../ui/Textarea';
import Dropdown from '../../ui/Dropdown';
import { Search, X, CheckCircle2, DollarSign, Clock, Zap, Edit, Trash2, Save, XCircle, Award } from 'lucide-react';
import { processConsumables, calculateJobDuration } from '../../../utils/jobUtils';
import { useAuth } from '../../../contexts/AuthContext';
import { giveKudosToJob } from '../../../api/firestore';

const ConsumableEditorInModal = ({ allConsumables, selectedConsumables, onAdd, onRemove }) => {
    const [consumableType, setConsumableType] = useState('fixed');
    const [fixedSearchTerm, setFixedSearchTerm] = useState('');
    const [fixedQty, setFixedQty] = useState('');
    const [filteredFixedOptions, setFilteredFixedOptions] = useState([]);
    const [selectedFixedItemDetails, setSelectedFixedItemDetails] = useState(null);
    const [dimSearchTerm, setDimSearchTerm] = useState('');
    const [cuts, setCuts] = useState([]);
    const [cutRule, setCutRule] = useState({ dimensions: '', notes: '' });
    const [filteredDimOptions, setFilteredDimOptions] = useState([]);
    const [selectedDimItemDetails, setSelectedDimItemDetails] = useState(null);
    const searchRefFixed = useRef(null);
    const searchRefDim = useRef(null);

    useEffect(() => {
        if (fixedSearchTerm.length > 0) {
            const lowerCaseSearchTerm = fixedSearchTerm.toLowerCase();
            const filtered = allConsumables.filter(item =>
                item.name.toLowerCase().includes(lowerCaseSearchTerm) ||
                (item.itemCode && item.itemCode.toLowerCase().includes(lowerCaseSearchTerm))
            ).slice(0, 10);
            setFilteredFixedOptions(filtered);
        } else { setFilteredFixedOptions([]); }
    }, [fixedSearchTerm, allConsumables]);
    useEffect(() => {
        if (dimSearchTerm.length > 0) {
            const lowerCaseSearchTerm = dimSearchTerm.toLowerCase();
            const filtered = allConsumables.filter(item =>
                (item.category === 'Raw Material' || item.name.toLowerCase().includes('mat')) &&
                (item.name.toLowerCase().includes(lowerCaseSearchTerm) ||
                (item.itemCode && item.itemCode.toLowerCase().includes(lowerCaseSearchTerm)))
            ).slice(0, 10);
            setFilteredDimOptions(filtered);
        } else { setFilteredDimOptions([]); }
    }, [dimSearchTerm, allConsumables]);
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (searchRefFixed.current && !searchRefFixed.current.contains(event.target)) { setFilteredFixedOptions([]); }
            if (searchRefDim.current && !searchRefDim.current.contains(event.target)) { setFilteredDimOptions([]); }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    const handleAddConsumable = () => {
        let newConsumable;
        let itemToAddDetails;
        if (consumableType === 'fixed') {
            if (!selectedFixedItemDetails || !fixedQty || parseFloat(fixedQty) <= 0) return alert("Please select an item and enter a valid quantity.");
            itemToAddDetails = selectedFixedItemDetails;
            newConsumable = { type: 'fixed', itemId: itemToAddDetails.id, quantity: Number(fixedQty) };
        } else if (consumableType === 'dimensional') {
            if (!selectedDimItemDetails || cuts.length === 0) return alert("Please select a material and add at least one cutting instruction.");
            itemToAddDetails = selectedDimItemDetails;
            newConsumable = { type: 'dimensional', itemId: itemToAddDetails.id, cuts };
        } else {
            return;
        }
        const consumableWithDetails = {
            ...newConsumable,
            name: itemToAddDetails.name,
            unit: itemToAddDetails.unit || 'units',
            price: itemToAddDetails.price || 0,
            itemCode: itemToAddDetails.itemCode || '',
            category: itemToAddDetails.category || '',
            requiresCatalyst: itemToAddDetails.requiresCatalyst || false,
        };
        if (!selectedConsumables.find(c => c.itemId === consumableWithDetails.itemId)) {
            onAdd(consumableWithDetails);
            setFixedSearchTerm(''); setFixedQty(''); setSelectedFixedItemDetails(null);
            setDimSearchTerm(''); setCuts([]); setCutRule({ dimensions: '', notes: '' }); setSelectedDimItemDetails(null);
        } else {
            alert("This consumable has already been added to the recipe.");
        }
    };

    return (
        <div>
            <h5 className="font-semibold mb-2 text-gray-200">Required Consumables</h5>
            <div className="p-4 bg-gray-900/50 rounded-lg space-y-4">
                <div className="flex gap-2 bg-gray-800 p-1 rounded-md">
                    <button type="button" onClick={() => setConsumableType('fixed')} className={`flex-1 p-2 text-sm rounded transition-colors ${consumableType === 'fixed' ? 'bg-blue-600 text-white' : 'hover:bg-blue-500/20'}`}>Fixed Quantity</button>
                    <button type="button" onClick={() => setConsumableType('dimensional')} className={`flex-1 p-2 text-sm rounded transition-colors ${consumableType === 'dimensional' ? 'bg-blue-600 text-white' : 'hover:bg-blue-500/20'}`}>Dimensional Cuts</button>
                </div>
                {consumableType === 'fixed' && (
                    <div className="flex items-end gap-2 animate-fade-in" ref={searchRefFixed}>
                        <div className="flex-grow relative">
                            <Input
                                label="Item"
                                value={fixedSearchTerm}
                                onChange={e => { setFixedSearchTerm(e.target.value); setSelectedFixedItemDetails(null); }}
                                placeholder="Search by name or code..."
                            />
                            <Search className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
                            {filteredFixedOptions.length > 0 && (
                                <ul className="absolute z-10 bg-gray-700 border border-gray-600 rounded-md w-full mt-1 max-h-48 overflow-y-auto shadow-lg">
                                     {filteredFixedOptions.map(item => (
                                        <li
                                            key={item.id}
                                            className="p-2 text-sm text-gray-200 hover:bg-blue-600 hover:text-white cursor-pointer"
                                            onClick={() => { setSelectedFixedItemDetails(item); setFixedSearchTerm(item.name); setFilteredFixedOptions([]); }}
                                        >
                                            {item.name} ({item.itemCode || 'N/A'}) - {item.unit || 'units'} (R{item.price?.toFixed(2) || '0.00'})
                                        </li>
                                    ))}
                                 </ul>
                            )}
                        </div>
                        <div className="w-24">
                             <Input label="Qty" type="number" value={fixedQty} onChange={e => setFixedQty(e.target.value)} placeholder="e.g., 5"/>
                        </div>
                        <Button type="button" onClick={handleAddConsumable} disabled={!selectedFixedItemDetails || parseFloat(fixedQty) <= 0 || isNaN(parseFloat(fixedQty))}>Add</Button>
                    </div>
                )}
                {consumableType === 'dimensional' && (
                    <div className="space-y-3 animate-fade-in" ref={searchRefDim}>
                         <div className="flex-grow relative">
                             <Input label="Material to Cut" value={dimSearchTerm} onChange={e => { setDimSearchTerm(e.target.value); setSelectedDimItemDetails(null); }} placeholder="Search by name or code..."/>
                             <Search className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
                            {filteredDimOptions.length > 0 && (
                                <ul className="absolute z-10 bg-gray-700 border border-gray-600 rounded-md w-full mt-1 max-h-48 overflow-y-auto shadow-lg">
                                    {filteredDimOptions.map(item => (<li key={item.id} className="p-2 text-sm text-gray-200 hover:bg-blue-600 hover:text-white cursor-pointer" onClick={() => { setSelectedDimItemDetails(item); setDimSearchTerm(item.name); setFilteredDimOptions([]); }}>{item.name} ({item.itemCode || 'N/A'}) - {item.unit || 'units'} (R{item.price?.toFixed(2) || '0.00'})</li>))}
                                 </ul>
                            )}
                        </div>
                        <div className="p-2 border border-gray-700 rounded-md">
                             <p className="text-xs text-gray-400 mb-2">Cutting Instructions</p>
                            <div className="flex items-end gap-2"><Input label="Dimensions (e.g., 120cm x 80cm)" value={cutRule.dimensions} onChange={e => setCutRule({...cutRule, dimensions: e.target.value})} /><Input label="Notes" value={cutRule.notes} onChange={e => setCutRule({...cutRule, notes: e.target.value})} /><Button type="button" onClick={() => { if(cutRule.dimensions) { setCuts([...cuts, cutRule]); setCutRule({ dimensions: '', notes: '' }); }}}>Add Cut</Button></div>
                            <ul className="text-xs mt-2 space-y-1">{cuts.map((c, i) => <li key={i}>{c.dimensions} ({c.notes})</li>)}</ul>
                        </div>
                         <Button type="button" onClick={handleAddConsumable} className="w-full" disabled={!selectedDimItemDetails || cuts.length === 0}>Add Dimensional Consumable</Button>
                    </div>
                )}
                <h6 className="text-sm font-bold pt-2 border-t border-gray-700 text-gray-200">Recipe Consumables</h6>
                <ul className="space-y-2 max-h-40 overflow-y-auto">
                    {selectedConsumables.map((c, i) => (
                         <li key={i} className="flex justify-between items-center bg-gray-700 p-2 rounded text-sm text-gray-200">
                            <div><p className="font-semibold">{c.name}</p>{c.quantity && <span>: {c.quantity.toFixed(3)} {c.unit}</span>}{c.notes && <span className="text-xs italic text-gray-500 ml-1">{c.notes}</span>}{c.cuts && (<ul className="list-square list-inside ml-4 mt-1">{c.cuts.map((cut, j) => <li key={j}>{cut.dimensions} <span className="text-xs italic text-gray-500">{cut.notes}</span></li>)}</ul>)}</div>
                            <Button type="button" onClick={() => onRemove(c.itemId)} variant="danger" className="py-0.5 px-2 text-xs">X</Button>
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
};

const DetailRow = ({ label, value, className = 'text-gray-300' }) => (
    <div className="flex justify-between items-center py-2 border-b border-gray-700/50">
        <p className="text-sm text-gray-400">{label}</p>
        <p className={`text-sm font-semibold ${className}`}>{value}</p>
    </div>
);

const JobDetailsModal = ({ job, onClose, currentTime, employeeHourlyRates, allEmployees, onUpdateJob, onDeleteJob, allInventoryItems, allTools, allToolAccessories }) => {
    const { user } = useAuth();
    const [isEditing, setIsEditing] = useState(false);
    const [editableJobData, setEditableJobData] = useState(() => ({
        partName: job.partName, description: job.description || '', estimatedTime: job.estimatedTime || 0,
        employeeId: job.employeeId, employeeName: job.employeeName,
        steps: Array.isArray(job.steps) ? job.steps.join('\n') : '',
        selectedTools: new Set(job.tools?.map(t => t.id) || []),
        selectedAccessories: new Set(job.accessories?.map(a => a.id) || []),
        selectedConsumables: job.consumables || [],
    }));

    useEffect(() => {
        setEditableJobData({
            partName: job.partName, description: job.description || '', estimatedTime: job.estimatedTime || 0,
            employeeId: job.employeeId, employeeName: job.employeeName,
            steps: Array.isArray(job.steps) ? job.steps.join('\n') : '',
            selectedTools: new Set(job.tools?.map(t => t.id) || []),
            selectedAccessories: new Set(job.accessories?.map(a => a.id) || []),
            selectedConsumables: job.consumables || [],
        });
        setIsEditing(false);
    }, [job]);

    const processedConsumablesForDisplay = useMemo(() => {
        return processConsumables(job.consumables, allInventoryItems, 20);
    }, [job.consumables, allInventoryItems]);

    const formatDate = (timestamp) => {
        if (!timestamp) return 'N/A';
        return new Date(timestamp.seconds * 1000).toLocaleString();
    };

    const formatEfficiency = (j, cTime) => {
        if (!j.estimatedTime) return 'N/A';
        const durationResult = calculateJobDuration(j, cTime);
        if (!durationResult || durationResult.totalMinutes === 0) return 'N/A';
        const estimatedMinutes = j.estimatedTime;
        const actualMinutes = durationResult.totalMinutes;
        return `${Math.round((estimatedMinutes / actualMinutes) * 100)}%`;
    };

    const calculateLiveTotalCost = (j, cTime, rates) => {
        if (typeof j.totalCost === 'number' && j.totalCost !== null) return `R${j.totalCost.toFixed(2)}`;
        if (!j.employeeId || !rates[j.employeeId]) return 'N/A';
        const hourlyRate = rates[j.employeeId];
        const durationResult = calculateJobDuration(j, cTime);
        let liveLaborCost = 0;
        if (durationResult) { liveLaborCost = (durationResult.totalMinutes / 60) * hourlyRate; }
        const currentMaterialCost = j.materialCost || 0;
        const totalLiveCost = liveLaborCost + currentMaterialCost;
        return `R${totalLiveCost.toFixed(2)}`;
    };

    const liveDurationFormatted = calculateJobDuration(job, currentTime)?.text || 'N/A';
    const liveEfficiencyFormatted = formatEfficiency(job, currentTime);
    const liveTotalCostFormatted = calculateLiveTotalCost(job, currentTime, employeeHourlyRates);
    const isJobActive = ['In Progress', 'Awaiting QC'].includes(job.status);
    const canEdit = !isJobActive && ['Pending', 'Paused', 'Complete', 'Issue', 'Archived - Issue'].includes(job.status);
    const canDelete = !isJobActive && ['Pending', 'Paused', 'Complete', 'Issue', 'Archived - Issue'].includes(job.status);
    const handleInputChange = (e) => { const { name, value } = e.target; setEditableJobData(prev => ({ ...prev, [name]: value })); };
    const handleEmployeeChange = (e) => { const newEmployeeId = e.target.value; const selectedEmployee = allEmployees.find(emp => emp.id === newEmployeeId); setEditableJobData(prev => ({ ...prev, employeeId: newEmployeeId, employeeName: selectedEmployee ? selectedEmployee.name : 'Unassigned' })); };
    const handleToolToggle = (toolId) => { setEditableJobData(prev => { const newTools = new Set(prev.selectedTools); if (newTools.has(toolId)) { newTools.delete(toolId); const accessoriesOfTool = allToolAccessories.filter(item => item.toolId === toolId).map(a => a.id); const newAccessories = new Set(prev.selectedAccessories); accessoriesOfTool.forEach(accId => newAccessories.delete(accId)); return { ...prev, selectedTools: newTools, selectedAccessories: newAccessories }; } else { newTools.add(toolId); return { ...prev, selectedTools: newTools }; } }); };
    const handleAccessoryToggle = (accId) => { setEditableJobData(prev => { const newAccessories = new Set(prev.selectedAccessories); newAccessories.has(accId) ? newAccessories.delete(accId) : newAccessories.add(accId); return { ...prev, selectedAccessories: newAccessories }; }); };
    const handleAddConsumableToList = (consumable) => { setEditableJobData(prev => ({ ...prev, selectedConsumables: [...prev.selectedConsumables, consumable] })); };
    const handleRemoveConsumableFromList = (itemId) => { setEditableJobData(prev => ({ ...prev, selectedConsumables: prev.selectedConsumables.filter(c => c.itemId !== itemId) })); };
    const handleSave = async () => { if (!editableJobData.partName.trim()) return alert("Part Name cannot be empty."); if (editableJobData.estimatedTime < 0) return alert("Estimated time cannot be negative."); if (!editableJobData.steps.trim()) return alert("Steps cannot be empty."); const updatedData = { partName: editableJobData.partName.trim(), description: editableJobData.description.trim(), estimatedTime: Number(editableJobData.estimatedTime), employeeId: editableJobData.employeeId || 'unassigned', employeeName: editableJobData.employeeName, steps: editableJobData.steps.split('\n').filter(s => s.trim() !== ''), tools: Array.from(editableJobData.selectedTools), accessories: Array.from(editableJobData.selectedAccessories), consumables: editableJobData.selectedConsumables, }; try { await onUpdateJob(job.id, updatedData); alert("Job updated successfully!"); setIsEditing(false); } catch (error) { console.error("Error updating job:", error); alert("Failed to update job."); } };
    const handleDelete = async () => { if (window.confirm(`Are you sure you want to permanently delete job "${job.jobId}"? This action cannot be undone.`)) { try { await onDeleteJob(job.id); alert("Job deleted successfully!"); onClose(); } catch (error) { console.error("Error deleting job:", error); alert("Failed to delete job."); } } };
    
    const handleGiveKudos = async () => {
        if (window.confirm("Give kudos for this job? The employee will be recognized for excellent work.")) {
            try {
                await giveKudosToJob(job.id);
                alert("Kudos given!");
                onClose();
            } catch (error) {
                console.error("Failed to give kudos:", error);
                alert("Could not give kudos at this time.");
            }
        }
    };
    
    return (
        <div onClick={onClose} className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 animate-fade-in">
            <div onClick={(e) => e.stopPropagation()} className="bg-gray-800 rounded-xl border border-gray-700 w-full max-w-2xl max-h-[90vh] flex flex-col">
                <div className="flex justify-between items-center p-4 border-b border-gray-700">
                    <div>
                        <h2 className="text-xl font-bold text-white flex items-center gap-2">
                            {isEditing ? `Editing: ${job.jobId}` : job.partName}
                            {job.kudos && <Award className="text-yellow-400" title="Kudos awarded for this job!" />}
                        </h2>
                        <p className="text-xs font-mono text-gray-500">{job.jobId}</p>
                    </div>
                    <Button onClick={onClose} variant="secondary" className="p-2"><X size={20} /></Button>
                </div>
                <div className="p-6 overflow-y-auto space-y-6">
                    {isEditing ? (
                        <div className="space-y-4">
                            <Input label="Part Name" name="partName" value={editableJobData.partName} onChange={handleInputChange} />
                            <Dropdown label="Assigned Employee" name="employeeId" value={editableJobData.employeeId} onChange={handleEmployeeChange} options={allEmployees} placeholder="Select Employee..."/>
                            <Input label="Estimated Time (minutes)" name="estimatedTime" type="number" value={editableJobData.estimatedTime} onChange={handleInputChange}/>
                            <Textarea label="Description" name="description" value={editableJobData.description} onChange={handleInputChange} rows={3} />
                            <Textarea label="Steps (one per line)" name="steps" value={editableJobData.steps} onChange={handleInputChange} rows={5} />
                            <div>
                                <h5 className="font-semibold text-white mb-2">Required Tools & Accessories</h5>
                                <div className="max-h-40 overflow-y-auto space-y-2 p-3 bg-gray-800 rounded-lg">
                                    {(allTools || []).map(tool => (
                                        <div key={tool.id}>
                                            <label className="flex items-center space-x-2 text-sm font-semibold text-gray-200">
                                                <input type="checkbox" checked={editableJobData.selectedTools.has(tool.id)} onChange={() => handleToolToggle(tool.id)} className="h-4 w-4 rounded bg-gray-700 text-blue-600 focus:ring-blue-500" />
                                                <span>{tool.name}</span>
                                            </label>
                                            {editableJobData.selectedTools.has(tool.id) && (
                                                <div className="pl-6 mt-1 space-y-1 text-xs border-l-2 border-gray-700">
                                                    {(allToolAccessories.filter(acc => acc.toolId === tool.id)).map(accessory => (
                                                        <label key={accessory.id} className="flex items-center space-x-2 text-xs text-gray-300">
                                                            <input type="checkbox" checked={editableJobData.selectedAccessories.has(accessory.id)} onChange={() => handleAccessoryToggle(accessory.id)} className="h-3 w-3 rounded bg-gray-700 text-blue-600 focus:ring-blue-500" />
                                                            <span>{accessory.name}</span>
                                                        </label>
                                                    ))}
                                                </div>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            </div>
                            <div>
                                <ConsumableEditorInModal
                                    allConsumables={allInventoryItems.filter(item => ['Component', 'Raw Material', 'Workshop Supply'].includes(item.category))}
                                    selectedConsumables={editableJobData.selectedConsumables}
                                    onAdd={handleAddConsumableToList}
                                    onRemove={handleRemoveConsumableFromList}
                                />
                            </div>
                            <div className="flex justify-end gap-3 mt-4">
                                <Button onClick={() => setIsEditing(false)} variant="secondary"><XCircle size={18} className="mr-2"/> Cancel</Button>
                                <Button onClick={handleSave} variant="primary"><Save size={18} className="mr-2"/> Save Changes</Button>
                            </div>
                        </div>
                    ) : (
                        <>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-2">
                                <DetailRow label="Employee" value={job.employeeName} />
                                <DetailRow label="Status" value={job.status} />
                                <DetailRow label="Created On" value={formatDate(job.createdAt)} />
                                <DetailRow label="Started On" value={formatDate(job.startedAt)} />
                                <DetailRow label="Completed On" value={formatDate(job.completedAt)} />
                                {job.status === 'Paused' && job.pausedAt && (<DetailRow label="Paused At" value={formatDate(job.pausedAt)} />)}
                                {job.status === 'Issue' && <DetailRow label="Issue Reason" value={job.issueReason || 'N/A'} className="text-red-400 font-semibold" />}
                            </div>
                            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                                <div className="bg-gray-900/50 p-4 rounded-lg text-center">
                                    <Clock size={20} className="mx-auto mb-2 text-blue-400" />
                                    <p className="text-xs text-gray-400">Est. Time</p>
                                    <p className="font-bold">{job.estimatedTime || 'N/A'} min</p>
                                </div>
                                <div className="bg-gray-900/50 p-4 rounded-lg text-center">
                                    <CheckCircle2 size={20} className="mx-auto mb-2 text-green-400" />
                                    <p className="text-xs text-gray-400">Actual Time</p>
                                    <p className="font-bold">{liveDurationFormatted}</p>
                                </div>
                                <div className="bg-gray-900/50 p-4 rounded-lg text-center">
                                    <Zap size={20} className="mx-auto mb-2 text-purple-400" />
                                    <p className="text-xs text-gray-400">Efficiency</p>
                                    <p className="font-bold">{liveEfficiencyFormatted}</p>
                                </div>
                            </div>
                            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                                <div className="bg-gray-900/50 p-4 rounded-lg text-center">
                                    <p className="text-xs text-gray-400">Material Cost</p>
                                    <p className="font-bold font-mono">R{job.materialCost?.toFixed(2) || '0.00'}</p>
                                </div>
                                <div className="bg-gray-900/50 p-4 rounded-lg text-center">
                                    <p className="text-xs text-gray-400">Labor Cost</p>
                                    <p className="font-bold font-mono">R{job.laborCost?.toFixed(2) || '0.00'}</p>
                                </div>
                                <div className="bg-gray-900/50 p-4 rounded-lg text-center">
                                    <DollarSign size={20} className="mx-auto mb-2 text-yellow-400" />
                                    <p className="text-xs text-gray-400">Total Job Cost</p>
                                    <p className="font-bold font-mono">{liveTotalCostFormatted}</p>
                                </div>
                            </div>
                            <div>
                                <h4 className="font-semibold text-gray-200 mb-2">Consumables Used</h4>
                                <ul className="text-sm text-gray-400 list-disc list-inside bg-gray-900/50 p-4 rounded-lg">
                                     {processedConsumablesForDisplay?.length > 0 ? processedConsumablesForDisplay.map((c, i) => (<li key={i}>{c.name} (Qty: {c.quantity?.toFixed(3) || 'N/A'} {c.unit || ''}) (R{c.price?.toFixed(2) || '0.00'})</li>)) : <li>None</li>}
                                 </ul>
                            </div>
                            <div className="flex justify-end gap-3 mt-6 pt-6 border-t border-gray-700">
                                {user?.role === 'Manager' && job.status === 'Complete' && !job.kudos && (
                                    <Button onClick={handleGiveKudos} variant="primary" className="bg-yellow-600 hover:bg-yellow-700">
                                        <Award size={18} className="mr-2"/> Give Kudos
                                    </Button>
                                )}
                                {canEdit && (<Button onClick={() => setIsEditing(true)} variant="secondary"><Edit size={18} className="mr-2"/> Edit Job</Button>)}
                                {canDelete && (<Button onClick={handleDelete} variant="danger"><Trash2 size={18} className="mr-2"/> Delete Job</Button>)}
                            </div>
                        </>
                    )}
                </div>
            </div>
        </div>
    );
};

export default JobDetailsModal;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\features\tracking\LiveTrackingTable.jsx
==================================================
import React, { useState, useEffect, useMemo } from 'react';
import { listenToJobCards, getEmployees, updateDocument, deleteDocument, getAllInventoryItems, getTools, getToolAccessories } from '../../../api/firestore';
import JobDetailsModal from './JobDetailsModal';
import { ChevronDown, ChevronRight } from 'lucide-react';
import { calculateJobDuration } from '../../../utils/jobUtils'; // Import centralized utility
import { useSearchParams, useNavigate } from 'react-router-dom'; // NEW: Import hooks for URL params

const StatusBadge = ({ status }) => {
    const statusColors = {
        'Pending': 'bg-yellow-500/20 text-yellow-300',
        'In Progress': 'bg-blue-500/20 text-blue-300',
        'Paused': 'bg-orange-500/20 text-orange-300',
        'Awaiting QC': 'bg-purple-500/20 text-purple-300',
        'Complete': 'bg-green-500/20 text-green-300',
        'Issue': 'bg-red-500/20 text-red-400',
        'Archived - Issue': 'bg-gray-600/20 text-gray-400'
    };
    return <span className={`px-3 py-1 text-xs font-semibold rounded-full whitespace-nowrap ${statusColors[status] || 'bg-gray-500/20 text-gray-300'}`}>{status}</span>;
};

const EfficiencyBadge = ({ actualMinutes, estimatedMinutes }) => {
    if (actualMinutes === null || estimatedMinutes === null || actualMinutes === 0) {
        return <span className="text-xs text-gray-500">N/A</span>;
    }
    const efficiency = (estimatedMinutes / actualMinutes) * 100;
    let color = 'bg-yellow-500/20 text-yellow-300';
    if (efficiency < 90) color = 'bg-red-500/20 text-red-400';
    if (efficiency > 110) color = 'bg-green-500/20 text-green-400';
    return <span className={`px-3 py-1 text-xs font-semibold rounded-full ${color}`}>{Math.round(efficiency)}%</span>
};

const JobRow = ({ job, onClick, currentTime, employeeHourlyRates }) => {
    // Use the centralized utility function for duration
    const liveDuration = calculateJobDuration(job, currentTime);

    const calculateLiveCost = (j, cTime, rates) => {
        // If totalCost is already set (e.g., after QC approval), use that value
        if (typeof j.totalCost === 'number' && j.totalCost !== null) {
            return `R ${j.totalCost.toFixed(2)}`;
        }
        if (!j.employeeId || !rates[j.employeeId]) return 'N/A';
        const hourlyRate = rates[j.employeeId];
        if (hourlyRate === 0) return 'N/A';
        
        // Use the centralized utility for duration
        const durationResult = calculateJobDuration(j, cTime);
        let liveLaborCost = 0;
        if (durationResult) {
            liveLaborCost = (durationResult.totalMinutes / 60) * hourlyRate;
        }
        
        const currentMaterialCost = j.materialCost || 0;
        const totalLiveCost = liveLaborCost + currentMaterialCost;
        return `R ${totalLiveCost.toFixed(2)}`;
    };

    const liveCost = calculateLiveCost(job, currentTime, employeeHourlyRates);
    const formatDate = (timestamp) => {
        if (!timestamp) return 'N/A';
        return new Date(timestamp.seconds * 1000).toLocaleString();
    };

    return (
        <tr onClick={() => onClick(job)} className="border-b border-gray-700 hover:bg-gray-700/50 cursor-pointer">
            <td className="p-3 text-gray-300 text-sm">{formatDate(job.createdAt)}</td>
            <td className="p-3 text-gray-300">{job.partName}</td>
            <td className="p-3 text-gray-300">{job.employeeName}</td>
            <td className="p-3"><StatusBadge status={job.status} /></td>
            <td className="p-3 text-gray-300 text-sm font-semibold">{liveDuration ? liveDuration.text : 'N/A'}</td>
            <td className="p-3"><EfficiencyBadge actualMinutes={liveDuration?.totalMinutes} estimatedMinutes={job.estimatedTime} /></td>
            <td className="p-3 text-gray-200 text-sm font-semibold font-mono text-right">{liveCost}</td>
        </tr>
    );
};

const LiveTrackingTable = () => {
    const [jobs, setJobs] = useState([]);
    const [employees, setEmployees] = useState([]);
    const [allInventoryItems, setAllInventoryItems] = useState([]);
    const [allTools, setAllTools] = useState([]);
    const [allToolAccessories, setAllToolAccessories] = useState([]);
    const [loading, setLoading] = useState(true);
    const [selectedJob, setSelectedJob] = useState(null);
    const [showCompleted, setShowCompleted] = useState(false);
    const [currentTime, setCurrentTime] = useState(Date.now());

    const [searchParams, setSearchParams] = useSearchParams(); // NEW: Get URL search params
    const navigate = useNavigate(); // NEW: For programmatic navigation and clearing params

    const fetchAllRequiredData = async () => {
        setLoading(true);
        try {
            const [fetchedEmployees, fetchedInventory, fetchedTools, fetchedToolAccessories] = await Promise.all([
                getEmployees(),
                getAllInventoryItems(),
                getTools(),
                getToolAccessories(),
            ]);
            setEmployees(fetchedEmployees);
            setAllInventoryItems(fetchedInventory);
            setAllTools(fetchedTools);
            setAllToolAccessories(fetchedToolAccessories);
            
            const unsubscribe = listenToJobCards((fetchedJobs) => {
                setJobs(fetchedJobs);
                setLoading(false);
            });
            return unsubscribe;
        } catch (error) {
            console.error("Failed to fetch initial data for tracking table:", error);
            setLoading(false);
        }
    };

    useEffect(() => {
        let unsubscribeJobs;
        (async () => {
            unsubscribeJobs = await fetchAllRequiredData();
        })();
        
        const intervalId = setInterval(() => {
            setCurrentTime(Date.now());
        }, 1000);

        return () => {
            if (unsubscribeJobs) unsubscribeJobs();
            clearInterval(intervalId);
        };
    }, []);

    // NEW: Effect to open modal based on URL jobId parameter
    useEffect(() => {
        const jobIdFromUrl = searchParams.get('jobId');
        if (jobIdFromUrl && !loading && jobs.length > 0) {
            const jobToOpen = jobs.find(job => job.jobId === jobIdFromUrl);
            if (jobToOpen) {
                setSelectedJob(jobToOpen);
            }
        }
    }, [searchParams, loading, jobs]); // Re-run if params, loading state, or jobs change

    const employeeHourlyRates = useMemo(() => {
        return employees.reduce((acc, emp) => {
            acc[emp.id] = emp.hourlyRate || 0;
            return acc;
        }, {});
    }, [employees]);

    const { activeJobs, completedAndArchivedJobs } = useMemo(() => {
        const statusOrder = { 'In Progress': 1, 'Paused': 2, 'Awaiting QC': 3, 'Pending': 4 };
        
        const active = jobs
            .filter(job => ['In Progress', 'Paused', 'Awaiting QC', 'Pending'].includes(job.status))
            .sort((a, b) => {
                const statusCompare = statusOrder[a.status] - statusOrder[b.status];
                if (statusCompare !== 0) return statusCompare;
                const timeA = a.status === 'In Progress' 
                || a.status === 'Paused' ? a.startedAt : a.createdAt;
                const timeB = b.status === 'In Progress' || b.status === 'Paused' ? b.startedAt : b.createdAt;
                if (timeA && timeB) {
                    return timeB.seconds - timeA.seconds;
                }
                return 0;
            });
        const completed = jobs.filter(job => ['Complete', 'Issue', 'Archived - Issue'].includes(job.status));
        return { activeJobs: active, completedAndArchivedJobs: completed 
        };
    }, [jobs]);

    const handleUpdateJob = async (jobId, updatedData) => {
        try {
            await updateDocument('createdJobCards', jobId, updatedData);
        } catch (error) {
            console.error("Error updating job from modal:", error);
            throw error;
        }
    };

    const handleDeleteJob = async (jobId) => {
        try {
            await deleteDocument('createdJobCards', jobId);
        } catch (error) {
            console.error("Error deleting job from modal:", error);
            throw error;
        }
    };

    // NEW: Function to close the modal and clear the URL parameter
    const handleCloseModal = () => {
        setSelectedJob(null);
        // Clear jobId from URL without navigating away from /tracking
        navigate('/tracking', { replace: true });
    };

    if (loading) return <p className="text-center text-gray-400">Loading jobs...</p>;

    return (
        <>
            <div className="bg-gray-800 rounded-xl border border-gray-700 shadow-lg overflow-hidden">
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                        <thead>
                            <tr className="border-b border-gray-600 bg-gray-900/50">
                                <th className="p-3 text-sm font-semibold text-gray-400">Created</th>
                                <th className="p-3 text-sm font-semibold text-gray-400">Part</th>
                                <th className="p-3 text-sm font-semibold text-gray-400">Employee</th>
                                <th className="p-3 text-sm font-semibold text-gray-400">Status</th>
                                <th className="p-3 text-sm font-semibold text-gray-400">Actual Time</th>
                                <th className="p-3 text-sm font-semibold text-gray-400">Efficiency</th>
                                <th className="p-3 text-sm font-semibold text-gray-400 text-right">Job Cost</th>
                            </tr>
                        </thead>
                        <tbody>
                            {activeJobs.map(job => (
                                <JobRow
                                    key={job.id}
                                    job={job}
                                    onClick={() => setSelectedJob(job)}
                                    currentTime={currentTime}
                                    employeeHourlyRates={employeeHourlyRates}
                                />
                            ))}
                        </tbody>
                    </table>
                    <div className="border-t border-gray-700">
                        <button
                            onClick={() => setShowCompleted(!showCompleted)}
                            className="w-full flex items-center justify-between p-3 text-left text-sm font-semibold text-gray-300 bg-gray-900/30 hover:bg-gray-700/50 transition-colors"
                        >
                            <span>Completed & Archived Jobs ({completedAndArchivedJobs.length})</span>
                            {showCompleted ?
                            <ChevronDown size={20} /> : <ChevronRight size={20} />}
                        </button>
                        {showCompleted && (
                            <table className="w-full text-left">
                                <thead className="invisible h-0">
                                    <tr>
                                        <th className="p-0">Created</th><th className="p-0">Part</th><th className="p-0">Employee</th>
                                        <th className="p-0">Status</th><th className="p-0">Actual Time</th><th className="p-0">Efficiency</th>
                                        <th className="p-0 text-right">Job Cost</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {completedAndArchivedJobs.map(job => (
                                        <JobRow
                                            key={job.id}
                                            job={job}
                                            onClick={() => setSelectedJob(job)}
                                            currentTime={currentTime}
                                            employeeHourlyRates={employeeHourlyRates}
                                        />
                                    ))}
                                </tbody>
                            </table>
                        )}
                    </div>
                </div>
                {selectedJob && (
                    <JobDetailsModal
                        job={selectedJob}
                        onClose={handleCloseModal} // NEW: Use the new close handler
                        currentTime={currentTime}
                        employeeHourlyRates={employeeHourlyRates}
                        allEmployees={employees}
                        onUpdateJob={handleUpdateJob}
                        onDeleteJob={handleDeleteJob}
                        allInventoryItems={allInventoryItems}
                        allTools={allTools}
                        allToolAccessories={allToolAccessories}
                    />
                )}
            </div>
        </>
    );
};

export default LiveTrackingTable;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\BreakEvenCalculator.jsx
==================================================
// src/components/intelligence/BreakEvenCalculator.jsx (FIXED)
import React, { useMemo } from 'react'; // useMemo is now correctly imported
import { Target, DollarSign } from 'lucide-react';

const BreakEvenCalculator = ({ totalFixedCosts, historicalGrossMargin }) => {

    const breakEvenSales = useMemo(() => {
        if (historicalGrossMargin <= 0) {
            return 0; // Avoid division by zero or negative margin
        }
        return totalFixedCosts / (historicalGrossMargin / 100);
    }, [totalFixedCosts, historicalGrossMargin]);

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4 flex items-center gap-2">
                <Target className="text-green-400" />
                Monthly Break-Even Target
            </h3>
            <div className="text-center bg-gray-900/50 p-6 rounded-lg">
                <p className="text-sm text-gray-400">Required sales to cover all fixed costs</p>
                <p className="text-5xl font-bold text-green-400 font-mono mt-2">
                    R {breakEvenSales.toLocaleString('en-ZA', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                </p>
                <p className="text-xs text-gray-500 mt-2">
                    Based on a historical gross margin of {historicalGrossMargin.toFixed(1)}%
                </p>
            </div>
        </div>
    );
};

export default BreakEvenCalculator;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\CapacityGauge.jsx
==================================================
// src/components/intelligence/CapacityGauge.jsx (NEW FILE)
import React from 'react';
import { Gauge } from 'lucide-react';
import { RadialBarChart, RadialBar, ResponsiveContainer } from 'recharts';

const CapacityGauge = ({ utilization }) => {
    // This component is UI-only for now, logic will be in DashboardPage.jsx
    const scoreColor = utilization > 85 ? '#ef4444' : utilization > 70 ? '#f59e0b' : '#22c55e';
    const data = [{ name: 'Capacity', value: utilization }];

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 flex flex-col items-center justify-center h-full">
            <h3 className="font-bold text-white mb-2 flex items-center gap-2">
                <Gauge size={20} className="text-blue-400"/>
                Capacity Utilization
            </h3>
            <ResponsiveContainer width="100%" height={200}>
                <RadialBarChart 
                    cx="50%" 
                    cy="50%" 
                    innerRadius="60%" 
                    outerRadius="80%" 
                    barSize={20} 
                    data={data}
                    startAngle={180}
                    endAngle={0}
                >
                    <RadialBar
                        minAngle={15}
                        background
                        clockWise
                        dataKey="value"
                        fill={scoreColor}
                        cornerRadius={10}
                    />
                    <text x="50%" y="55%" textAnchor="middle" dominantBaseline="middle" className="text-4xl font-bold fill-white">
                        {Math.round(utilization)}%
                    </text>
                     <text x="50%" y="70%" textAnchor="middle" dominantBaseline="middle" className="text-sm font-semibold fill-gray-400">
                        of available hours
                    </text>
                </RadialBarChart>
            </ResponsiveContainer>
        </div>
    );
};

export default CapacityGauge;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\EfficiencyAnalysisModal.jsx
==================================================
// FILE: src/components/intelligence/EfficiencyAnalysisModal.jsx (NEW FILE - NO CHANGES HERE)

import React, { useMemo } from 'react';
import { X } from 'lucide-react';
import Button from '../ui/Button';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';
import { calculateJobDuration } from '../../utils/jobUtils';

const EfficiencyAnalysisModal = ({ jobs, employeeName, onClose }) => {
    
    const analysisData = useMemo(() => {
        if (!jobs || jobs.length === 0) return [];

        const jobsByDept = jobs.reduce((acc, job) => {
            if (!job.departmentName) return acc;
            if (!acc[job.departmentName]) {
                acc[job.departmentName] = [];
            }
            acc[job.departmentName].push(job);
            return acc;
        }, {});

        const analysis = Object.entries(jobsByDept).map(([departmentName, deptJobs]) => {
            const completedJobsWithTime = deptJobs.filter(j => j.status === 'Complete' && j.estimatedTime > 0 && j.startedAt && j.completedAt);
            
            if (completedJobsWithTime.length === 0) {
                return null;
            }

            const totalEfficiencyRatio = completedJobsWithTime.reduce((sum, job) => {
                const duration = calculateJobDuration(job, job.completedAt.toDate());
                if (duration && duration.totalMinutes > 0) {
                    const actualMinutes = duration.totalMinutes;
                    const estimatedMinutes = job.estimatedTime;
                    return sum + (estimatedMinutes / actualMinutes);
                }
                return sum;
            }, 0);

            const avgEfficiency = (totalEfficiencyRatio / completedJobsWithTime.length) * 100;

            return {
                department: departmentName,
                efficiency: Math.round(avgEfficiency),
                jobCount: completedJobsWithTime.length
            };
        }).filter(Boolean);

        return analysis;

    }, [jobs]);

    return (
        <div 
            onClick={onClose}
            className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4 animate-fade-in"
        >
            <div 
                onClick={(e) => e.stopPropagation()}
                className="bg-gray-800 rounded-xl border border-gray-700 w-full max-w-2xl max-h-[80vh] flex flex-col"
            >
                <div className="flex justify-between items-center p-4 border-b border-gray-700">
                    <div>
                        <h2 className="text-xl font-bold text-white">Efficiency Analysis</h2>
                        <p className="text-sm text-gray-400">For {employeeName}</p>
                    </div>
                    <Button onClick={onClose} variant="secondary" className="p-2">
                        <X size={20} />
                    </Button>
                </div>

                <div className="p-6 overflow-y-auto">
                    {analysisData.length > 0 ? (
                        <ResponsiveContainer width="100%" height={300}>
                            <BarChart
                                data={analysisData}
                                layout="vertical"
                                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                            >
                                <CartesianGrid strokeDasharray="3 3" stroke="#4b5563" />
                                <XAxis type="number" stroke="#9ca3af" unit="%" />
                                <YAxis type="category" dataKey="department" stroke="#9ca3af" width={120} />
                                <Tooltip
                                    cursor={{ fill: 'rgba(107, 114, 128, 0.1)' }}
                                    contentStyle={{ backgroundColor: '#1f2937', border: '1px solid #4b5563' }}
                                    formatter={(value, name, props) => [`${value}% (${props.payload.jobCount} jobs)`, "Efficiency"]}
                                />
                                <Legend />
                                <Bar dataKey="efficiency" fill="#8b5cf6" name="Average Efficiency"/>
                            </BarChart>
                        </ResponsiveContainer>
                    ) : (
                        <p className="text-center text-gray-500 py-8">
                            Not enough completed jobs with time estimates to perform an efficiency analysis for this employee.
                        </p>
                    )}
                </div>
            </div>
        </div>
    );
};

export default EfficiencyAnalysisModal;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\EfficiencyChart.jsx
==================================================
// src/components/intelligence/EfficiencyChart.jsx (New File)

import React, { useMemo } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';

const CustomTooltip = ({ active, payload, label }) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-gray-900/80 p-4 border border-gray-700 rounded-lg shadow-lg">
        <p className="label text-sm text-gray-400">{`Date: ${label}`}</p>
        <p className="intro text-white font-bold">{`Efficiency: ${payload[0].value.toFixed(0)}%`}</p>
        <p className="desc text-xs text-gray-500">Job: {payload[0].payload.partName}</p>
      </div>
    );
  }
  return null;
};

const EfficiencyChart = ({ jobs }) => {
  const chartData = useMemo(() => {
    if (!jobs || jobs.length === 0) return [];

    return jobs
      .filter(job => job.status === 'Complete' && job.estimatedTime > 0 && job.startedAt && job.completedAt)
      .map(job => {
        const actualSeconds = (job.completedAt.toDate().getTime() - job.startedAt.toDate().getTime() - (job.totalPausedMilliseconds || 0)) / 1000;
        if (actualSeconds <= 0) return null;

        const efficiency = ((job.estimatedTime * 60) / actualSeconds) * 100;

        return {
          date: new Date(job.completedAt.toDate()).toLocaleDateString('en-ZA'), // Use a consistent date format
          efficiency: efficiency,
          partName: job.partName,
        };
      })
      .filter(Boolean) // Remove any null entries
      .sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort by date to connect the line properly
  }, [jobs]);

  if (chartData.length === 0) {
    return (
        <div className="flex items-center justify-center h-full">
            <p className="text-gray-500">Not enough data to display performance trend.</p>
        </div>
    );
  }

  return (
    <ResponsiveContainer width="100%" height={300}>
      <LineChart
        data={chartData}
        margin={{
          top: 5,
          right: 30,
          left: 0,
          bottom: 5,
        }}
      >
        <CartesianGrid strokeDasharray="3 3" stroke="#4b5563" />
        <XAxis dataKey="date" stroke="#9ca3af" fontSize={12} tickLine={false} axisLine={false} />
        <YAxis stroke="#9ca3af" fontSize={12} tickLine={false} axisLine={false} unit="%" />
        <Tooltip content={<CustomTooltip />} />
        <Legend wrapperStyle={{fontSize: "14px"}} />
        <Line type="monotone" dataKey="efficiency" stroke="#8b5cf6" strokeWidth={2} activeDot={{ r: 8 }} name="Job Efficiency"/>
      </LineChart>
    </ResponsiveContainer>
  );
};

export default EfficiencyChart;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\GrowthSimulator.jsx
==================================================
// src/components/intelligence/GrowthSimulator.jsx (UPDATED & FIXED)

import React, { useState, useEffect } from 'react';
import Input from '../ui/Input';
import { TrendingUp, Users, Zap, DollarSign } from 'lucide-react';

const GrowthSimulator = ({ baseOverheads, baseEmployeeCount, baseAvgEfficiency, baseAvgHourlyRate }) => {
    const [scenario, setScenario] = useState({
        targetSales: '',
        employeeCount: baseEmployeeCount || 1,
        teamEfficiency: baseAvgEfficiency || 100,
    });
    const [results, setResults] = useState({
        requiredHours: 0,
        availableHours: 0,
        cogs: 0,
        laborCost: 0, // This will now represent the total monthly labor bill
        grossProfit: 0,
        netProfit: 0,
        breakEvenSales: 0,
    });

    useEffect(() => {
        const targetSales = parseFloat(scenario.targetSales) || 0;
        const employeeCount = parseInt(scenario.employeeCount, 10) || baseEmployeeCount;
        const teamEfficiency = parseFloat(scenario.teamEfficiency) || baseAvgEfficiency;

        // --- Core Financial Calculations ---
        // 1. Estimate COGS (assuming a 60% variable cost of sales)
        const cogs = targetSales * 0.60;
        const contributionMarginRatio = 0.40; // (1 - 0.60)

        // 2. Calculate Total Fixed Costs for the scenario
        // Total monthly labor cost is now tied to the number of employees in the scenario
        const totalMonthlyLaborCost = employeeCount * baseAvgHourlyRate * 173.2; // Avg hours in a month
        const totalFixedCosts = baseOverheads + totalMonthlyLaborCost;

        // 3. Calculate Profitability
        const grossProfit = targetSales - cogs;
        const netProfit = grossProfit - totalMonthlyLaborCost - baseOverheads;
        
        // 4. Calculate Break-Even Point
        const breakEvenSales = contributionMarginRatio > 0 ? totalFixedCosts / contributionMarginRatio : 0;


        // --- Capacity/Hour Calculations (for context) ---
        // We'll use a simplified model: assume labor cost is ~25% of sales to estimate hours needed
        const estimatedLaborValueOfSales = targetSales * 0.25;
        const efficiencyFactor = 100 / (teamEfficiency || 100);
        const requiredHours = baseAvgHourlyRate > 0 ? (estimatedLaborValueOfSales / baseAvgHourlyRate) * efficiencyFactor : 0;
        const availableHours = employeeCount * 173.2;

        setResults({
            requiredHours,
            availableHours,
            cogs,
            laborCost: totalMonthlyLaborCost, // Set the total labor cost for display
            grossProfit,
            netProfit,
            breakEvenSales,
        });

    }, [scenario, baseOverheads, baseEmployeeCount, baseAvgEfficiency, baseAvgHourlyRate]);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setScenario(prev => ({ ...prev, [name]: value }));
    };

    const formatCurrency = (value) => `R ${value.toLocaleString('en-ZA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4 flex items-center gap-2">
                <TrendingUp className="text-blue-400" />
                Growth & Profitability Simulator
            </h3>
            
            {/* INPUTS: The Levers */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6 p-4 bg-gray-900/50 rounded-lg">
                <Input 
                    label="Target Monthly Sales (R)" 
                    name="targetSales" 
                    type="number" 
                    value={scenario.targetSales} 
                    onChange={handleInputChange} 
                    placeholder="e.g., 500000" 
                />
                <Input 
                    label="Number of Employees" 
                    name="employeeCount" 
                    type="number" 
                    value={scenario.employeeCount} 
                    onChange={handleInputChange}
                />
                <Input 
                    label="Team Efficiency (%)" 
                    name="teamEfficiency" 
                    type="number" 
                    value={scenario.teamEfficiency} 
                    onChange={handleInputChange}
                />
            </div>

            {/* OUTPUTS: The Results */}
            <div className="space-y-4">
                <h4 className="font-semibold text-lg text-white">Projected Results</h4>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 text-center">
                    <div className="bg-gray-700/50 p-4 rounded-lg">
                        <p className="text-sm text-gray-400">Required Hours vs. Available</p>
                        <p className={`text-2xl font-bold ${results.availableHours < results.requiredHours ? 'text-red-400' : 'text-green-400'}`}>
                            {results.requiredHours.toFixed(0)} / {results.availableHours.toFixed(0)}
                        </p>
                    </div>
                    <div className="bg-gray-700/50 p-4 rounded-lg">
                        <p className="text-sm text-gray-400">Break-Even Sales (R)</p>
                        <p className="text-2xl font-bold text-white">
                            {formatCurrency(results.breakEvenSales)}
                        </p>
                    </div>
                    <div className="bg-blue-600/20 p-4 rounded-lg border border-blue-500">
                        <p className="text-sm text-blue-300">Projected Net Profit</p>
                        <p className={`text-2xl font-bold ${results.netProfit >= 0 ? 'text-white' : 'text-red-400'}`}>
                            {formatCurrency(results.netProfit)}
                        </p>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default GrowthSimulator;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\JobCompletionAnalysisWidget.jsx
==================================================
import React, { useState, useEffect } from 'react';
import { getCompletedJobsForEmployee } from '../../api/firestore';
import { CheckCircle2, AlertTriangle } from 'lucide-react';

const JobCompletionAnalysisWidget = ({ employeeId }) => {
    const [stats, setStats] = useState({ onTime: 0, late: 0, total: 0 });
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const calculateStats = async () => {
            if (!employeeId) return;
            setLoading(true);

            try {
                const completedJobs = await getCompletedJobsForEmployee(employeeId);
                
                let onTimeCount = 0;
                let lateCount = 0;

                completedJobs.forEach(job => {
                    // Ensure the job has the necessary data for comparison
                    if (job.estimatedTime && job.startedAt && job.completedAt) {
                        const startTime = job.startedAt.toDate().getTime();
                        const completionTime = job.completedAt.toDate().getTime();
                        const pauseDuration = job.totalPausedMilliseconds || 0;

                        // Calculate actual duration in minutes
                        const actualDurationMinutes = (completionTime - startTime - pauseDuration) / (1000 * 60);

                        if (actualDurationMinutes <= job.estimatedTime) {
                            onTimeCount++;
                        } else {
                            lateCount++;
                        }
                    }
                });

                setStats({
                    onTime: onTimeCount,
                    late: lateCount,
                    total: onTimeCount + lateCount // Only count jobs that could be analyzed
                });

            } catch (error) {
                console.error("Error fetching or calculating job completion stats:", error);
                alert("Could not load job completion stats.");
            }
            setLoading(false);
        };

        calculateStats();
    }, [employeeId]);
    
    const onTimePercentage = stats.total > 0 ? (stats.onTime / stats.total) * 100 : 0;

    return (
        <div className="bg-gray-800/50 p-6 rounded-lg border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Job Completion Analysis</h3>
            {loading ? (
                <p className="text-gray-400">Analyzing job history...</p>
            ) : stats.total === 0 ? (
                <p className="text-gray-400">No completed jobs with time estimates found for this employee.</p>
            ) : (
                <div className="space-y-4">
                    {/* KPI Cards for On-Time and Late */}
                    <div className="grid grid-cols-2 gap-4">
                        <div className="bg-green-500/10 p-4 rounded-lg text-center">
                            <CheckCircle2 className="mx-auto text-green-400 mb-2" size={28} />
                            <p className="text-2xl font-bold text-white">{stats.onTime}</p>
                            <p className="text-sm text-green-400">On-Time / Early</p>
                        </div>
                        <div className="bg-red-500/10 p-4 rounded-lg text-center">
                            <AlertTriangle className="mx-auto text-red-400 mb-2" size={28} />
                            <p className="text-2xl font-bold text-white">{stats.late}</p>
                            <p className="text-sm text-red-400">Late</p>
                        </div>
                    </div>

                    {/* Proportional Bar */}
                    <div>
                        <p className="text-center text-sm text-gray-300 mb-2">
                            On-Time Completion Rate: <span className="font-bold text-white">{onTimePercentage.toFixed(0)}%</span>
                        </p>
                        <div className="flex h-4 w-full bg-red-500/20 rounded-full overflow-hidden border border-gray-700">
                            <div 
                                style={{ width: `${onTimePercentage}%` }}
                                className="bg-green-500 transition-all duration-500"
                            ></div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default JobCompletionAnalysisWidget;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\MonthlySalesTrend.jsx
==================================================
// src/components/intelligence/MonthlySalesTrend.jsx (NEW FILE)
import React from 'react';
import { TrendingUp, TrendingDown, Minus, Calendar } from 'lucide-react';

const MonthlySalesTrend = ({ percentageChange }) => {
    
    const isPositive = percentageChange > 0;
    const isNegative = percentageChange < 0;

    const getTrendInfo = () => {
        if (isPositive) return {
            icon: <TrendingUp size={32} />,
            textColor: 'text-green-400',
            text: `${percentageChange.toFixed(1)}%`
        };
        if (isNegative) return {
            icon: <TrendingDown size={32} />,
            textColor: 'text-red-400',
            text: `${percentageChange.toFixed(1)}%`
        };
        return {
            icon: <Minus size={32} />,
            textColor: 'text-gray-400',
            text: `${percentageChange.toFixed(1)}%`
        };
    };
    
    const trend = getTrendInfo();

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 h-full flex flex-col justify-center items-center">
            <p className="text-gray-400 text-sm font-medium mb-2 flex items-center gap-2">
                <Calendar size={14} />
                This Month vs. Last Year
            </p>
            <div className={`flex items-center space-x-3 ${trend.textColor}`}>
                {trend.icon}
                <span className="text-5xl font-bold">
                    {trend.text}
                </span>
            </div>
        </div>
    );
};

export default MonthlySalesTrend;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\MultiYearSalesGraph.jsx
==================================================
// src/components/intelligence/MultiYearSalesGraph.jsx (NEW FILE)
import React from 'react';
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Legend } from 'recharts';
import { TrendingUp } from 'lucide-react';

const CustomTooltip = ({ active, payload, label }) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-gray-900/80 p-3 border border-gray-700 rounded-lg shadow-lg">
        <p className="label text-sm text-white font-bold">{label}</p>
        {payload.map(pld => (
          <div key={pld.dataKey} style={{ color: pld.color }}>
            {pld.name}: R {pld.value.toLocaleString('en-ZA')}
          </div>
        ))}
      </div>
    );
  }
  return null;
};

const MultiYearSalesGraph = ({ salesData, years }) => {
    // A dynamic color palette for the lines
    const colors = ['#8884d8', '#3b82f6', '#22c55e', '#f59e0b', '#ef4444'];

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 h-full">
            <h3 className="font-bold text-white mb-4 flex items-center gap-2">
                <TrendingUp size={20} className="text-green-400"/>
                Historical Sales Performance
            </h3>
            <ResponsiveContainer width="100%" height={350}>
                <LineChart data={salesData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#4b556330" />
                    <XAxis dataKey="name" stroke="#9ca3af" fontSize={12} tickLine={false} axisLine={false} />
                    <YAxis stroke="#9ca3af" fontSize={12} tickLine={false} axisLine={false} tickFormatter={(value) => `R${value/1000}k`} />
                    <Tooltip content={<CustomTooltip />} cursor={{fill: 'rgba(107, 114, 128, 0.1)'}}/>
                    <Legend />
                    {years.map((year, index) => (
                        <Line 
                            key={year}
                            type="monotone" 
                            dataKey={year} 
                            stroke={colors[index % colors.length]} 
                            strokeWidth={2} 
                            name={`Sales ${year}`} 
                            dot={false}
                        />
                    ))}
                </LineChart>
            </ResponsiveContainer>
        </div>
    );
};

export default MultiYearSalesGraph;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\PerformanceLeaderboard.jsx
==================================================
// src/components/intelligence/PerformanceLeaderboard.jsx (Final Version)

import React, { useMemo } from 'react';
import { Link } from 'react-router-dom';
import { Star, Zap, DollarSign, ShieldCheck, CheckCircle } from 'lucide-react'; // Import Star icon

const SortButton = ({ label, active, onClick }) => (
    <button
        onClick={onClick}
        className={`px-4 py-2 text-sm font-semibold rounded-md transition-colors flex items-center gap-2 ${
            active
                ? 'bg-blue-600 text-white shadow-md'
                : 'bg-gray-700/50 text-gray-300 hover:bg-gray-600'
        }`}
    >
        {label}
    </button>
);

const getRankColor = (rank) => {
    switch (rank) {
        case 1: return 'border-yellow-400 bg-yellow-400/10';
        case 2: return 'border-gray-400 bg-gray-400/10';
        case 3: return 'border-orange-500 bg-orange-500/10';
        default: return 'border-gray-700';
    }
};

const PerformanceLeaderboard = ({ employees, activeSortKey, setActiveSortKey }) => {
    const sortConfig = {
        ops: { direction: 'desc', label: 'OPS', unit: '' }, // <-- ADD OPS
        netValueAdded: { direction: 'desc', label: 'Net Value', unit: 'R' },
        avgEfficiency: { direction: 'desc', label: 'Efficiency', unit: '%' },
        reworkRate: { direction: 'asc', label: 'Rework Rate', unit: '%' },
        jobsCompleted: { direction: 'desc', label: 'Jobs Done', unit: '' },
    };

    const sortedEmployees = useMemo(() => {
        if (!employees) return [];
        const key = activeSortKey;
        const direction = sortConfig[key]?.direction || 'desc';
        return [...employees].sort((a, b) => {
            return direction === 'asc' ? a[key] - b[key] : b[key] - a[key];
        });
    }, [employees, activeSortKey]);

    const formatValue = (value, unit) => {
        if (unit === '%') return `${Math.round(value)}%`;
        if (unit === 'R') return `R ${value.toFixed(2)}`;
        if (unit === '') return value.toFixed(1); // For OPS
        return value;
    };

    return (
        <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Performance Leaderboard</h3>
            
            <div className="flex flex-wrap gap-2 mb-4">
                {/* ADD new sort button for OPS */}
                <SortButton label={<><Star size={16}/> Rank by OPS</>} active={activeSortKey === 'ops'} onClick={() => setActiveSortKey('ops')} />
                <SortButton label="Rank by Net Value" active={activeSortKey === 'netValueAdded'} onClick={() => setActiveSortKey('netValueAdded')} />
                <SortButton label="Rank by Efficiency" active={activeSortKey === 'avgEfficiency'} onClick={() => setActiveSortKey('avgEfficiency')} />
                <SortButton label="Rank by Quality" active={activeSortKey === 'reworkRate'} onClick={() => setActiveSortKey('reworkRate')} />
                <SortButton label="Rank by Volume" active={activeSortKey === 'jobsCompleted'} onClick={() => setActiveSortKey('jobsCompleted')} />
            </div>

            <div className="space-y-2 max-h-96 overflow-y-auto pr-2">
                {sortedEmployees.map((emp, index) => {
                    const rank = index + 1;
                    const rankColor = getRankColor(rank);
                    const value = emp[activeSortKey];
                    const unit = sortConfig[activeSortKey]?.unit || '';

                    return (
                        <div key={emp.id} className={`flex items-center p-3 rounded-lg border-l-4 transition-all ${rankColor}`}>
                            <span className="font-bold text-lg text-white w-8">{rank}.</span>
                            <div className="flex-grow">
                                <Link to={`/employee/${emp.id}`} className="font-semibold text-blue-400 hover:underline">
                                    {emp.name}
                                </Link>
                                <p className="text-xs text-gray-400">Department: {emp.departmentName || 'N/A'}</p>
                            </div>
                            <div className="text-right">
                                <p className="font-bold text-lg text-blue-400">{formatValue(value, unit)}</p>
                                <p className="text-xs text-gray-500">{sortConfig[activeSortKey]?.label}</p>
                            </div>
                        </div>
                    );
                })}
            </div>
        </div>
    );
};

export default PerformanceLeaderboard;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\PerformanceSnapshot.jsx
==================================================
// src/components/intelligence/PerformanceSnapshot.jsx (New File)

import React, { useMemo } from 'react';
import { TrendingUp, TrendingDown, Users, Target, AlertTriangle } from 'lucide-react';

const Insight = ({ text, type }) => {
    const config = {
        opportunity: {
            icon: <TrendingUp size={18} className="text-green-400" />,
            textColor: 'text-gray-300'
        },
        alert: {
            icon: <AlertTriangle size={18} className="text-red-400" />,
            textColor: 'text-gray-300'
        }
    };
    const current = config[type] || config.alert;

    return (
        <li className="flex items-start space-x-3">
            <div className="flex-shrink-0 mt-1">{current.icon}</div>
            <p className={`text-sm ${current.textColor}`}>{text}</p>
        </li>
    );
};

const PerformanceSnapshot = ({ metrics }) => {
    const insights = useMemo(() => {
        if (!metrics) return [];

        const {
            individual,
            team,
        } = metrics;

        const results = [];

        // Efficiency Insight
        if (individual.efficiency > team.efficiency * 1.1) {
            results.push({ text: `Efficiency (${individual.efficiency.toFixed(0)}%) is significantly above the team average of ${team.efficiency.toFixed(0)}%.`, type: 'opportunity' });
        } else if (individual.efficiency < team.efficiency * 0.9) {
            results.push({ text: `Efficiency (${individual.efficiency.toFixed(0)}%) is below the team average of ${team.efficiency.toFixed(0)}%.`, type: 'alert' });
        }

        // Rework Rate Insight
        if (individual.reworkRate > team.reworkRate + 5) { // If rework is 5% or more higher
            results.push({ text: `Rework Rate (${individual.reworkRate.toFixed(1)}%) is higher than the team average of ${team.reworkRate.toFixed(1)}%.`, type: 'alert' });
        } else if (individual.reworkRate < Math.max(team.reworkRate / 2, 0.5)) { // If it's less than half the team average
            results.push({ text: `This employee maintains an excellent quality score with a Rework Rate of just ${individual.reworkRate.toFixed(1)}%.`, type: 'opportunity' });
        }

        // Net Value Insight
        if (individual.netValueAdded > team.netValueAdded * 1.2) {
            results.push({ text: `This employee is a top value generator, adding R ${individual.netValueAdded.toFixed(0)} compared to the team average of R ${team.netValueAdded.toFixed(0)}.`, type: 'opportunity' });
        } else if (individual.netValueAdded < team.netValueAdded * 0.8) {
             results.push({ text: `Net Value Added (R ${individual.netValueAdded.toFixed(0)}) is lower than the team average (R ${team.netValueAdded.toFixed(0)}).`, type: 'alert' });
        }
        
        return results;

    }, [metrics]);

    return (
        <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Coach's Corner</h3>
            {insights.length > 0 ? (
                <ul className="space-y-3">
                    {insights.map((insight, index) => (
                        <Insight key={index} text={insight.text} type={insight.type} />
                    ))}
                </ul>
            ) : (
                <p className="text-gray-400 text-sm">This employee is performing consistently with the team average.</p>
            )}
        </div>
    );
};

export default PerformanceSnapshot;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\ProfitTargetMatrix.jsx
==================================================
// src/components/intelligence/ProfitTargetMatrix.jsx (NEW FILE)
import React, { useMemo } from 'react';
import { Target, TrendingUp } from 'lucide-react';

const TargetCard = ({ percent, targetSales, profitAmount, isBreakEven = false }) => {
    const cardColor = isBreakEven ? 'bg-gray-700/50' : 'bg-gray-900/50';
    const textColor = isBreakEven ? 'text-green-400' : 'text-blue-400';

    return (
        <div className={`p-4 rounded-lg flex flex-col items-center text-center ${cardColor}`}>
            <p className={`font-bold text-lg flex items-center gap-2 ${textColor}`}>
                <Target size={20} />
                {percent}% Net Profit
            </p>
            <p className="text-3xl font-bold text-white font-mono mt-2">
                R {targetSales.toLocaleString('en-ZA', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
            </p>
            <p className="text-sm text-gray-400">Required Sales</p>
            
            <div className="w-full h-px bg-gray-600 my-3"></div>

            <p className="text-xl font-bold text-green-400 font-mono">
                + R {profitAmount.toLocaleString('en-ZA', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
            </p>
            <p className="text-xs text-gray-500">Projected Profit</p>
        </div>
    );
};

const ProfitTargetMatrix = ({ totalFixedCosts, historicalGrossMargin }) => {

    const profitTargets = useMemo(() => {
        if (historicalGrossMargin <= 0) return [];
        
        const grossMarginDecimal = historicalGrossMargin / 100;

        return [0, 10, 20, 30, 40].map(profitPercent => {
            const netMarginDecimal = profitPercent / 100;
            
            if (grossMarginDecimal <= netMarginDecimal) {
                 return {
                    percent: profitPercent,
                    target: Infinity,
                    profitAmount: Infinity,
                };
            }

            const requiredSales = totalFixedCosts / (grossMarginDecimal - netMarginDecimal);
            const projectedProfit = (requiredSales * netMarginDecimal);

            return {
                percent: profitPercent,
                target: requiredSales,
                profitAmount: projectedProfit,
            };
        });
    }, [totalFixedCosts, historicalGrossMargin]);

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">
                Monthly Sales & Profit Targets
            </h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {profitTargets.map((target) => (
                    target.target === Infinity
                    ? <div key={target.percent} className="p-4 rounded-lg flex flex-col items-center justify-center text-center bg-red-900/50">
                        <p className="font-bold text-lg text-red-400">{target.percent}% Net Profit</p>
                        <p className="text-sm text-red-300 mt-4">Target is unachievable with current Gross Margin.</p>
                      </div>
                    : <TargetCard 
                        key={target.percent}
                        percent={target.percent}
                        targetSales={target.target}
                        profitAmount={target.profitAmount}
                        isBreakEven={target.percent === 0}
                    />
                ))}
            </div>
             <p className="text-xs text-gray-500 mt-4 text-center pt-2 border-t border-gray-700">
                Targets are calculated based on your historical gross margin of **{historicalGrossMargin.toFixed(1)}%** and total fixed costs.
            </p>
        </div>
    );
};

export default ProfitTargetMatrix;




==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\RealTimeValueWidget.jsx
==================================================
// src/components/intelligence/RealTimeValueWidget.jsx (New File)

import React, { useMemo } from 'react';
import { DollarSign, TrendingUp, TrendingDown } from 'lucide-react';

const RealTimeValueWidget = ({ jobs, employee, overheadCostPerHour }) => {
    // Memoize the calculation to avoid re-running on every render
    const metrics = useMemo(() => {
        if (!employee || !jobs || jobs.length === 0) {
            return {
                burdenedRate: 0,
                valueGeneratedPerHour: 0,
                profitabilityRatio: 0,
                totalValueGenerated: 0,
                totalHoursWorked: 0
            };
        }

        const completedJobs = jobs.filter(j => j.status === 'Complete' && j.startedAt && j.completedAt);

        if (completedJobs.length === 0) {
            return {
                burdenedRate: (employee.hourlyRate || 0) + overheadCostPerHour,
                valueGeneratedPerHour: 0,
                profitabilityRatio: 0,
                totalValueGenerated: 0,
                totalHoursWorked: 0
            };
        }

        // 1. Calculate the total value generated and hours worked from completed jobs
        const { totalValue, totalSeconds } = completedJobs.reduce(
            (acc, job) => {
                const durationSeconds = (job.completedAt.toDate().getTime() - job.startedAt.toDate().getTime() - (job.totalPausedMilliseconds || 0)) / 1000;
                acc.totalValue += job.totalCost || 0;
                acc.totalSeconds += durationSeconds > 0 ? durationSeconds : 0;
                return acc;
            },
            { totalValue: 0, totalSeconds: 0 }
        );

        const totalHours = totalSeconds / 3600;

        // 2. Calculate the employee's burdened hourly rate
        const burdenedRate = (employee.hourlyRate || 0) + overheadCostPerHour;

        // 3. Calculate the value they generate per hour
        const valueGeneratedPerHour = totalHours > 0 ? totalValue / totalHours : 0;

        // 4. Calculate the final profitability ratio
        const profitabilityRatio = burdenedRate > 0 ? valueGeneratedPerHour / burdenedRate : 0;

        return {
            burdenedRate,
            valueGeneratedPerHour,
            profitabilityRatio,
            totalValueGenerated: totalValue,
            totalHoursWorked: totalHours
        };
    }, [jobs, employee, overheadCostPerHour]);

    const isProfitable = metrics.profitabilityRatio >= 1.0;
    const colorClasses = isProfitable
        ? "bg-green-500/10 text-green-400 border-green-500/30"
        : "bg-red-500/10 text-red-400 border-red-500/30";

    return (
        <div className={`p-6 rounded-lg border ${colorClasses}`}>
            <h3 className="text-xl font-bold text-white mb-4">Real-Time Value Engine</h3>
            <div className="flex flex-col items-center justify-center space-y-4">
                <div className="text-center">
                    <p className="text-sm text-gray-400">Profitability Ratio</p>
                    <p className={`text-6xl font-bold ${isProfitable ? 'text-green-400' : 'text-red-400'}`}>
                        {metrics.profitabilityRatio.toFixed(2)}x
                    </p>
                    <p className="text-xs text-gray-500">
                        (Value Generated per Hour / Cost per Hour)
                    </p>
                </div>

                <div className="w-full grid grid-cols-2 gap-4 pt-4 border-t border-gray-700">
                    <div className="text-center">
                        <p className="text-sm text-gray-400">Value Generated/hr</p>
                        <p className="text-lg font-semibold text-white">
                            R {metrics.valueGeneratedPerHour.toFixed(2)}
                        </p>
                    </div>
                    <div className="text-center">
                        <p className="text-sm text-gray-400">Burdened Cost/hr</p>
                        <p className="text-lg font-semibold text-white">
                            R {metrics.burdenedRate.toFixed(2)}
                        </p>
                    </div>
                </div>

                {isProfitable ? (
                    <div className="flex items-center text-sm text-green-400">
                        <TrendingUp size={16} className="mr-1" />
                        <span>This employee is generating more value than their cost.</span>
                    </div>
                ) : (
                    <div className="flex items-center text-sm text-red-400">
                        <TrendingDown size={16} className="mr-1" />
                        <span>This employee is currently not covering their cost.</span>
                    </div>
                )}
            </div>
        </div>
    );
};

export default RealTimeValueWidget;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\ReliabilityReport.jsx
==================================================
// src/components/intelligence/ReliabilityReport.jsx (Corrected & Completed)

import React, { useState, useEffect, useMemo } from 'react';
import { collection, query, where, getDocs, orderBy } from 'firebase/firestore';
import { db } from '../../api/firebase';
import Button from '../ui/Button';
import { Clock, UserCheck } from 'lucide-react';

const KpiCard = ({ title, value, unit }) => (
    <div className="bg-gray-900/50 p-4 rounded-lg text-center">
        <p className="text-sm text-gray-400">{title}</p>
        <p className="text-3xl font-bold text-white">
            {value} <span className="text-xl text-gray-400">{unit}</span>
        </p>
    </div>
);

// Helper function to check punctuality, adapted from PermanentPayroll.jsx
const checkPunctuality = (date, startTime, endTime) => {
    const dayOfWeek = date.getDay(); // Sunday = 0, Friday = 5
    // Skip checks for weekends
    if (dayOfWeek === 0 || dayOfWeek === 6) {
        return { isLate: false, leftEarly: false, minutesLate: 0 };
    }
    
    const standardStartTime = new Date(date.getTime());
    standardStartTime.setHours(7, 0, 0, 0);

    const standardEndTime = new Date(date.getTime());
    // Monday to Thursday
    if (dayOfWeek >= 1 && dayOfWeek <= 4) { 
        standardEndTime.setHours(17, 0, 0, 0);
    // Friday
    } else { 
        standardEndTime.setHours(15, 45, 0, 0);
    }

    const isLate = startTime > standardStartTime;
    const leftEarly = endTime < standardEndTime;

    let minutesLate = 0;
    if (isLate) {
        minutesLate = (startTime.getTime() - standardStartTime.getTime()) / (1000 * 60);
    }

    return { isLate, leftEarly, minutesLate: Math.max(0, minutesLate) };
};


const ReliabilityReport = ({ employeeId }) => {
    const [timeEntries, setTimeEntries] = useState([]);
    const [loading, setLoading] = useState(true);
    const [filter, setFilter] = useState('month'); // 'week', 'month', 'year'

    useEffect(() => {
        const fetchScanEventData = async () => {
            if (!employeeId) return;
            setLoading(true);
            try {
                // 1. Query the correct 'scanEvents' collection
                const scanEventsQuery = query(
                    collection(db, 'scanEvents'),
                    where('employeeId', '==', employeeId),
                    orderBy('timestamp', 'asc')
                );
                const snapshot = await getDocs(scanEventsQuery);
                const events = snapshot.docs.map(doc => ({ ...doc.data(), timestamp: doc.data().timestamp.toDate() }));

                // 2. Group scans by day
                const dailyScans = {};
                for (const event of events) {
                    const dateStr = event.timestamp.toISOString().split('T')[0];
                    if (!dailyScans[dateStr]) {
                        dailyScans[dateStr] = {
                            date: new Date(dateStr),
                            scans: []
                        };
                    }
                    dailyScans[dateStr].scans.push(event.timestamp);
                }

                // 3. Process each day to get start/end times and punctuality
                const processedEntries = Object.values(dailyScans).map(dayData => {
                    if (dayData.scans.length === 0) return null;
                    const firstScan = dayData.scans[0];
                    const lastScan = dayData.scans[dayData.scans.length - 1];
                    const punctuality = checkPunctuality(dayData.date, firstScan, lastScan);
                    return {
                        date: dayData.date,
                        ...punctuality
                    };
                }).filter(Boolean); // Filter out any null entries

                setTimeEntries(processedEntries);

            } catch (err) {
                console.error("Error fetching scan event data for reliability report:", err);
            }
            setLoading(false);
        };
        fetchScanEventData();
    }, [employeeId]);

    const filteredMetrics = useMemo(() => {
        const now = new Date();
        let startDate;

        if (filter === 'week') {
            const dayOfWeek = now.getDay();
            const diff = now.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); 
            startDate = new Date(now.setDate(diff));
            startDate.setHours(0, 0, 0, 0);
        } else if (filter === 'month') {
            startDate = new Date(now.getFullYear(), now.getMonth(), 1);
        } else { // year
            startDate = new Date(now.getFullYear(), 0, 1);
        }

        const filtered = timeEntries.filter(entry => entry.date >= startDate);

        let daysLate = 0;
        let daysLeftEarly = 0;
        let totalMinutesLate = 0;

        filtered.forEach(entry => {
            if (entry.isLate) {
                daysLate++;
                totalMinutesLate += entry.minutesLate;
            }
            if (entry.leftEarly) {
                daysLeftEarly++;
            }
        });

        return { daysLate, daysLeftEarly, totalMinutesLate };
    }, [timeEntries, filter]);

    return (
        <div className="bg-gray-800/50 p-6 rounded-lg border border-gray-700">
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-bold text-white flex items-center gap-2">
                    <UserCheck size={20} className="text-teal-400" />
                    Reliability Report
                </h3>
                <div className="flex gap-1 bg-gray-700 p-1 rounded-lg">
                    <Button onClick={() => setFilter('week')} variant={filter === 'week' ? 'primary' : 'secondary'} className="py-1 px-3 text-xs">This Week</Button>
                    <Button onClick={() => setFilter('month')} variant={filter === 'month' ? 'primary' : 'secondary'} className="py-1 px-3 text-xs">This Month</Button>
                    <Button onClick={() => setFilter('year')} variant={filter === 'year' ? 'primary' : 'secondary'} className="py-1 px-3 text-xs">This Year</Button>
                </div>
            </div>
            {loading ? (
                <p className="text-gray-400">Loading reliability data...</p>
            ) : timeEntries.length === 0 ? (
                 <p className="text-gray-500 text-center py-4">No scan event data found for this employee.</p>
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <KpiCard title="Days Late" value={filteredMetrics.daysLate} unit="days" />
                    <KpiCard title="Days Left Early" value={filteredMetrics.daysLeftEarly} unit="days" />
                    <KpiCard title="Total Minutes Late" value={Math.round(filteredMetrics.totalMinutesLate)} unit="mins" />
                </div>
            )}
        </div>
    );
};

export default ReliabilityReport;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\ReworkAnalysisModal.jsx
==================================================
// src/components/intelligence/ReworkAnalysisModal.jsx (New File)

import React, { useMemo } from 'react';
import { X } from 'lucide-react';
import Button from '../ui/Button';

const ReworkAnalysisModal = ({ jobs, employeeName, onClose }) => {
    const analysis = useMemo(() => {
        if (!jobs) return {};
        
        const issueJobs = jobs.filter(job => job.status === 'Issue' || job.status === 'Archived - Issue');
        
        const reasons = issueJobs.reduce((acc, job) => {
            const reason = job.issueReason || 'No Reason Provided';
            acc[reason] = (acc[reason] || 0) + 1;
            return acc;
        }, {});

        // Sort reasons from most frequent to least
        return Object.entries(reasons).sort(([, a], [, b]) => b - a);

    }, [jobs]);

    return (
        <div 
            onClick={onClose}
            className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4 animate-fade-in"
        >
            <div 
                onClick={(e) => e.stopPropagation()}
                className="bg-gray-800 rounded-xl border border-gray-700 w-full max-w-lg max-h-[80vh] flex flex-col"
            >
                <div className="flex justify-between items-center p-4 border-b border-gray-700">
                    <div>
                        <h2 className="text-xl font-bold text-white">Root Cause Analysis</h2>
                        <p className="text-sm text-gray-400">For {employeeName}</p>
                    </div>
                    <Button onClick={onClose} variant="secondary" className="p-2">
                        <X size={20} />
                    </Button>
                </div>

                <div className="p-6 overflow-y-auto space-y-3">
                    {analysis.length > 0 ? (
                        analysis.map(([reason, count]) => (
                            <div key={reason} className="flex justify-between items-center bg-gray-700/50 p-3 rounded-lg">
                                <span className="font-medium text-gray-200">{reason}</span>
                                <span className="font-bold text-lg text-red-400">{count} {count > 1 ? 'times' : 'time'}</span>
                            </div>
                        ))
                    ) : (
                        <p className="text-center text-gray-500 py-8">This employee has no jobs with recorded issues.</p>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ReworkAnalysisModal;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\SalesTargetCalculator.jsx
==================================================
// src/components/intelligence/SalesTargetCalculator.jsx (UPGRADED)
import React, { useMemo } from 'react';
import { Target, DollarSign, TrendingUp } from 'lucide-react';

const TargetRow = ({ percent, targetSales, profitAmount, color }) => (
    <div className={`grid grid-cols-3 gap-4 items-center p-3 rounded-lg ${color}`}>
        <p className="font-bold text-lg flex items-center gap-2">
            <TrendingUp size={20} />
            {percent}% Profit Target
        </p>
        <p className="font-mono text-xl text-center">
            R {targetSales.toLocaleString('en-ZA', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
        </p>
        <p className="font-mono text-lg text-right text-green-400">
            + R {profitAmount.toLocaleString('en-ZA', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
        </p>
    </div>
);


const SalesTargetCalculator = ({ totalFixedCosts, historicalGrossMargin }) => {

    const profitTargets = useMemo(() => {
        if (historicalGrossMargin <= 0) return [];
        
        const marginDecimal = historicalGrossMargin / 100;
        const breakEvenSales = totalFixedCosts / marginDecimal;

        return [0, 10, 20, 30, 40].map(profitPercent => {
            const desiredProfitAmount = breakEvenSales * (profitPercent / 100);
            const requiredSales = (totalFixedCosts + desiredProfitAmount) / marginDecimal;
            return {
                percent: profitPercent,
                target: requiredSales,
                profitAmount: desiredProfitAmount,
            };
        });
    }, [totalFixedCosts, historicalGrossMargin]);

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4 flex items-center gap-2">
                <Target className="text-green-400" />
                Monthly Sales & Profit Targets
            </h3>
            <div className="space-y-3">
                 <div className="grid grid-cols-3 gap-4 px-3 text-sm font-semibold text-gray-400">
                    <span>Target Level</span>
                    <span className="text-center">Required Sales</span>
                    <span className="text-right">Projected Profit</span>
                </div>
                {profitTargets.map((target, index) => (
                    <TargetRow 
                        key={target.percent}
                        percent={target.percent}
                        targetSales={target.target}
                        profitAmount={target.profitAmount}
                        color={index === 0 ? 'bg-gray-700/50' : 'bg-gray-900/50'}
                    />
                ))}
                 <p className="text-xs text-gray-500 mt-2 text-center pt-2 border-t border-gray-700">
                    Targets are calculated based on your historical gross margin of {historicalGrossMargin.toFixed(1)}% and total fixed costs.
                </p>
            </div>
        </div>
    );
};

export default SalesTargetCalculator;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\SalesTrendWidget.jsx
==================================================
// src/components/intelligence/SalesTrendWidget.jsx (NEW FILE)
import React from 'react';
import { TrendingUp, TrendingDown, Minus } from 'lucide-react';

const SalesTrendWidget = ({ percentageChange }) => {
    
    const isPositive = percentageChange > 0;
    const isNegative = percentageChange < 0;

    const getTrendInfo = () => {
        if (isPositive) return {
            icon: <TrendingUp size={32} />,
            textColor: 'text-green-400',
            text: `${percentageChange.toFixed(1)}%`
        };
        if (isNegative) return {
            icon: <TrendingDown size={32} />,
            textColor: 'text-red-400',
            text: `${percentageChange.toFixed(1)}%`
        };
        return {
            icon: <Minus size={32} />,
            textColor: 'text-gray-400',
            text: `${percentageChange.toFixed(1)}%`
        };
    };
    
    const trend = getTrendInfo();

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 h-full flex flex-col justify-center items-center">
            <p className="text-gray-400 text-sm font-medium mb-2">
                This Month's Sales vs. Last Year
            </p>
            <div className={`flex items-center space-x-3 ${trend.textColor}`}>
                {trend.icon}
                <span className="text-5xl font-bold">
                    {trend.text}
                </span>
            </div>
        </div>
    );
};

export default SalesTrendWidget;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\SkillProgressionWidget.jsx
==================================================
import React, { useState, useEffect } from 'react';
// 1. IMPORT THE GENERIC deleteDocument FUNCTION and an icon
import { getSkillHistoryForEmployee, getSkills, deleteDocument } from '../../api/firestore';
import Button from '../ui/Button';
import { Trash2 } from 'lucide-react';

const SkillProgressionWidget = ({ employeeId }) => {
    const [skillHistory, setSkillHistory] = useState([]);
    const [allSkills, setAllSkills] = useState([]);
    const [selectedSkillId, setSelectedSkillId] = useState('');
    const [loading, setLoading] = useState(true);

    // Encapsulate fetch logic to be reusable
    const fetchData = async () => {
        if (!employeeId) return;
        setLoading(true);
        try {
            const [history, skills] = await Promise.all([
                getSkillHistoryForEmployee(employeeId),
                getSkills()
            ]);

            // 2. SORT THE DATA IN THE BROWSER (client-side) after fetching
            const sortedHistory = history.sort((a, b) => {
                const dateA = a.assessmentDate?.toDate() || 0;
                const dateB = b.assessmentDate?.toDate() || 0;
                return dateB - dateA; // Sort descending (newest first)
            });

            setSkillHistory(sortedHistory);
            setAllSkills(skills);
            
            if (sortedHistory.length > 0) {
                const skillCounts = sortedHistory.reduce((acc, record) => {
                    acc[record.skillId] = (acc[record.skillId] || 0) + 1;
                    return acc;
                }, {});
                const mostFrequentSkill = Object.keys(skillCounts).sort((a, b) => skillCounts[b] - skillCounts[a])[0];
                setSelectedSkillId(mostFrequentSkill);
            }
        } catch (error) {
            console.error("Error fetching skill progression data:", error);
            alert("Could not load skill history.");
        }
        setLoading(false);
    };

    useEffect(() => {
        fetchData();
    }, [employeeId]);

    // 3. ADD A HANDLER FOR DELETING A HISTORY RECORD
    const handleDeleteHistory = async (recordId) => {
        if (window.confirm("Are you sure you want to permanently delete this history record? This action cannot be undone.")) {
            try {
                await deleteDocument('skillHistory', recordId);
                // Refresh the data from local state for an instant UI update
                setSkillHistory(prev => prev.filter(record => record.id !== recordId));
                alert("History record deleted.");
            } catch (error) {
                console.error("Error deleting history record:", error);
                alert("Failed to delete history record.");
            }
        }
    };

    const filteredHistory = skillHistory.filter(record => record.skillId === selectedSkillId);

    return (
        <div className="bg-gray-800/50 p-6 rounded-lg border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Skill Progression Tracker</h3>
            
            {loading ? (
                <p className="text-gray-400">Loading history...</p>
            ) : allSkills.length === 0 || skillHistory.length === 0 ? (
                <p className="text-gray-400">No skill history available for this employee yet.</p>
            ) : (
                <>
                    <div className="mb-4">
                        <label htmlFor="skill-select" className="block text-sm font-medium text-gray-300 mb-1">
                            Select a skill to see its progression:
                        </label>
                        <select
                            id="skill-select"
                            value={selectedSkillId}
                            onChange={(e) => setSelectedSkillId(e.target.value)}
                            className="bg-gray-900 border border-gray-600 text-white text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                        >
                            <option value="" disabled>-- Select a Skill --</option>
                            {allSkills
                                .filter(skill => skillHistory.some(h => h.skillId === skill.id))
                                .map(skill => (
                                <option key={skill.id} value={skill.id}>{skill.name}</option>
                            ))}
                        </select>
                    </div>

                    <div className="space-y-3">
                        {filteredHistory.length > 0 ? (
                            filteredHistory.map(record => (
                                <div key={record.id} className="flex justify-between items-center bg-gray-900/50 p-3 rounded-md">
                                    <div className="flex flex-col">
                                        <p className="font-semibold text-blue-400">{record.proficiency}</p>
                                        <p className="text-gray-500 text-xs">
                                            {record.assessmentDate ? new Date(record.assessmentDate.toDate()).toLocaleString() : 'Date unknown'}
                                        </p>
                                    </div>
                                    {/* 4. ADD THE DELETE BUTTON TO EACH RECORD */}
                                    <Button onClick={() => handleDeleteHistory(record.id)} variant="icon" className="text-red-500 hover:text-red-400">
                                        <Trash2 size={18} />
                                    </Button>
                                </div>
                            ))
                        ) : (
                            <p className="text-gray-400">Please select a skill to view its history.</p>
                        )}
                    </div>
                </>
            )}
        </div>
    );
};

export default SkillProgressionWidget;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\TopReworkCausesWidget.jsx
==================================================
// src/components/intelligence/TopReworkCausesWidget.jsx (New File)

import React from 'react';
import { AlertCircle } from 'lucide-react';

const TopReworkCausesWidget = ({ data }) => {
    // Handle the case where there are no issue jobs to analyze
    if (!data || data.length === 0) {
        return (
            <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 h-full flex flex-col">
                <h3 className="font-bold text-white mb-4 flex items-center">
                    <AlertCircle size={20} className="mr-2 text-orange-400"/>
                    Top Rework Causes
                </h3>
                <div className="flex-grow flex items-center justify-center">
                    <p className="text-gray-500 text-sm">No jobs with issues recorded yet.</p>
                </div>
            </div>
        );
    }

    // Find the highest count to make the bar widths proportional
    const maxCount = Math.max(...data.map(([, count]) => count), 1);

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="font-bold text-white mb-4 flex items-center">
                <AlertCircle size={20} className="mr-2 text-orange-400"/>
                Top Rework Causes
            </h3>
            <div className="space-y-3">
                {data.map(([reason, count]) => (
                    <div key={reason} className="space-y-1">
                        <div className="flex justify-between items-center text-sm">
                            <p className="text-gray-300 truncate font-medium" title={reason}>{reason}</p>
                            <p className="text-white font-semibold">{count}</p>
                        </div>
                        <div className="w-full bg-gray-700 rounded-full h-2.5">
                            <div
                                className="bg-orange-500 h-2.5 rounded-full transition-all duration-500"
                                style={{ width: `${(count / maxCount) * 100}%` }}
                            ></div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default TopReworkCausesWidget;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\TrophyCase.jsx
==================================================
// src/components/intelligence/TrophyCase.jsx (New File)

import React from 'react';
import { Award, Zap, ShieldCheck, Star, Gem } from 'lucide-react';

const Badge = ({ icon, label, color, description }) => (
    <div className="flex flex-col items-center text-center p-4 bg-gray-800 rounded-lg border border-gray-700" title={description}>
        <div className={`p-3 rounded-full ${color}`}>
            {icon}
        </div>
        <p className="mt-2 text-sm font-semibold text-white">{label}</p>
    </div>
);

const TrophyCase = ({ badges }) => {
    if (badges.length === 0) {
        return null; // Don't render the component if there are no badges to show
    }

    return (
        <div className="bg-gray-800/50 p-6 rounded-lg border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4 flex items-center gap-2">
                <Award size={20} className="text-yellow-400" />
                Trophy Case
            </h3>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                {badges.map(badge => (
                    <Badge key={badge.id} {...badge} />
                ))}
            </div>
        </div>
    );
};

export default TrophyCase;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\ValueWasteAnalysis.jsx
==================================================
import React, { useMemo } from 'react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const ValueWasteAnalysis = ({ jobs }) => {
    const timeAnalysisData = useMemo(() => {
        if (!jobs || jobs.length === 0) {
            return { valueAddedHours: 0, nonValueHours: 0, wastedHours: 0 };
        }

        let valueAddedSeconds = 0;
        let nonValueSeconds = 0; // Paused time
        let wastedSeconds = 0;

        jobs.forEach(job => {
            if (!job.startedAt || !job.completedAt) return;

            const startTime = job.startedAt.toDate().getTime();
            const completionTime = job.completedAt.toDate().getTime();
            const totalDurationSeconds = (completionTime - startTime) / 1000;
            const pauseDurationSeconds = (job.totalPausedMilliseconds || 0) / 1000;
            const actualWorkSeconds = totalDurationSeconds - pauseDurationSeconds;

            if (actualWorkSeconds < 0) return;

            // Categorize the time
            if (job.status === 'Complete') {
                valueAddedSeconds += actualWorkSeconds;
                nonValueSeconds += pauseDurationSeconds;
            } else if (job.status === 'Issue' || job.status === 'Archived - Issue') {
                wastedSeconds += actualWorkSeconds;
                nonValueSeconds += pauseDurationSeconds;
            }
        });

        return {
            valueAddedHours: valueAddedSeconds / 3600,
            nonValueHours: nonValueSeconds / 3600,
            wastedHours: wastedSeconds / 3600,
        };
    }, [jobs]);

    const chartData = [
        {
            name: 'Time Allocation',
            // Use keys that are simple and will match the dataKey prop in the <Bar> components
            valueAdded: timeAnalysisData.valueAddedHours,
            paused: timeAnalysisData.nonValueHours,
            wasted: timeAnalysisData.wastedHours,
        }
    ];

    const totalHours = timeAnalysisData.valueAddedHours + timeAnalysisData.nonValueHours + timeAnalysisData.wastedHours;
    if (totalHours === 0) {
        return (
             <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
                <h3 className="text-xl font-bold text-white mb-4">Value vs. Waste Analysis</h3>
                <p className="text-gray-500 text-center py-10">Not enough job history to analyze time allocation.</p>
            </div>
        )
    }

    return (
        <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4">Value vs. Waste Analysis (Total Hours Logged)</h3>
            <ResponsiveContainer width="100%" height={150}>
                <BarChart data={chartData} layout="vertical" stackOffset="expand">
                    <XAxis type="number" hide domain={[0, 1]} />
                    <YAxis type="category" dataKey="name" hide />
                    <Tooltip 
                        formatter={(value, name) => [`${(value * 100).toFixed(1)}%`, name]}
                        contentStyle={{ backgroundColor: '#1f2937', border: '1px solid #4b5563' }}
                    />
                    <Legend
                        // THIS IS THE CORRECTED FORMATTER LOGIC
                        formatter={(value, entry) => {
                            const { dataKey, color } = entry;
                            const hours = chartData[0][dataKey];
                            return <span style={{ color }}>{value} ({hours.toFixed(1)} hrs)</span>;
                        }}
                        iconType="circle"
                    />
                    {/* The dataKey here now perfectly matches the keys in chartData */}
                    <Bar dataKey="valueAdded" name="Value-Added Time" stackId="a" fill="#22c55e" />
                    <Bar dataKey="paused" name="Non-Value Time (Paused)" stackId="a" fill="#eab308" />
                    <Bar dataKey="wasted" name="Wasted Time (Issues)" stackId="a" fill="#ef4444" />
                </BarChart>
            </ResponsiveContainer>
        </div>
    );
};

export default ValueWasteAnalysis;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\WorkforceCapacityPlanner.jsx
==================================================
// src/components/intelligence/WorkforceCapacityPlanner.jsx (UPDATED with Gross Margin)
import React, { useState, useEffect, useMemo } from 'react';
import Input from '../ui/Input';
import Button from '../ui/Button';
import { TrendingUp, Users, Zap, DollarSign, PlusCircle, Trash2, Percent } from 'lucide-react';

const EmployeeRow = ({ employee, onRemove }) => (
    <div className="grid grid-cols-4 gap-4 items-center p-2 bg-gray-700/50 rounded-lg">
        <p className="text-white font-medium truncate">{employee.name}</p>
        <p className="text-gray-300 font-mono text-center">R {employee.hourlyRate.toFixed(2)}</p>
        <p className={`font-bold text-center ${employee.efficiency >= 100 ? 'text-green-400' : 'text-yellow-400'}`}>
            {employee.efficiency.toFixed(0)}%
        </p>
        {onRemove && (
            <div className="text-right">
                <Button onClick={onRemove} variant="danger" size="sm" className="p-1 h-7 w-7">
                    <Trash2 size={14} />
                </Button>
            </div>
        )}
    </div>
);

const WorkforceCapacityPlanner = ({ realEmployees, jobs }) => {
    const [scenario, setScenario] = useState({
        targetSales: '',
        overheads: '',
        grossMargin: '35', // NEW: Added Gross Margin with a default of 35%
    });
    const [simulatedEmployees, setSimulatedEmployees] = useState([]);
    const [newSimEmployee, setNewSimEmployee] = useState({ name: 'Sim Employee', hourlyRate: '150', efficiency: '95' });

    const allEmployeesInScenario = useMemo(() => {
        return [...realEmployees, ...simulatedEmployees];
    }, [realEmployees, simulatedEmployees]);

    const results = useMemo(() => {
        const targetSales = parseFloat(scenario.targetSales) || 0;
        const overheads = parseFloat(scenario.overheads) || 0;
        const grossMargin = parseFloat(scenario.grossMargin) || 0;

        if (targetSales === 0) return { requiredValue: 0, availableValue: 0, netProfit: 0, requiredEmployees: 'N/A' };

        // 1. Calculate Gross Profit based on the user's input margin
        const grossProfit = targetSales * (grossMargin / 100);

        // 2. Calculate Net Profit by subtracting overheads
        const netProfit = grossProfit - overheads;
        
        // 3. Calculate Required Production Capacity
        // This is now based on the Gross Profit, which represents the value added by the workshop
        const requiredValue = grossProfit;

        // 4. Calculate the team's available capacity
        const totalAvailableValue = allEmployeesInScenario.reduce((total, emp) => {
            const monthlyHours = 173.2;
            const efficiencyFactor = emp.efficiency / 100;
            const valueGenerated = emp.hourlyRate * monthlyHours * efficiencyFactor;
            return total + valueGenerated;
        }, 0);
        
        // 5. Suggest required employees based on value generation
        const avgEmployeeValue = allEmployeesInScenario.length > 0
            ? totalAvailableValue / allEmployeesInScenario.length
            : (parseFloat(newSimEmployee.hourlyRate) || 150) * 173.2 * ((parseFloat(newSimEmployee.efficiency) || 95) / 100);
            
        const requiredEmployees = avgEmployeeValue > 0 ? (requiredValue / avgEmployeeValue).toFixed(1) : 'N/A';

        return {
            requiredValue: requiredValue,
            availableValue: totalAvailableValue,
            netProfit,
            requiredEmployees
        };

    }, [scenario, allEmployeesInScenario, newSimEmployee]);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setScenario(prev => ({ ...prev, [name]: value }));
    };
    
    const handleSimInputChange = (e) => {
        const { name, value } = e.target;
        setNewSimEmployee(prev => ({ ...prev, [name]: value }));
    };
    
    const addSimulatedEmployee = () => {
        if (parseFloat(newSimEmployee.hourlyRate) > 0 && parseFloat(newSimEmployee.efficiency) > 0) {
            setSimulatedEmployees(prev => [...prev, {
                ...newSimEmployee,
                id: `sim-${Date.now()}`,
                hourlyRate: parseFloat(newSimEmployee.hourlyRate),
                efficiency: parseFloat(newSimEmployee.efficiency),
            }]);
        }
    };

    const removeSimulatedEmployee = (id) => {
        setSimulatedEmployees(prev => prev.filter(emp => emp.id !== id));
    };

    const formatCurrency = (value) => `R ${value.toLocaleString('en-ZA', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}`;

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4 flex items-center gap-2">
                <TrendingUp className="text-blue-400" />
                Workforce & Capacity Planner
            </h3>
            
            {/* INPUTS */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6 p-4 bg-gray-900/50 rounded-lg">
                <Input 
                    label="Target Monthly Sales (R)" 
                    name="targetSales" 
                    type="number" 
                    value={scenario.targetSales} 
                    onChange={handleInputChange} 
                    placeholder="e.g., 500000" 
                />
                <Input 
                    label="Fixed Overheads (R)" 
                    name="overheads" 
                    type="number" 
                    value={scenario.overheads} 
                    onChange={handleInputChange}
                    placeholder="e.g., 145000"
                />
                 <Input 
                    label="Gross Margin (%)" 
                    name="grossMargin" 
                    type="number" 
                    value={scenario.grossMargin} 
                    onChange={handleInputChange}
                    placeholder="e.g., 35"
                />
            </div>

            {/* TEAM COMPOSITION */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Employee List */}
                <div className="space-y-3">
                    <h4 className="font-semibold text-lg text-white">Team Composition</h4>
                    <div className="grid grid-cols-4 gap-4 px-2 text-sm text-gray-400 font-bold">
                        <span>Employee</span>
                        <span className="text-center">Rate/hr</span>
                        <span className="text-center">Efficiency</span>
                        <span className="text-right">Action</span>
                    </div>
                    <div className="space-y-2 max-h-60 overflow-y-auto pr-2">
                        {realEmployees.map(emp => <EmployeeRow key={emp.id} employee={emp} />)}
                        {simulatedEmployees.map(emp => <EmployeeRow key={emp.id} employee={emp} onRemove={() => removeSimulatedEmployee(emp.id)} />)}
                    </div>
                     <div className="grid grid-cols-4 gap-2 items-end p-2 border-t border-gray-700 pt-3">
                        <Input label="Sim Rate" name="hourlyRate" type="number" value={newSimEmployee.hourlyRate} onChange={handleSimInputChange} />
                        <Input label="Sim Efficiency" name="efficiency" type="number" value={newSimEmployee.efficiency} onChange={handleSimInputChange} />
                        <div className="col-span-2 text-right">
                             <Button onClick={addSimulatedEmployee}><PlusCircle size={16} className="mr-2"/>Add Sim Employee</Button>
                        </div>
                    </div>
                </div>

                {/* Projected Results */}
                <div className="space-y-4 bg-gray-900/50 p-6 rounded-lg">
                    <h4 className="font-semibold text-lg text-white">Projected Results</h4>
                    <div className="text-center bg-gray-700/50 p-4 rounded-lg">
                        <p className="text-sm text-gray-400">Required Team Value vs. Available</p>
                        <p className={`text-3xl font-bold mt-1 ${results.availableValue < results.requiredValue ? 'text-red-400' : 'text-green-400'}`}>
                            {formatCurrency(results.requiredValue)} / {formatCurrency(results.availableValue)}
                        </p>
                    </div>
                     <div className="grid grid-cols-2 gap-4">
                         <div className="text-center bg-gray-700/50 p-4 rounded-lg">
                            <p className="text-sm text-gray-400">Suggested Workforce</p>
                            <p className="text-3xl font-bold text-white">
                                {results.requiredEmployees}
                                <span className="text-lg ml-1">people</span>
                            </p>
                        </div>
                        <div className="text-center bg-blue-600/20 p-4 rounded-lg border border-blue-500">
                            <p className="text-sm text-blue-300">Projected Net Profit</p>
                            <p className={`text-3xl font-bold ${results.netProfit >= 0 ? 'text-white' : 'text-red-400'}`}>
                                {formatCurrency(results.netProfit)}
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default WorkforceCapacityPlanner;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\WorkshopThroughputGraph.jsx
==================================================
// src/components/intelligence/WorkshopThroughputGraph.jsx (NEW FILE)
import React from 'react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from 'recharts';
import { HardHat } from 'lucide-react';

const CustomTooltip = ({ active, payload, label }) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-gray-900/80 p-3 border border-gray-700 rounded-lg shadow-lg">
        <p className="label text-sm text-white font-bold">{`Week of ${label}`}</p>
        <p className="intro text-blue-400">{`Jobs Completed: ${payload[0].value}`}</p>
      </div>
    );
  }
  return null;
};

const WorkshopThroughputGraph = ({ jobCompletionData }) => {
    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 h-full">
            <h3 className="font-bold text-white mb-4 flex items-center gap-2">
                <HardHat size={20} className="text-yellow-400"/>
                Workshop Throughput (Last 8 Weeks)
            </h3>
            <ResponsiveContainer width="100%" height={300}>
                <BarChart data={jobCompletionData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#4b556330" />
                    <XAxis dataKey="name" stroke="#9ca3af" fontSize={12} tickLine={false} axisLine={false} />
                    <YAxis stroke="#9ca3af" fontSize={12} tickLine={false} axisLine={false} allowDecimals={false} />
                    <Tooltip content={<CustomTooltip />} cursor={{fill: 'rgba(107, 114, 128, 0.1)'}}/>
                    <Bar dataKey="jobs" fill="#f59e0b" radius={[4, 4, 0, 0]} barSize={30} name="Jobs Completed" />
                </BarChart>
            </ResponsiveContainer>
        </div>
    );
};

export default WorkshopThroughputGraph;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\YearToDateComparison.jsx
==================================================
// src/components/intelligence/YearToDateComparison.jsx (NEW FILE)
import React from 'react';
import { TrendingUp, TrendingDown, Minus, Calendar } from 'lucide-react';

const YearToDateComparison = ({ percentageChange }) => {
    
    const isPositive = percentageChange > 0;
    const isNegative = percentageChange < 0;

    const getTrendInfo = () => {
        if (isPositive) return {
            icon: <TrendingUp size={32} />,
            textColor: 'text-green-400',
            text: `${percentageChange.toFixed(1)}%`
        };
        if (isNegative) return {
            icon: <TrendingDown size={32} />,
            textColor: 'text-red-400',
            text: `${percentageChange.toFixed(1)}%`
        };
        return {
            icon: <Minus size={32} />,
            textColor: 'text-gray-400',
            text: `${percentageChange.toFixed(1)}%`
        };
    };
    
    const trend = getTrendInfo();

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 h-full flex flex-col justify-center items-center">
            <p className="text-gray-400 text-sm font-medium mb-2 flex items-center gap-2">
                <Calendar size={14} />
                Year-to-Date Sales vs. Last Year
            </p>
            <div className={`flex items-center space-x-3 ${trend.textColor}`}>
                {trend.icon}
                <span className="text-5xl font-bold">
                    {trend.text}
                </span>
            </div>
        </div>
    );
};

export default YearToDateComparison;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\YoYProfitWidget.jsx
==================================================
// src/components/intelligence/YoYProfitWidget.jsx (UPDATED for new layout)
import React from 'react';
import { TrendingUp, TrendingDown, Minus, Percent } from 'lucide-react';

const YoYProfitWidget = ({ currentMonthProfit, lastYearProfit }) => {
    
    const percentageChange = (() => {
        if (lastYearProfit === 0 && currentMonthProfit > 0) return 100;
        if (lastYearProfit === 0) return 0;
        // Handle case where last year was a loss
        if (lastYearProfit < 0) {
            return ((currentMonthProfit - lastYearProfit) / Math.abs(lastYearProfit)) * 100;
        }
        return ((currentMonthProfit - lastYearProfit) / lastYearProfit) * 100;
    })();

    const isPositive = percentageChange > 0;
    const isNegative = percentageChange < 0;

    const getTrendInfo = () => {
        if (isPositive) return {
            icon: <TrendingUp size={20} />,
            textColor: 'text-green-400',
            text: `${percentageChange.toFixed(1)}% vs. Last Year`
        };
        if (isNegative) return {
            icon: <TrendingDown size={20} />,
            textColor: 'text-red-400',
            text: `${percentageChange.toFixed(1)}% vs. Last Year`
        };
        return {
            icon: <Minus size={20} />,
            textColor: 'text-gray-400',
            text: 'No Change vs. Last Year'
        };
    };
    
    const trend = getTrendInfo();
    const profitColor = currentMonthProfit >= 0 ? 'text-white' : 'text-red-400';

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 h-full flex flex-col justify-between">
            <div>
                <p className="text-gray-400 text-sm font-medium flex items-center gap-2">
                    <Percent size={16} />
                    This Month's Profit (from Accounting)
                </p>
                <p className={`text-4xl font-bold mt-2 ${profitColor}`}>
                    R {currentMonthProfit.toLocaleString('en-ZA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                </p>
            </div>
            <div className={`mt-4 flex items-center space-x-2 ${trend.textColor}`}>
                {trend.icon}
                <span className="font-semibold">
                    {trend.text}
                </span>
            </div>
        </div>
    );
};

export default YoYProfitWidget;




==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\YoYSalesComparison.jsx
==================================================
// src/components/intelligence/YoYSalesComparison.jsx (NEW FILE)
import React from 'react';
import { TrendingUp, TrendingDown, Minus, DollarSign } from 'lucide-react';

const YoYSalesComparison = ({ currentMonthSales, lastYearSales }) => {
    
    const percentageChange = (() => {
        if (lastYearSales === 0 && currentMonthSales > 0) return 100; // Growth from zero
        if (lastYearSales === 0) return 0; // No change from zero
        return ((currentMonthSales - lastYearSales) / lastYearSales) * 100;
    })();

    const isPositive = percentageChange > 0;
    const isNegative = percentageChange < 0;

    const getTrendInfo = () => {
        if (isPositive) return {
            icon: <TrendingUp size={20} />,
            textColor: 'text-green-400',
            text: `${percentageChange.toFixed(1)}% vs. Last Year`
        };
        if (isNegative) return {
            icon: <TrendingDown size={20} />,
            textColor: 'text-red-400',
            text: `${percentageChange.toFixed(1)}% vs. Last Year`
        };
        return {
            icon: <Minus size={20} />,
            textColor: 'text-gray-400',
            text: 'No Change vs. Last Year'
        };
    };
    
    const trend = getTrendInfo();

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 h-full flex flex-col justify-between">
            <div>
                <p className="text-gray-400 text-sm font-medium flex items-center gap-2">
                    <DollarSign size={16} />
                    This Month's Sales (from Accounting)
                </p>
                <p className="text-4xl font-bold text-white mt-2">
                    R {currentMonthSales.toLocaleString('en-ZA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                </p>
            </div>
            <div className={`mt-4 flex items-center space-x-2 ${trend.textColor}`}>
                {trend.icon}
                <span className="font-semibold">
                    {trend.text}
                </span>
            </div>
        </div>
    );
};

export default YoYSalesComparison;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\YoYSalesGraph.jsx
==================================================
// src/components/intelligence/YoYSalesGraph.jsx (UPDATED to Line Chart)
import React from 'react';
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Legend } from 'recharts';
import { TrendingUp } from 'lucide-react';

const CustomTooltip = ({ active, payload, label }) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-gray-900/80 p-3 border border-gray-700 rounded-lg shadow-lg">
        <p className="label text-sm text-white font-bold">{label}</p>
        {payload.map(pld => (
          <div key={pld.dataKey} style={{ color: pld.color }}>
            {pld.dataKey}: R {pld.value.toLocaleString('en-ZA')}
          </div>
        ))}
      </div>
    );
  }
  return null;
};

const YoYSalesGraph = ({ salesData, lastYear, currentYear }) => {

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 h-full">
            <h3 className="font-bold text-white mb-4 flex items-center gap-2">
                <TrendingUp size={20} className="text-green-400"/>
                Monthly Sales Comparison
            </h3>
            <ResponsiveContainer width="100%" height={300}>
                <LineChart data={salesData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#4b556330" />
                    <XAxis dataKey="name" stroke="#9ca3af" fontSize={12} tickLine={false} axisLine={false} />
                    <YAxis stroke="#9ca3af" fontSize={12} tickLine={false} axisLine={false} tickFormatter={(value) => `R${value/1000}k`} />
                    <Tooltip content={<CustomTooltip />} cursor={{fill: 'rgba(107, 114, 128, 0.1)'}}/>
                    <Legend />
                    <Line type="monotone" dataKey={lastYear} stroke="#8884d8" strokeWidth={2} name={`Sales ${lastYear}`} />
                    <Line type="monotone" dataKey={currentYear} stroke="#3b82f6" strokeWidth={2} name={`Sales ${currentYear}`} />
                </LineChart>
            </ResponsiveContainer>
        </div>
    );
};

export default YoYSalesGraph;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\intelligence\YoYSalesWidget.jsx
==================================================
// src/components/intelligence/YoYSalesWidget.jsx (NEW FILE)
import React from 'react';
import { TrendingUp, TrendingDown, Minus } from 'lucide-react';

const YoYSalesWidget = ({ currentMonthSales, lastYearSales }) => {
    // This component is UI-only for now, logic will be added in DashboardPage.jsx
    
    const percentageChange = (() => {
        if (lastYearSales === 0 && currentMonthSales > 0) return 100; // Growth from zero
        if (lastYearSales === 0) return 0; // No change from zero
        return ((currentMonthSales - lastYearSales) / lastYearSales) * 100;
    })();

    const isPositive = percentageChange > 0;
    const isNegative = percentageChange < 0;
    const isNeutral = percentageChange === 0;

    const getTrendInfo = () => {
        if (isPositive) return {
            icon: <TrendingUp size={20} className="text-green-400" />,
            textColor: 'text-green-400',
            text: `${percentageChange.toFixed(1)}% vs. last year`
        };
        if (isNegative) return {
            icon: <TrendingDown size={20} className="text-red-400" />,
            textColor: 'text-red-400',
            text: `${percentageChange.toFixed(1)}% vs. last year`
        };
        return {
            icon: <Minus size={20} className="text-gray-400" />,
            textColor: 'text-gray-400',
            text: 'No change vs. last year'
        };
    };
    
    const trend = getTrendInfo();

    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 h-full flex flex-col justify-between">
            <div>
                <p className="text-gray-400 text-sm font-medium">This Month's Sales (Live)</p>
                <p className="text-4xl font-bold text-white mt-2">
                    R {currentMonthSales.toLocaleString('en-ZA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                </p>
            </div>
            <div className="mt-4 flex items-center space-x-2">
                {trend.icon}
                <span className={`font-semibold ${trend.textColor}`}>
                    {trend.text}
                </span>
            </div>
        </div>
    );
};

export default YoYSalesWidget;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\layout\MainLayout.jsx
==================================================
// src/components/layout/MainLayout.jsx (Upgraded with Smart Timer)

import React, { useState, useEffect, useRef } from 'react'; // Import useRef
import { useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import Button from '../ui/Button';
import Sidebar from './Sidebar';
import { PanelLeftClose, PanelRightClose } from 'lucide-react';
import TojemLogo from '../../assets/TOJEM 2024.png';
import NotificationBell from './NotificationBell';

const MainLayout = ({ children }) => {
  const { user, signOut } = useAuth();
  const location = useLocation();

  const [isSidebarOpen, setSidebarOpen] = useState(false);
  // --- NEW: useRef to hold the timer ID ---
  const timerRef = useRef(null);

  const startCloseTimer = () => {
    // Clear any existing timer before starting a new one
    clearTimeout(timerRef.current);
    timerRef.current = setTimeout(() => {
      setSidebarOpen(false);
    }, 2000); // 2 seconds
  };

  const handleSidebarOpen = () => {
    setSidebarOpen(true);
    startCloseTimer();
  };

  // --- NEW: Handlers for mouse events ---
  const handleMouseEnter = () => {
    // When mouse enters the sidebar, clear the timer to prevent it from closing
    clearTimeout(timerRef.current);
  };

  const handleMouseLeave = () => {
    // When mouse leaves, restart the timer
    startCloseTimer();
  };
  
  // This effect is no longer needed as we handle it with the mouse leave event
  // useEffect(() => { ... }, [isSidebarOpen]);

  // Effect to auto-close sidebar on navigation for smaller screens remains useful
  useEffect(() => {
    if (window.innerWidth <= 1024) {
      setSidebarOpen(false);
    }
  }, [location.pathname]);

  return (
    <div className="flex h-screen bg-gray-900 text-white">
      <Sidebar 
        isOpen={isSidebarOpen} 
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
      />

      <div className="flex-1 flex flex-col overflow-hidden">
        <header className="flex justify-between items-center p-4 border-b border-gray-700 bg-gray-800/50 flex-shrink-0">
          <div className="flex items-center gap-4">
            {/* MODIFIED: The button now calls handleSidebarOpen or setSidebarOpen(false) */}
            <Button onClick={() => isSidebarOpen ? setSidebarOpen(false) : handleSidebarOpen()} variant="secondary" className="p-2">
               {isSidebarOpen ? <PanelLeftClose size={20}/> : <PanelRightClose size={20}/>}
            </Button>
            <img src={TojemLogo} alt="TOJEM OS Logo" className="h-8 sm:h-10 object-contain" />
          </div>
          <div className="flex items-center space-x-4">
            <NotificationBell />
            <div className="text-right">
               <p className="text-sm text-gray-400">Signed in as {user?.email || 'Guest'}</p>
              <p className="text-xs text-gray-500 font-semibold">{user?.role || 'No Role'}</p>
            </div>
            <Button onClick={signOut} variant="secondary" className="py-1 px-3 text-sm">
                Sign Out
            </Button>
          </div>
        </header>
        
        <main className="flex-1 overflow-y-auto p-4 sm:p-8">
           {children}
        </main>
      </div>
    </div>
  );
};

export default MainLayout;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\layout\NotificationBell.jsx
==================================================
import React, { useState, useEffect, useRef } from 'react';
import { Bell, XCircle, Mail, Clock } from 'lucide-react';
import { collection, query, where, orderBy, onSnapshot, updateDoc, doc } from 'firebase/firestore';
import { db } from '../../api/firebase'; // Import your Firestore db instance
import { useAuth } from '../../contexts/AuthContext'; // Corrected: Import useAuth directly
import moment from 'moment'; // Import moment.js
import { useNavigate } from 'react-router-dom'; // Import useNavigate

const NotificationBell = () => {
  const { user } = useAuth();
  const [notifications, setNotifications] = useState([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);
  const navigate = useNavigate();

  useEffect(() => {
    if (!user || !user.role) {
      setNotifications([]);
      setUnreadCount(0);
      return;
    }

    const q = query(
      collection(db, 'notifications'),
      where('targetRole', '==', user.role),
      orderBy('createdAt', 'desc')
    );

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const fetchedNotifications = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt?.toDate(),
      }));
      setNotifications(fetchedNotifications);
      setUnreadCount(fetchedNotifications.filter(n => !n.read).length);
    }, (error) => {
      console.error("Error listening to notifications:", error);
    });

    return () => unsubscribe();
  }, [user]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleBellClick = () => {
    setIsOpen(prev => !prev);
  };

  const handleNotificationClick = async (notification) => {
    await handleMarkAsRead(notification.id);

    // Navigate based on notification type, including jobId for deep linking where applicable
    switch (notification.type) {
      case 'qc_awaiting':
        // Navigate to QC page, but if you want to highlight the job, pass jobId.
        // QC page would need to handle the jobId if you want to auto-select/highlight.
        navigate('/qc'); // Current QC page doesn't have deep-linking to specific job
        break;
      case 'job_issue':
        // Navigate to Issues page with jobId to auto-open modal
        navigate(`/issues?jobId=${notification.jobId}`);
        break;
      case 'job_overdue':
        // Navigate to Tracking page with jobId to auto-open modal
        navigate(`/tracking?jobId=${notification.jobId}`);
        break;
      default:
        navigate('/'); // Default to dashboard
        break;
    }
    setIsOpen(false); // Close dropdown after navigation
  };

  const handleMarkAsRead = async (notificationId) => {
    try {
      await updateDoc(doc(db, 'notifications', notificationId), { read: true });
    } catch (error) {
      console.error("Error marking notification as read:", error);
    }
  };

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={handleBellClick}
        className="relative p-2 rounded-full bg-gray-700 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-800"
      >
        <Bell size={24} className="text-gray-300" />
        {unreadCount > 0 && (
          <span className="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-red-100 transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full">
            {unreadCount}
          </span>
        )}
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-72 bg-gray-800 border border-gray-700 rounded-lg shadow-lg z-50">
          <div className="p-3 border-b border-gray-700 text-white font-semibold flex justify-between items-center">
            Notifications ({unreadCount} unread)
            <button
              onClick={() => setIsOpen(false)}
              className="text-gray-400 hover:text-white"
            >
              <XCircle size={20} />
            </button>
          </div>
          {notifications.length === 0 ? (
            <p className="p-4 text-gray-400 text-sm text-center">No new notifications.</p>
          ) : (
            <ul className="max-h-80 overflow-y-auto">
              {notifications.map(notification => (
                <li
                  key={notification.id}
                  className={`p-3 border-b border-gray-700 text-sm cursor-pointer ${
                    notification.read ? 'bg-gray-700 text-gray-400' : 'bg-gray-900 text-white hover:bg-gray-700'
                  }`}
                  onClick={() => handleNotificationClick(notification)}
                >
                  <div className="flex items-center space-x-2">
                    <Mail size={16} className="text-blue-400" />
                    <p className="font-medium">{notification.message}</p>
                  </div>
                  <div className="flex items-center text-xs text-gray-500 mt-1 ml-6">
                    {notification.createdAt ? moment(notification.createdAt).fromNow() : 'just now'}
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>
      )}
    </div>
  );
};

export default NotificationBell;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\layout\ProtectedRoute.jsx
==================================================
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { user, loading } = useAuth();

  // 1. While Firebase is checking the auth state, show a loading message.
  if (loading) {
    return (
      <div className="bg-gray-900 min-h-screen flex items-center justify-center text-white">
        Loading Application...
      </div>
    );
  }

  // 2. If loading is finished and there's no user, redirect to the login page.
  if (!user) {
    return <Navigate to="/login" />;
  }

  // 3. If loading is finished and a user exists, show the requested page.
  return children;
};

// Ensure this exact line is at the bottom of the file
export default ProtectedRoute;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\layout\RoleBasedRoute.jsx
==================================================
import React from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { Navigate } from 'react-router-dom';

/**
 * A wrapper for routes that checks if the current user has one of the required roles.
 * If the user is not authorized, it redirects them to the main dashboard.
 * @param {{children: React.ReactNode, roles: Array<string>}} props
 */
const RoleBasedRoute = ({ children, roles }) => {
    const { user } = useAuth();

    if (user && roles.includes(user.role)) {
        return children;
    }

    // Redirect them to the home page if they don't have the right role
    return <Navigate to="/" />;
};

export default RoleBasedRoute;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\layout\Sidebar.jsx
==================================================
// src/components/layout/Sidebar.jsx (Updated)

import React, { useState } from 'react';
import { NavLink } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import {
    LayoutDashboard, HardHat, Package, Truck, BarChart3,
    FileText, CheckSquare, AlertTriangle, ScanLine,
    Calendar as CalendarIcon, SlidersHorizontal, ChevronDown, ChevronRight,
    Briefcase, Banknote, BrainCircuit, DollarSign,
    Aperture, Calculator, NotebookText, Sun,
    Megaphone
} from 'lucide-react';
import NotesApplet from '../features/sidebar/NotesApplet';
import WeatherApplet from '../features/sidebar/WeatherApplet';
import CalendarApplet from '../features/sidebar/CalendarApplet';
import CalculatorApplet from '../features/sidebar/CalculatorApplet';

const SidebarLink = ({ to, icon, text, isOpen }) => {
    const commonClasses = "flex items-center p-3 my-1 rounded-lg transition-colors";
    const activeClass = "bg-blue-600 text-white font-semibold";
    const inactiveClass = "text-gray-300 hover:bg-gray-700";
    return (<NavLink to={to} className={({ isActive }) => `${commonClasses} ${isActive ? activeClass : inactiveClass}`}>{icon}{isOpen && <span className="ml-4 text-sm">{text}</span>}</NavLink>);
};

const NavGroup = ({ title, icon, children, isOpen, defaultOpen = false }) => {
    const [isGroupOpen, setGroupOpen] = useState(defaultOpen);
    return (<div className="py-2"><button onClick={() => setGroupOpen(!isGroupOpen)} className="w-full flex items-center p-3 rounded-lg text-gray-300 hover:bg-gray-700 transition-colors">{icon}{isOpen && <span className="ml-4 font-semibold text-sm">{title}</span>}{isOpen && (isGroupOpen ? <ChevronDown size={16} className="ml-auto" /> : <ChevronRight size={16} className="ml-auto" />)}</button>{isGroupOpen && isOpen && (<div className="mt-1 border-l-2 border-gray-700 ml-5 pl-3 space-y-1">{children}</div>)}</div>);
};

const Applet = ({ icon, text, children, isOpen }) => {
    const [isAppletOpen, setAppletOpen] = useState(false);
    return(<div><button onClick={() => setAppletOpen(!isAppletOpen)} className="w-full flex items-center p-3 my-1 rounded-lg text-gray-300 hover:bg-gray-700 transition-colors">{icon}{isOpen && <span className="ml-4 text-sm">{text}</span>}{isOpen && (isAppletOpen ? <ChevronDown size={16} className="ml-auto text-gray-500" /> : <ChevronRight size={16} className="ml-auto text-gray-500" />)}</button>{isAppletOpen && isOpen && (<div className="mt-1 border-l-2 border-blue-500/30 ml-5 pl-1 py-2">{children}</div>)}</div>);
};

// --- MODIFIED TO ACCEPT MOUSE EVENT HANDLERS ---
const Sidebar = ({ isOpen, onMouseEnter, onMouseLeave }) => {
    const { user } = useAuth();
    const userRole = user?.role || '';

    const navConfig = {
        dashboard: { roles: ['Manager', 'QC Inspector', 'Workshop Employee', 'Office Manager', 'Marketing'] },
        tracking: { roles: ['Manager', 'QC Inspector', 'Workshop Employee'] },
        scanner: { roles: ['Manager', 'Workshop Employee', 'Floor Tablet'] },
        calendar: { roles: ['Manager', 'Workshop Employee'] },
        jobCreator: { roles: ['Manager'] },
        qc: { roles: ['Manager', 'QC Inspector'] },
        issues: { roles: ['Manager', 'QC Inspector'] },
        stock: { roles: ['Manager'] },
        performance: { roles: ['Manager'] },
        profitability: { roles: ['Manager', 'Marketing'] },
        valuation: { roles: ['Manager', 'Office Manager'] },
        payroll: { roles: ['Manager', 'Office Manager'] },
        settings: { roles: ['Manager'] },
        marketing: { roles: ['Manager', 'Marketing'] },
        quotes: { roles: ['Manager', 'Office Manager', 'Marketing'] },
        adjustment: { roles: ['Manager'] },
    };

    const canSee = (navItem) => navConfig[navItem]?.roles.includes(userRole);
    if (userRole === 'Floor Tablet') return null;

    return (
        <div
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
            className={`bg-gray-800 border-r border-gray-700 p-2 flex flex-col transition-all duration-300 ${isOpen ? 'w-64' : 'w-20'}`}
        >
            <div className="flex-grow overflow-y-auto">

                {canSee('dashboard') && <SidebarLink to="/" icon={<LayoutDashboard size={22} />} text="Dashboard" isOpen={isOpen} />}

                <NavGroup title="Sales & Marketing" icon={<Megaphone size={22} />} isOpen={isOpen}>
                    {canSee('marketing') && <SidebarLink to="/marketing" icon={<BarChart3 size={18} />} text="Marketing Dashboard" isOpen={isOpen} />}
                    {canSee('quotes') && <SidebarLink to="/quotes" icon={<DollarSign size={18} />} text="Sales Quotes" isOpen={isOpen} />}
                </NavGroup>

                <NavGroup title="Workshop Floor" icon={<HardHat size={22} />} isOpen={isOpen} defaultOpen={true}>
                    {canSee('tracking') && <SidebarLink to="/tracking" icon={<BarChart3 size={18} />} text="Live Tracking" isOpen={isOpen} />}
                    {canSee('scanner') && <SidebarLink to="/scan" icon={<ScanLine size={18} />} text="Scanner" isOpen={isOpen} />}
                    {canSee('calendar') && <SidebarLink to="/calendar" icon={<CalendarIcon size={18} />} text="Calendar" isOpen={isOpen} />}
                </NavGroup>

                <NavGroup title="Production Control" icon={<FileText size={22} />} isOpen={isOpen}>
                    {canSee('jobCreator') && <SidebarLink to="/creator" icon={<FileText size={18} />} text="Job Creator" isOpen={isOpen} />}
                    {canSee('qc') && <SidebarLink to="/qc" icon={<CheckSquare size={18} />} text="Quality Control" isOpen={isOpen} />}
                    {canSee('issues') && <SidebarLink to="/issues" icon={<AlertTriangle size={18} />} text="Issues" isOpen={isOpen} />}
                    {canSee('adjustment') && <SidebarLink to="/adjustment" icon={<SlidersHorizontal size={18} />} text="Job Card Adjustment" isOpen={isOpen} />}
                </NavGroup>

                {canSee('stock') && (
                    <NavGroup title="Supply Chain" icon={<Truck size={22} />} isOpen={isOpen}>
                        <SidebarLink to="/stock" icon={<Package size={18} />} text="Stock Control" isOpen={isOpen} />
                    </NavGroup>
                )}

                <NavGroup title="Business Intelligence" icon={<BrainCircuit size={22} />} isOpen={isOpen}>
                    {canSee('performance') && <SidebarLink to="/performance" icon={<Briefcase size={18} />} text="Performance" isOpen={isOpen} />}
                    {canSee('profitability') && <SidebarLink to="/profitability" icon={<DollarSign size={18} />} text="Profitability" isOpen={isOpen} />}
                    {canSee('valuation') && <SidebarLink to="/valuation" icon={<Banknote size={18} />} text="Valuation" isOpen={isOpen} />}
                </NavGroup>

                <NavGroup title="Administration" icon={<Briefcase size={22} />} isOpen={isOpen}>
                    {canSee('payroll') && <SidebarLink to="/payroll" icon={<Banknote size={18} />} text="Payroll" isOpen={isOpen} />}
                </NavGroup>

            </div>

            <div className="flex-shrink-0 border-t border-gray-700 pt-2">
                <NavGroup title="Tools & Applets" icon={<Aperture size={22} />} isOpen={isOpen}>
                    <Applet icon={<NotebookText size={18}/>} text="Scratchpad" isOpen={isOpen}><NotesApplet /></Applet>
                    <Applet icon={<Sun size={18}/>} text="Weather" isOpen={isOpen}><WeatherApplet /></Applet>
                    <Applet icon={<CalendarIcon size={18}/>} text="Mini Calendar" isOpen={isOpen}><CalendarApplet /></Applet>
                    <Applet icon={<Calculator size={18}/>} text="Calculator" isOpen={isOpen}><CalculatorApplet /></Applet>
                </NavGroup>

                {canSee('settings') && <SidebarLink to="/settings" icon={<SlidersHorizontal size={22} />} text="Settings" isOpen={isOpen} />}
            </div>
        </div>
    );
};

export default Sidebar;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\ui\Button.jsx
==================================================
import React from 'react';

// Base styles for all buttons
const baseStyles = "flex items-center justify-center px-4 py-2 rounded-lg font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900";

// Styles for different button variants
const variants = {
  primary: "bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500",
  secondary: "bg-gray-700 hover:bg-gray-600 text-gray-200 focus:ring-gray-500",
  danger: "bg-red-600 hover:bg-red-700 text-white focus:ring-red-500",
};

const Button = ({ children, onClick, variant = 'primary', className = '', type = 'button', ...props }) => {
  return (
    <button
      type={type}
      onClick={onClick}
      // Combine base styles, variant styles, and any custom classes passed in
      className={`${baseStyles} ${variants[variant]} ${className}`}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\ui\Dropdown.jsx
==================================================
import React from 'react';

const Dropdown = ({ label, name, value, onChange, options, placeholder }) => {
  return (
    <div className="w-full">
      {label && (
        <label htmlFor={name} className="block text-sm font-medium text-gray-400 mb-1">
          {label}
        </label>
      )}
      <select
        id={name}
        name={name}
        value={value}
        onChange={onChange}
        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        {placeholder && <option value="">{placeholder}</option>}
        {options.map(option => (
          <option key={option.id} value={option.id}>
            {option.name}
          </option>
        ))}
      </select>
    </div>
  );
};

export default Dropdown;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\ui\Input.jsx
==================================================
import React from 'react';

const Input = ({ label, name, type = "text", value, onChange, placeholder, ...props }) => {
  return (
    <div className="w-full">
      {label && (
        <label htmlFor={name} className="block text-sm font-medium text-gray-400 mb-1">
          {label}
        </label>
      )}
      <input
        id={name}
        name={name}
        type={type}
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
        {...props}
      />
    </div>
  );
};

export default Input;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\components\ui\Textarea.jsx
==================================================
import React from 'react';

const Textarea = ({ label, name, value, onChange, placeholder, rows = 3 }) => {
  return (
    <div className="w-full">
      {label && (
        <label htmlFor={name} className="block text-sm font-medium text-gray-400 mb-1">
          {label}
        </label>
      )}
      <textarea
        id={name}
        name={name}
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        rows={rows}
        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
    </div>
  );
};

export default Textarea;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\contexts\AuthContext.jsx
==================================================
import React, { createContext, useState, useEffect, useContext } from 'react';
import { signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';
import { auth, db } from '../api/firebase';
import { doc, getDoc } from 'firebase/firestore';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (userAuth) => {
      if (userAuth) {
        console.log("Firebase Auth User UID:", userAuth.uid);
        let userContextData = {
          uid: userAuth.uid,
          email: userAuth.email,
          role: 'Workshop Employee', // Default role if no specific role found
        };

        try {
          // 1. Fetch user's role from the 'users' collection
          const userRoleDocRef = doc(db, 'users', userAuth.uid);
          const userRoleDoc = await getDoc(userRoleDocRef);

          if (userRoleDoc.exists()) {
            const roleData = userRoleDoc.data();
            if (roleData.role) {
              userContextData.role = roleData.role; // Set role from 'users' collection
              console.log("Assigned Role from 'users' collection:", roleData.role);
            } else {
              console.warn("User document in 'users' collection exists but has no 'role' field. Assigning default role.");
            }
          } else {
            console.warn("No matching user document found in 'users' collection for UID. Assigning default role.");
          }

          // 2. Attempt to fetch employee details from the 'employees' collection
          //    (Assumes employee document ID matches userAuth.uid if they are a login-enabled employee)
          const employeeDocRef = doc(db, 'employees', userAuth.uid);
          const employeeDoc = await getDoc(employeeDocRef);

          if (employeeDoc.exists()) {
            const employeeData = employeeDoc.data();
            // Merge employee-specific data into the user context object
            userContextData = { ...userContextData, ...employeeData };
            console.log("Merged Employee Data:", employeeData);
          } else {
            console.log("No matching employee document found in 'employees' collection for this UID. User details will be basic.");
          }

        } catch (error) {
            console.error("Error during user profile fetching:", error);
            // Fallback: If any error occurs, ensure basic user info with a default role is set.
            userContextData.role = 'Workshop Employee';
            console.log("Assigned Default Role (due to error): Workshop Employee");
        } finally {
            setUser(userContextData);
            setLoading(false);
        }
      } else {
        // User is signed out
        console.log("User signed out.");
        setUser(null);
        setLoading(false);
      }
    });
    return unsubscribe;
  }, []);

  const value = {
    user,
    loading,
    signIn: (email, password) => signInWithEmailAndPassword(auth, email, password),
    signOut: () => signOut(auth),
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  return useContext(AuthContext);
};



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\hooks\useInventoryManager.js
==================================================
// src/hooks/useInventoryManager.js (Updated for Dynamic Supplier Pricing)

import { useState, useEffect, useMemo } from 'react';
import { 
    getSupplierPricingForItem, 
    addSupplierPrice, 
    deleteSupplierPrice, 
    updateSupplierPrice 
} from '../api/firestore';

export const useInventoryManager = (api, suppliers, allSkills) => {
  const [items, setItems] = useState([]);
  const [newItem, setNewItem] = useState({
    name: '', itemCode: '', price: '', unit: '',
    currentStock: '', reorderLevel: '', standardStockLevel: '',
    requiresCatalyst: false, stockTakeMethod: 'quantity', unitWeight: '', tareWeight: '',
    associatedSkills: [],
  });
  const [editingItemId, setEditingItemId] = useState(null);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortBy, setSortBy] = useState('name-asc');
  const [showLowStock, setShowLowStock] = useState(false);

  // --- NEW STATE for managing supplier prices ---
  const [supplierPrices, setSupplierPrices] = useState([]);

  const fetchData = async () => {
    if (!api) return;
    setLoading(true);
    const fetchedItems = await api.get();
    setItems(fetchedItems);
    setLoading(false);
  };

  useEffect(() => {
    if (api && api.get) {
      fetchData();
    }
    cancelEdit();
  }, [api]);

  // --- NEW EFFECT: Fetch supplier prices when an item is being edited ---
  useEffect(() => {
      if (editingItemId) {
          const fetchPrices = async () => {
              const prices = await getSupplierPricingForItem(editingItemId);
              setSupplierPrices(prices);
          };
          fetchPrices();
      } else {
          setSupplierPrices([]);
      }
  }, [editingItemId]);

  const getSupplierName = (supplierId) => (suppliers || []).find(s => s.id === supplierId)?.name || 'N/A';

  const displayedItems = useMemo(() => {
    let filtered = [...(items || [])];
    if (showLowStock) {
      filtered = filtered.filter(item => Number(item.currentStock) < Number(item.reorderLevel));
    }
    if (searchTerm) {
      filtered = filtered.filter(item => item.name.toLowerCase().includes(searchTerm.toLowerCase()));
    }
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'name-asc': return a.name.localeCompare(b.name);
        case 'name-desc': return b.name.localeCompare(a.name);
        case 'supplier': return getSupplierName(a.supplierId).localeCompare(getSupplierName(b.supplierId));
        case 'stock-low-high': return (Number(a.currentStock) / Number(a.reorderLevel)) - (Number(b.currentStock) / Number(b.reorderLevel));
        case 'stock-high-low': return (Number(b.currentStock) / Number(a.reorderLevel)) - (Number(a.currentStock) / Number(b.reorderLevel));
        default: return 0;
      }
    });
    return filtered;
  }, [items, searchTerm, sortBy, showLowStock, suppliers]);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    const val = type === 'checkbox' ? checked : value;
    setNewItem(prevState => ({ ...prevState, [name]: val }));
  };

  const handleToggleSkillAssociation = (skillId, isChecked) => {
    setNewItem(prevItem => {
        if (isChecked) {
            return { ...prevItem, associatedSkills: [...(prevItem.associatedSkills || []), { skillId, defaultMinimumProficiency: 0, importanceWeight: 0 }] };
        } else {
            return { ...prevItem, associatedSkills: prevItem.associatedSkills.filter(s => s.skillId !== skillId) };
        }
    });
  };

  const handleAssociatedSkillChange = (skillId, field, value) => {
    setNewItem(prevItem => ({
        ...prevItem,
        associatedSkills: prevItem.associatedSkills.map(s =>
            s.skillId === skillId ? { ...s, [field]: Number(value) } : s
        )
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!newItem.name.trim()) return alert("Item name is required.");

    const filteredAssociatedSkills = (newItem.associatedSkills || []).filter(s =>
        s.defaultMinimumProficiency > 0 || s.importanceWeight > 0
    );

    const dataToSave = {
      name: newItem.name,
      itemCode: newItem.itemCode || '',
      price: parseFloat(newItem.price) || 0,
      unit: newItem.unit || '',
      currentStock: parseInt(newItem.currentStock, 10) || 0,
      reorderLevel: parseInt(newItem.reorderLevel, 10) || 0,
      standardStockLevel: parseInt(newItem.standardStockLevel, 10) || 0,
      requiresCatalyst: newItem.requiresCatalyst || false,
      stockTakeMethod: newItem.stockTakeMethod || 'quantity',
      unitWeight: parseFloat(newItem.unitWeight) || 0,
      tareWeight: parseFloat(newItem.tareWeight) || 0,
      associatedSkills: filteredAssociatedSkills,
    };
    try {
      if (editingItemId) {
        await api.update(editingItemId, dataToSave);
      } else {
        await api.add(dataToSave);
      }
      cancelEdit();
      fetchData();
    } catch (error) {
      console.error("Error saving item:", error);
      alert("Failed to save item.");
    }
  };

  const handleEdit = (item) => {
    setEditingItemId(item.id);
    setNewItem({ ...item, associatedSkills: item.associatedSkills || [] });
  };

  const cancelEdit = () => {
    setEditingItemId(null);
    setNewItem({
      name: '', itemCode: '', price: '', unit: '',
      currentStock: '', reorderLevel: '', standardStockLevel: '',
      requiresCatalyst: false, stockTakeMethod: 'quantity', unitWeight: '', tareWeight: '',
      associatedSkills: [],
    });
    setSupplierPrices([]); // Clear prices on cancel
  };

  const handleDelete = async (id) => { 
      if (window.confirm("Are you sure? This will delete the item and all its supplier pricing links.")) { 
          await api.delete(id); 
          fetchData(); 
      } 
  };
  
  // --- NEW HANDLERS FOR SUPPLIER PRICING ---
  const handleAddSupplierPrice = async (supplierId, price) => {
      if (!editingItemId || !supplierId || !price) {
          alert("Please select a supplier and enter a price.");
          return;
      }
      const supplier = suppliers.find(s => s.id === supplierId);
      if (!supplier) return;

      const priceData = {
          itemId: editingItemId,
          itemName: newItem.name,
          supplierId: supplier.id,
          supplierName: supplier.name,
          price: parseFloat(price)
      };
      await addSupplierPrice(priceData);
      const prices = await getSupplierPricingForItem(editingItemId);
      setSupplierPrices(prices);
  };

  const handleDeleteSupplierPrice = async (priceId) => {
      if (window.confirm("Delete this supplier price link?")) {
          await deleteSupplierPrice(priceId);
          setSupplierPrices(prev => prev.filter(p => p.id !== priceId));
      }
  };

  return {
    newItem, loading, editingItemId, displayedItems, sortBy, searchTerm, showLowStock,
    supplierPrices, // <-- Expose new state
    handleInputChange, handleSubmit, handleEdit, cancelEdit, handleDelete,
    handleToggleSkillAssociation, handleAssociatedSkillChange,
    handleAddSupplierPrice, handleDeleteSupplierPrice, // <-- Expose new handlers
    setSortBy, setSearchTerm, setShowLowStock, getSupplierName
  };
};



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\hooks\useStockTakeData.js
==================================================
// src/hooks/useStockTakeData.js (New File from your app)

import { useState, useEffect, useMemo } from 'react';
import { getAllInventoryItems } from '../api/firestore';

export const useStockTakeData = () => {
    const [allItems, setAllItems] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [counts, setCounts] = useState({});
    const [searchTerm, setSearchTerm] = useState('');
    const [filter, setFilter] = useState('all');

    const fetchData = async () => {
        setLoading(true);
        setError(null);
        try {
            const items = await getAllInventoryItems();
            setAllItems(items);
        } catch (err) {
            setError("Failed to load inventory.");
            console.error(err);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleCountChange = (itemId, value) => {
        setCounts(prev => ({ ...prev, [itemId]: value }));
    };

    const processedItems = useMemo(() => {
        return allItems.map(item => {
            const systemCount = item.currentStock || 0;
            const physicalCount = counts[item.id];
            const hasBeenCounted = physicalCount !== undefined && physicalCount !== '';
            const variance = hasBeenCounted ? Number(physicalCount) - systemCount : 0;
            return {
                ...item,
                systemCount,
                physicalCount: hasBeenCounted ? Number(physicalCount) : '',
                variance,
                hasBeenCounted
            };
        });
    }, [allItems, counts]);

    const filteredItems = useMemo(() => {
        let items = processedItems;

        if (filter === 'discrepancies') {
            items = items.filter(item => item.hasBeenCounted && item.variance !== 0);
        } else if (filter === 'uncounted') {
            items = items.filter(item => !item.hasBeenCounted);
        } else if (filter === 'counted') {
            items = items.filter(item => item.hasBeenCounted);
        }

        if (searchTerm) {
            const lowerCaseSearch = searchTerm.toLowerCase();
            items = items.filter(item =>
                item.name.toLowerCase().includes(lowerCaseSearch) ||
                (item.itemCode && item.itemCode.toLowerCase().includes(lowerCaseSearch))
            );
        }
        return items;
    }, [processedItems, filter, searchTerm]);

    const summary = useMemo(() => {
        const countedItems = processedItems.filter(item => item.hasBeenCounted);
        const discrepancies = countedItems.filter(item => item.variance !== 0);
        return {
            totalItems: allItems.length,
            counted: countedItems.length,
            uncounted: allItems.length - countedItems.length,
            discrepancies: discrepancies.length
        };
    }, [allItems.length, processedItems]);

    const getItemsToReconcile = () => {
        return processedItems
            .filter(item => item.hasBeenCounted)
            .map(item => ({
                id: item.id,
                name: item.name,
                category: item.category,
                systemCount: item.systemCount,
                newCount: item.physicalCount,
            }));
    };

    return {
        loading,
        error,
        filteredItems,
        summary,
        filter,
        setFilter,
        searchTerm,
        setSearchTerm,
        handleCountChange,
        getItemsToReconcile,
        fetchData,
        resetCounts: () => setCounts({}),
    };
};


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\CalendarPage.jsx
==================================================
// FILE: src/pages/CalendarPage.jsx (UPDATED)

import React, { useState, useEffect } from 'react';
import MainLayout from '../components/layout/MainLayout';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { listenToJobCards, updateDocument, getEmployees, getAllInventoryItems, getTools, getToolAccessories } from '../api/firestore';
import JobDetailsModal from '../components/features/tracking/JobDetailsModal';
import Button from '../components/ui/Button';
// --- NEW: Import the Scheduling Assistant modal and an icon ---
import SchedulingAssistantModal from '../components/features/calendar/SchedulingAssistantModal';
import { Bot } from 'lucide-react';

const localizer = momentLocalizer(moment);

const CalendarPage = () => {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedJob, setSelectedJob] = useState(null);
  
  const [employeeHourlyRates, setEmployeeHourlyRates] = useState({});
  const [allEmployees, setAllEmployees] = useState([]);
  const [allInventoryItems, setAllInventoryItems] = useState([]);
  const [allTools, setAllTools] = useState([]);
  const [allToolAccessories, setAllToolAccessories] = useState([]);
  
  // --- NEW: State to control the scheduling assistant modal ---
  const [isAssistantOpen, setAssistantOpen] = useState(false);


  useEffect(() => {
    let unsubscribeJobs;
    const fetchData = async () => {
      setLoading(true);
      try {
        const [fetchedEmployees, fetchedInventory, fetchedTools, fetchedToolAccessories] = await Promise.all([
          getEmployees(),
          getAllInventoryItems(),
          getTools(),
          getToolAccessories(),
        ]);
        setAllEmployees(fetchedEmployees);
        setAllInventoryItems(fetchedInventory);
        setAllTools(fetchedTools);
        setAllToolAccessories(fetchedToolAccessories);

        const rates = fetchedEmployees.reduce((acc, emp) => {
          acc[emp.id] = emp.hourlyRate || 0;
          return acc;
        }, {});
        setEmployeeHourlyRates(rates);

        unsubscribeJobs = listenToJobCards((fetchedJobs) => {
          const calendarEvents = fetchedJobs
            .filter(job => job.scheduledDate)
            .map(job => ({
              id: job.id,
              title: `${job.jobId} - ${job.partName}`,
              start: job.scheduledDate.toDate(),
              end: moment(job.scheduledDate.toDate()).add(job.estimatedTime || 60, 'minutes').toDate(),
              allDay: false,
              resource: job
            }));
          setEvents(calendarEvents);
          setLoading(false);
        });
      } catch (err) {
        console.error("Error fetching calendar data:", err);
        setError("Failed to load calendar data.");
        setLoading(false);
      }
    };

    fetchData();

    return () => {
      if (unsubscribeJobs) unsubscribeJobs();
    };
  }, []);

  const handleSelectEvent = (event) => {
    setSelectedJob(event.resource);
  };

  const handleEventDrop = async ({ event, start, end }) => {
    if (window.confirm(`Are you sure you want to reschedule "${event.title}" to ${moment(start).format('LLL')}?`)) {
      try {
        await updateDocument('createdJobCards', event.id, {
          scheduledDate: start
        });
        alert('Job rescheduled successfully!');
      } catch (err) {
        console.error("Error rescheduling job:", err);
        alert('Failed to reschedule job.');
      }
    }
  };
  
  // --- NEW: A handler to refresh the view after scheduling ---
  const handleScheduleComplete = () => {
    setAssistantOpen(false);
    // The onSnapshot listener will automatically update the calendar with the newly scheduled jobs.
    alert("Jobs have been scheduled successfully and added to the calendar!");
  };

  if (loading) return <p className="text-center text-gray-400">Loading Calendar...</p>;
  if (error) return <p className="text-center text-red-400">{error}</p>;

  return (
    <>
      <style jsx>{`
        /* Calendar styles remain unchanged */
        .rbc-calendar {
          font-family: 'Inter', sans-serif;
          color: #e2e8f0;
          background-color: #1f2937;
          border-radius: 0.75rem;
          border: 1px solid #374151;
          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
          padding: 1.5rem;
          height: 100%;
        }
        .rbc-toolbar {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 1rem;
          padding-bottom: 0.75rem;
          border-bottom: 1px solid #374151;
        }
        .rbc-toolbar .rbc-toolbar-label {
          font-size: 1.5rem;
          font-weight: 700;
          color: #f9fafb;
          flex-grow: 1;
          text-align: center;
        }
        .rbc-toolbar button {
          border: none;
          background-color: #4b5563;
          color: #f9fafb;
          padding: 0.5rem 1rem;
          border-radius: 0.5rem;
          font-weight: 600;
          transition: background-color 0.2s ease-in-out;
          cursor: pointer;
        }
        .rbc-toolbar button:hover {
          background-color: #6b7280;
        }
        .rbc-toolbar button.rbc-active {
          background-color: #2563eb;
          color: white;
        }
        .rbc-toolbar .rbc-btn-group {
          display: flex;
          gap: 0.5rem;
        }
        .rbc-header {
          padding: 0.5rem 0;
          font-size: 0.875rem;
          color: #9ca3af;
          border-bottom: 1px solid #374151;
          text-align: center;
        }
        .rbc-header + .rbc-header {
          border-left: none;
        }
        .rbc-month-view,
        .rbc-time-view,
        .rbc-agenda-view {
          border: none;
        }
        .rbc-row-content {
          border-top: 1px solid #374151;
        }
        .rbc-day-bg {
          border-right: 1px solid #374151;
        }
        .rbc-day-bg:last-child {
          border-right: none;
        }
        .rbc-off-range-bg {
          background-color: #111827;
        }
        .rbc-current-time-indicator {
            background-color: #ef4444;
        }
        .rbc-today {
          background-color: #3b82f61a;
        }
        .rbc-event {
          background-color: #1d4ed8;
          border: 1px solid #3b82f6;
          color: white !important;
          border-radius: 0.375rem;
          font-size: 0.875rem;
          padding: 0.25rem 0.5rem;
          cursor: pointer;
          transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
        }
        .rbc-event:hover {
          background-color: #3b82f6;
          border-color: #60a5fa;
        }
        .rbc-event.rbc-selected {
          background-color: #6366f1;
          border-color: #a78bfa;
        }
        .rbc-event-content {
          white-space: normal;
        }
        .rbc-agenda-table {
          border: 1px solid #374151;
          border-radius: 0.75rem;
        }
        .rbc-agenda-table thead th {
          color: #9ca3af;
          border-bottom: 1px solid #374151;
        }
        .rbc-agenda-table tbody td {
          border-bottom: 1px solid #374151;
          color: #e2e8f0;
        }
        .rbc-agenda-time-cell {
          color: #9ca3af;
        }
      `}</style>
      <div className="space-y-4 h-full flex flex-col">
        <div className="flex justify-between items-center flex-shrink-0">
            <h2 className="text-3xl font-bold text-white">Workshop Scheduling Calendar</h2>
            {/* --- NEW: Scheduling Assistant Button --- */}
            <Button onClick={() => setAssistantOpen(true)} variant="primary">
                <Bot size={18} className="mr-2"/>
                Scheduling Assistant
            </Button>
        </div>
        <div className="flex-grow min-h-0"> 
          <Calendar
            localizer={localizer}
            events={events}
            startAccessor="start"
            endAccessor="end"
            selectable
            resizable
            draggableAccessor={() => true}
            onEventDrop={handleEventDrop}
            onSelectEvent={handleSelectEvent}
            defaultView="week"
            views={['month', 'week', 'day', 'agenda']}
          />
        </div>
      </div>
      {selectedJob && (
        <JobDetailsModal
          job={selectedJob}
          onClose={() => setSelectedJob(null)}
          currentTime={Date.now()}
          employeeHourlyRates={employeeHourlyRates}
          allEmployees={allEmployees}
          allInventoryItems={allInventoryItems}
          allTools={allTools}
          allToolAccessories={allToolAccessories}
          onUpdateJob={() => {}}
          onDeleteJob={() => {}}
        />
      )}
      {/* --- NEW: Render the assistant modal when open --- */}
      {isAssistantOpen && (
        <SchedulingAssistantModal 
            onClose={() => setAssistantOpen(false)}
            onScheduleComplete={handleScheduleComplete}
        />
      )}
    </>
  );
};

export default CalendarPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\DashboardPage.jsx
==================================================
// src/pages/DashboardPage.jsx (MODIFIED)

import React, { useState, useEffect, useMemo } from 'react';
import { listenToJobCards, getAllInventoryItems, getProducts, getEmployees, collection, getDocs } from '../api/firestore';
import { db } from '../api/firebase';
import { NavLink } from 'react-router-dom';
import { Activity, Clock, AlertCircle, ShoppingCart, HeartPulse, Zap, Percent } from 'lucide-react';
import { PieChart, Pie, Cell, Legend, ResponsiveContainer, Tooltip } from 'recharts';

// Import all widgets for the new layout
import YearToDateComparison from '../components/intelligence/YearToDateComparison';
import MonthlySalesTrend from '../components/intelligence/MonthlySalesTrend';
import CapacityGauge from '../components/intelligence/CapacityGauge';
import WorkshopThroughputGraph from '../components/intelligence/WorkshopThroughputGraph';
import MultiYearSalesGraph from '../components/intelligence/MultiYearSalesGraph';
import TopReworkCausesWidget from '../components/intelligence/TopReworkCausesWidget'; // <-- 1. IMPORT NEW WIDGET

const KpiCard = ({ icon, title, value, color }) => (
    <div className="bg-gray-900/50 p-4 rounded-lg flex items-center space-x-3">
        <div className={`p-2 rounded-full ${color}`}>{icon}</div>
        <div><p className="text-gray-400 text-xs">{title}</p><p className="text-xl font-bold text-white">{value}</p></div>
    </div>
);

const HealthScoreGauge = ({ score }) => {
    const scoreColor = score > 80 ? '#22c55e' : score > 60 ? '#f59e0b' : '#ef4444';
    const data = [{ name: 'Health', value: score }];
    return (
        <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 h-full flex flex-col justify-center items-center">
            <h3 className="font-bold text-white mb-2 flex items-center gap-2">
                <HeartPulse size={20} className="text-red-400"/>
                Company Health Score
            </h3>
            <ResponsiveContainer width="100%" height={150}>
                <PieChart>
                    <Pie 
                        data={data} 
                        dataKey="value"
                        nameKey="name"
                        cx="50%" 
                        cy="100%" 
                        startAngle={180} 
                        endAngle={0} 
                        innerRadius={60} 
                        outerRadius={90} 
                        fill={scoreColor} 
                        paddingAngle={2}
                        labelLine={false}
                    >
                         <Cell key={`cell-0`} fill={scoreColor} cornerRadius={10} />
                    </Pie>
                     <text x="50%" y="85%" textAnchor="middle" dominantBaseline="middle" className="text-4xl font-bold fill-white">
                        {Math.round(score)}
                    </text>
                </PieChart>
            </ResponsiveContainer>
        </div>
    );
};

const DashboardPage = () => {
    const [jobs, setJobs] = useState([]);
    const [inventory, setInventory] = useState([]);
    const [products, setProducts] = useState([]);
    const [employees, setEmployees] = useState([]);
    const [historicalSales, setHistoricalSales] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const [inventoryItems, productItems, employeeItems, historicalSalesSnapshot] = await Promise.all([
                    getAllInventoryItems(), getProducts(), getEmployees(), getDocs(collection(db, 'historicalSales'))
                ]);
                setInventory(inventoryItems);
                setProducts(productItems);
                setEmployees(employeeItems);
                setHistoricalSales(historicalSalesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data()})))
                const unsubscribeJobs = listenToJobCards(setJobs);
                setLoading(false); 
                return unsubscribeJobs;
            } catch (error) {
                console.error("Failed to fetch dashboard data:", error);
                setLoading(false);
            }
        }
        
        const unsubscribePromise = fetchData();
        return () => { unsubscribePromise.then(unsubscribe => { if (unsubscribe) unsubscribe(); }); };
    }, []);

    const dashboardData = useMemo(() => {
        if (loading) return null;

        const now = new Date();
        const currentMonthIndex = now.getMonth();
        const currentYear = now.getFullYear();
        const lastYear = currentYear - 1;

        const currentMonthData = historicalSales.find(d => d.year === currentYear && d.month === (currentMonthIndex + 1));
        const currentMonthSales = currentMonthData?.totalSales || 0;
        const lastYearData = historicalSales.find(d => d.year === lastYear && d.month === (currentMonthIndex + 1));
        const lastYearSales = lastYearData?.totalSales || 0;
        
        const monthlyPercentageChange = (() => {
            if (lastYearSales === 0 && currentMonthSales > 0) return 100;
            if (lastYearSales === 0) return 0;
            return ((currentMonthSales - lastYearSales) / lastYearSales) * 100;
        })();

        const ytdCurrentYearSales = historicalSales
            .filter(d => d.year === currentYear && d.month <= (currentMonthIndex + 1))
            .reduce((sum, d) => sum + d.totalSales, 0);

        const ytdLastYearSales = historicalSales
            .filter(d => d.year === lastYear && d.month <= (currentMonthIndex + 1))
            .reduce((sum, d) => sum + d.totalSales, 0);

        const ytdPercentageChange = (() => {
            if (ytdLastYearSales === 0 && ytdCurrentYearSales > 0) return 100;
            if (ytdLastYearSales === 0) return 0;
            return ((ytdCurrentYearSales - ytdLastYearSales) / ytdLastYearSales) * 100;
        })();

        const uniqueYears = [...new Set(historicalSales.map(d => d.year))].sort();
        const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        
        const multiYearSalesData = monthNames.map((monthName, index) => {
            const monthData = { name: monthName };
            uniqueYears.forEach(year => {
                const record = historicalSales.find(d => d.year === year && d.month === (index + 1));
                monthData[year] = record ? record.totalSales : 0;
            });
            if (uniqueYears.includes(currentYear) && index === currentMonthIndex) {
                 monthData[currentYear] = currentMonthSales;
            }
            return monthData;
        });

        const totalDemandMinutes = jobs.filter(j => ['Pending', 'In Progress'].includes(j.status)).reduce((sum, j) => sum + (j.estimatedTime || 0), 0);
        const totalAvailableMinutes = (employees.length || 1) * 40 * 60;
        const capacityUtilization = totalAvailableMinutes > 0 ? (totalDemandMinutes / totalAvailableMinutes) * 100 : 0;
        
        const issues = jobs.filter(j => j.status === 'Issue');
        const lowStockItems = inventory.filter(item => Number(item.currentStock) < Number(item.reorderLevel)).slice(0, 5);

        const pieChartData = Object.entries(jobs.reduce((acc, job) => {
            acc[job.status] = (acc[job.status] || 0) + 1; return acc;
        }, {})).map(([name, value]) => ({ name, value }));
        
        const PIE_CHART_COLORS = { 'Complete': '#22c55e', 'In Progress': '#3b82f6', 'Awaiting QC': '#a855f7', 'Issue': '#ef4444', 'Pending': '#eab308' };
        
        const completedJobs = jobs.filter(j => j.status === 'Complete');
        let totalEfficiencyRatio = 0, jobsWithTime = 0, totalRevenue = 0, totalCogs = 0;
        
        completedJobs.forEach(job => {
            if (job.estimatedTime > 0 && job.startedAt && job.completedAt) {
                const durationSeconds = (job.completedAt.seconds - job.startedAt.seconds) - (job.totalPausedMilliseconds / 1000 || 0);
                if (durationSeconds > 0) {
                    totalEfficiencyRatio += ((job.estimatedTime * 60) / durationSeconds);
                    jobsWithTime++;
                }
            }
            const product = products.find(p => p.id === job.partId);
            if (product && product.sellingPrice > 0) {
                totalRevenue += product.sellingPrice;
                totalCogs += job.totalCost || 0;
            }
        });

        const overallEfficiency = jobsWithTime > 0 ? (totalEfficiencyRatio / jobsWithTime) * 100 : 0;
        const profitMargin = totalRevenue > 0 ? ((totalRevenue - totalCogs) / totalRevenue) * 100 : 0;
        const reworkRate = jobs.length > 0 ? (issues.length / jobs.length) * 100 : 0;
        const healthScore = (Math.min(100, overallEfficiency) * 0.4) + (Math.max(0, profitMargin) * 0.4) + ((100 - reworkRate) * 0.2);

        // --- 2. NEW LOGIC: Calculate Top Rework Causes ---
        const reworkCauses = jobs
            .filter(j => j.status === 'Issue' && j.issueReason)
            .reduce((acc, job) => {
                const reason = job.issueReason.trim();
                acc[reason] = (acc[reason] || 0) + 1;
                return acc;
            }, {});

        const topReworkCauses = Object.entries(reworkCauses)
            .sort(([, a], [, b]) => b - a)
            .slice(0, 5);

        return {
            monthlyPercentageChange, ytdPercentageChange, multiYearSalesData, uniqueYears,
            capacityUtilization, healthScore,
            liveKPIs: { jobsInProgress: jobs.filter(j => j.status === 'In Progress').length, awaitingQc: jobs.filter(j => j.status === 'Awaiting QC').length, issues: issues.length },
            performanceKPIs: { avgEfficiency: `${Math.round(overallEfficiency)}%`, profitMargin: `${Math.round(profitMargin)}%`, reworkRate: `${reworkRate.toFixed(1)}%` },
            actionableItems: { lowStockItems, jobsWithIssues: issues.slice(0, 5) },
            charts: { 
                pieChartData, 
                PIE_CHART_COLORS,
                topReworkCauses, // <-- Add new data to the return object
            }
        };
    }, [jobs, inventory, products, loading, employees, historicalSales]);

    if (loading || !dashboardData) {
        return <p className="text-center text-gray-400">Loading Mission Control...</p>;
    }

    return (
        <div className="space-y-8">
            <h2 className="text-3xl font-bold text-white">Mission Control</h2>
            
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-2">
                     <MultiYearSalesGraph 
                        salesData={dashboardData.multiYearSalesData} 
                        years={dashboardData.uniqueYears}
                        percentageChange={dashboardData.monthlyPercentageChange} 
                    />
                </div>
                <div className="lg:col-span-1 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-1 gap-6">
                    <MonthlySalesTrend percentageChange={dashboardData.monthlyPercentageChange} />
                    <YearToDateComparison percentageChange={dashboardData.ytdPercentageChange} />
                </div>
            </div>
            
             <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <HealthScoreGauge score={dashboardData.healthScore} />
                <CapacityGauge utilization={dashboardData.capacityUtilization} />
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                 <div className="lg:col-span-1 bg-gray-800 p-6 rounded-xl border border-gray-700">
                     <h3 className="font-bold text-white mb-4">Live Job Status</h3>
                      <ResponsiveContainer width="100%" height={250}>
                        <PieChart>
                            <Pie data={dashboardData.charts.pieChartData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={80} fill="#8884d8">
                             {dashboardData.charts.pieChartData.map((entry, index) => (<Cell key={`cell-${index}`} fill={dashboardData.charts.PIE_CHART_COLORS[entry.name] || '#6b7280'} />))}
                            </Pie>
                            <Tooltip contentStyle={{backgroundColor: '#1f2937', border: '1px solid #4b5563'}}/>
                            <Legend iconSize={10} wrapperStyle={{fontSize: '12px'}} />
                         </PieChart>
                     </ResponsiveContainer>
                </div>
                <div className="lg:col-span-1 bg-gray-800 p-6 rounded-xl border border-gray-700 space-y-4">
                     <h3 className="font-bold text-white">Team Performance Averages</h3>
                     <KpiCard icon={<Zap size={20} />} title="Overall Efficiency" value={dashboardData.performanceKPIs.avgEfficiency} color="bg-teal-500/20 text-teal-400" />
                     <KpiCard icon={<Percent size={20} />} title="Profit Margin (Live Jobs)" value={dashboardData.performanceKPIs.profitMargin} color="bg-green-500/20 text-green-400" />
                     <KpiCard icon={<AlertCircle size={20} />} title="Rework Rate" value={dashboardData.performanceKPIs.reworkRate} color="bg-orange-500/20 text-orange-400" />
                </div>
                {/* --- 3. WIDGET REPLACEMENT --- */}
                <div className="lg:col-span-1">
                    <TopReworkCausesWidget data={dashboardData.charts.topReworkCauses} />
                </div>
            </div>
        </div>
    );
};

export default DashboardPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\EmployeeIntelligencePage.jsx
==================================================
// src/pages/EmployeeIntelligencePage.jsx (Corrected, Optimized & Expanded)

import React, { useState, useEffect, useMemo } from 'react';
import { useParams, Link } from 'react-router-dom';
import { getDoc, doc } from 'firebase/firestore';
import { db } from '../api/firebase';
import { getCompletedJobsForEmployee, getOverheadCategories, getOverheadExpenses, getEmployees, listenToJobCards, getSkills, getTrainingResources } from '../api/firestore';
import { ChevronsLeft, Zap, DollarSign, AlertCircle, CheckCircle2, Users, BarChartHorizontal, Lightbulb, GraduationCap, Link as LinkIcon, Award, Gem, ShieldCheck, Star, TrendingDown, Clock, ShieldAlert } from 'lucide-react';

// Child Components (Widgets)
import EfficiencyChart from '../components/intelligence/EfficiencyChart';
import PerformanceSnapshot from '../components/intelligence/PerformanceSnapshot';
import ValueWasteAnalysis from '../components/intelligence/ValueWasteAnalysis';
import ReworkAnalysisModal from '../components/intelligence/ReworkAnalysisModal';
import RealTimeValueWidget from '../components/intelligence/RealTimeValueWidget';
import SkillProgressionWidget from '../components/intelligence/SkillProgressionWidget';
import JobCompletionAnalysisWidget from '../components/intelligence/JobCompletionAnalysisWidget';
import EfficiencyAnalysisModal from '../components/intelligence/EfficiencyAnalysisModal';
import TrophyCase from '../components/intelligence/TrophyCase';
import ReliabilityReport from '../components/intelligence/ReliabilityReport'; // <-- Import the newly completed component

const KpiCard = ({ icon, title, value, teamAverage, color, onClick, buttonText }) => (
    <div className={`bg-gray-800 p-5 rounded-lg border border-gray-700 flex flex-col justify-between`}>
        <div className="flex items-start space-x-4">
            <div className={`p-3 rounded-full ${color}`}>{icon}</div>
            <div>
                <p className="text-gray-400 text-sm">{title}</p>
                <p className="text-2xl font-bold text-white">{value}</p>
                {teamAverage && (<div className="flex items-center text-xs text-gray-500 mt-1"><Users size={12} className="mr-1"/><span>Team Avg: {teamAverage}</span></div>)}
            </div>
        </div>
        {onClick && (
            <button onClick={onClick} className="mt-4 text-xs font-semibold text-blue-400 hover:text-blue-300 text-left flex items-center">
                <BarChartHorizontal size={14} className="mr-1" />{buttonText || 'Analyze'}
            </button>
        )}
    </div>
);

const SkillGapAnalysisWidget = ({ employee, jobs, allSkills, trainingResources }) => {
    const skillInsights = useMemo(() => {
        if (!employee || !jobs || !allSkills) return [];
        const insights = [];
        const employeeSkillsMap = new Map(Object.entries(employee.skills || {}));
        const allSkillsMap = new Map(allSkills.map(s => [s.id, s.name]));
        const resourcesMap = (trainingResources || []).reduce((acc, resource) => {
            if (!acc[resource.skillId]) { acc[resource.skillId] = []; }
            acc[resource.skillId].push(resource);
            return acc;
        }, {});
        const { individual } = employee.performanceMetrics || {};
        if (!individual) return [];
        if (individual.efficiency < 90) {
            employeeSkillsMap.forEach((proficiency, skillId) => {
                if (proficiency < 4) { insights.push({ type: 'efficiency_gap', skillId: skillId, skillName: allSkillsMap.get(skillId) || 'Unknown Skill', message: `Consider training in ${allSkillsMap.get(skillId) || 'this skill'} to boost overall efficiency.`, currentProficiency: proficiency }); }
            });
        }
        if (individual.reworkRate > 5) {
             employeeSkillsMap.forEach((proficiency, skillId) => {
                if (proficiency < 5) { insights.push({ type: 'quality_gap', skillId: skillId, skillName: allSkillsMap.get(skillId) || 'Unknown Skill', message: `Review techniques in ${allSkillsMap.get(skillId) || 'this skill'} to reduce rework.`, currentProficiency: proficiency }); }
            });
        }
        const uniqueInsights = [];
        const seenMessages = new Set();
        insights.forEach(insight => {
            if (!seenMessages.has(insight.message)) {
                insight.resources = resourcesMap[insight.skillId] || [];
                uniqueInsights.push(insight);
                seenMessages.add(insight.message);
            }
        });
        return uniqueInsights;
    }, [employee, jobs, allSkills, trainingResources]);

    if (!employee || !allSkills) return null;
    return (
        <div className="bg-gray-800/50 p-6 rounded-lg border border-gray-700">
            <h3 className="text-xl font-bold text-white mb-4 flex items-center gap-2"><GraduationCap size={20} className="text-purple-400"/> Skill Gap & Training Suggestions</h3>
            {skillInsights.length > 0 ? (
                <ul className="space-y-4">
                    {skillInsights.map((insight, index) => (
                        <li key={index} className="bg-gray-700/50 p-4 rounded-lg">
                            <div className="flex items-start space-x-3">
                                <div className="flex-shrink-0 mt-1">{insight.type.includes('efficiency') ? <Zap size={18} className="text-blue-400" /> : <AlertCircle size={18} className="text-red-400" />}</div>
                                <div><p className="text-sm text-gray-200">{insight.message}</p><p className="text-xs text-gray-400">Current Proficiency Level: {insight.currentProficiency}</p></div>
                            </div>
                            {insight.resources.length > 0 && (
                                <div className="mt-3 pt-3 border-t border-gray-600/50 space-y-2">
                                    <p className="text-xs font-semibold text-gray-300">Suggested Resources:</p>
                                    {insight.resources.map(res => (<a key={res.id} href={res.url} target="_blank" rel="noopener noreferrer" className="flex items-center text-sm text-blue-400 hover:underline"><LinkIcon size={14} className="mr-2"/>{res.resourceName} ({res.type})</a>))}
                                </div>
                            )}
                        </li>
                    ))}
                </ul>
            ) : (<p className="text-gray-400 text-sm">No specific skill gaps or training suggestions identified.</p>)}
        </div>
    );
};

const ProactiveInterventionWidget = ({ jobs, employee, allSkills }) => {
    const alerts = useMemo(() => {
        const recentJobs = [...jobs]
            .filter(j => j.status === 'Complete' || j.status === 'Issue')
            .sort((a, b) => b.completedAt.toDate() - a.completedAt.toDate())
            .slice(0, 5);

        if (recentJobs.length < 3) return [];

        const newAlerts = [];
        
        const efficiencies = recentJobs.map(j => {
            if (!j.estimatedTime || !j.completedAt?.toDate() || !j.startedAt?.toDate()) return null;
            const actualSeconds = (j.completedAt.toDate().getTime() - j.startedAt.toDate().getTime() - (j.totalPausedMilliseconds || 0)) / 1000;
            if (actualSeconds <= 0) return null;
            return (j.estimatedTime * 60) / actualSeconds;
        }).filter(e => e !== null);

        if (efficiencies.length >= 3 && efficiencies[0] < efficiencies[efficiencies.length - 1]) {
            newAlerts.push({
                id: 'efficiency-decline',
                icon: <TrendingDown className="text-yellow-400" size={20} />,
                title: "Efficiency Trend Alert",
                message: "A potential decline in efficiency has been observed over the last few jobs. Early review is recommended."
            });
        }
        
        const issueCount = recentJobs.filter(j => j.status === 'Issue' || j.status === 'Archived - Issue').length;
        if (issueCount >= 2) {
             newAlerts.push({
                id: 'rework-increase',
                icon: <ShieldAlert className="text-red-400" size={20} />,
                title: "Rework Rate Concern",
                message: `An increase in jobs with issues (${issueCount} of the last ${recentJobs.length}) has been detected. Consider a quality check-in.`
            });
        }

        const underestimatedJobs = recentJobs.filter(j => {
            if (!j.estimatedTime || !j.completedAt?.toDate() || !j.startedAt?.toDate()) return false;
            const actualSeconds = (j.completedAt.toDate().getTime() - j.startedAt.toDate().getTime() - (j.totalPausedMilliseconds || 0)) / 1000;
            return actualSeconds > (j.estimatedTime * 60);
        }).length;

        if (underestimatedJobs / recentJobs.length >= 0.6) {
             newAlerts.push({
                id: 'time-estimation',
                icon: <Clock className="text-blue-400" size={20} />,
                title: "Time Estimation Pattern",
                message: "A pattern of underestimating job duration has been noted. A review of the estimation process may be helpful."
            });
        }

        return newAlerts;

    }, [jobs, employee, allSkills]);

    if (alerts.length === 0) return null;

    return (
        <div className="bg-gray-800/50 p-6 rounded-lg border border-yellow-500/30">
            <h3 className="text-xl font-bold text-white mb-4 flex items-center gap-2"><Lightbulb size={20} className="text-yellow-400"/> Proactive Interventions</h3>
            <p className="text-sm text-gray-400 mb-4">The following trends have been identified from recent activity and may warrant a proactive conversation.</p>
            <ul className="space-y-3">
                {alerts.map(alert => (
                    <li key={alert.id} className="flex items-start space-x-3 p-3 bg-gray-700/40 rounded-md">
                        <div className="flex-shrink-0 mt-1">{alert.icon}</div>
                        <div>
                            <h4 className="font-semibold text-gray-200">{alert.title}</h4>
                            <p className="text-sm text-gray-300">{alert.message}</p>
                        </div>
                    </li>
                ))}
            </ul>
        </div>
    );
};

const EmployeeIntelligencePage = () => {
    const { employeeId } = useParams();
    const [employee, setEmployee] = useState(null);
    const [allEmployees, setAllEmployees] = useState([]);
    const [jobs, setJobs] = useState([]);
    const [allJobs, setAllJobs] = useState([]);
    const [allSkills, setAllSkills] = useState([]);
    const [trainingResources, setTrainingResources] = useState([]);
    const [overheads, setOverheads] = useState(0);
    const [loading, setLoading] = useState(true);
    const [isReworkModalOpen, setReworkModalOpen] = useState(false);
    const [isEfficiencyModalOpen, setEfficiencyModalOpen] = useState(false);

    useEffect(() => {
        let unsubscribe = () => {};
        const fetchAllData = async () => {
            if (!employeeId) return;
            setLoading(true);
            try {
                const employeeDocRef = doc(db, 'employees', employeeId);
                const [employeeDoc, completedJobs, overheadCategories, allEmps, fetchedSkills, fetchedResources] = await Promise.all([
                    getDoc(employeeDocRef), getCompletedJobsForEmployee(employeeId), getOverheadCategories(), getEmployees(), getSkills(), getTrainingResources(),
                ]);
                if (employeeDoc.exists()) setEmployee({ id: employeeDoc.id, ...employeeDoc.data() });
                setJobs(completedJobs); setAllEmployees(allEmps); setAllSkills(fetchedSkills); setTrainingResources(fetchedResources);
                unsubscribe = listenToJobCards(j => setAllJobs(j));
                let totalOverheads = 0;
                const expensePromises = overheadCategories.map(cat => getOverheadExpenses(cat.id));
                const expenseResults = await Promise.all(expensePromises);
                expenseResults.flat().forEach(exp => { totalOverheads += exp.amount || 0; });
                setOverheads(totalOverheads);
            } catch (error) { console.error("Error fetching employee data:", error); }
            setLoading(false);
        };
        fetchAllData();
        return () => unsubscribe();
    }, [employeeId]);

    const { performanceMetrics, overheadCostPerHour, earnedBadges } = useMemo(() => {
        const metrics = { individual: { efficiency: 0, netValueAdded: 0, reworkRate: 0, jobsCompleted: 0 }, team: { efficiency: 0, netValueAdded: 0, reworkRate: 0 } };
        if (!employee || allEmployees.length === 0) return { performanceMetrics: metrics, overheadCostPerHour: 0, earnedBadges: [] };
        
        const calculatedOverheadCostPerHour = overheads > 0 && allEmployees.length > 0 ? overheads / (allEmployees.length * 173.2) : 0;
        const issueJobsCount = jobs.filter(j => j.status === 'Issue' || j.status === 'Archived - Issue').length;
        const completedJobs = jobs.filter(j => j.status === 'Complete');
        let individualTotalWorkMinutes = 0, individualTotalEfficiencyRatioSum = 0, individualTotalJobValue = 0, jobsWithTime = 0;
        
        completedJobs.forEach(job => {
            if (job.startedAt?.toDate && job.completedAt?.toDate) {
                const durationSeconds = (job.completedAt.toDate().getTime() - job.startedAt.toDate().getTime() - (job.totalPausedMilliseconds || 0)) / 1000;
                if(durationSeconds > 0) {
                    individualTotalWorkMinutes += durationSeconds / 60;
                    if (job.estimatedTime > 0) { 
                        individualTotalEfficiencyRatioSum += (job.estimatedTime * 60) / durationSeconds;
                        jobsWithTime++;
                     }
                }
            }
            individualTotalJobValue += job.totalCost || 0;
        });

        const burdenedRate = (employee.hourlyRate || 0) + calculatedOverheadCostPerHour;
        const totalLaborCost = (individualTotalWorkMinutes / 60) * burdenedRate;
        metrics.individual = {
            efficiency: jobsWithTime > 0 ? (individualTotalEfficiencyRatioSum / jobsWithTime) * 100 : 0,
            netValueAdded: individualTotalJobValue - totalLaborCost,
            reworkRate: jobs.length > 0 ? (issueJobsCount / jobs.length) * 100 : 0,
            jobsCompleted: jobs.length
        };
        
        const departmentEmployees = allEmployees.filter(e => e.departmentId === employee.departmentId);
        const departmentEmployeeIds = new Set(departmentEmployees.map(e => e.id));
        const departmentJobs = allJobs.filter(j => j.completedAt && departmentEmployeeIds.has(j.employeeId));
        const teamIssueJobsCount = departmentJobs.filter(j => j.status === 'Issue' || j.status === 'Archived - Issue').length;
        const teamCompletedJobs = departmentJobs.filter(j => j.status === 'Complete' && j.startedAt?.toDate && j.completedAt?.toDate);
        
        const employeeMap = new Map(allEmployees.map(e => [e.id, e]));
        let teamTotalEfficiencyRatioSum = 0, teamTotalValue = 0, teamTotalLaborCost = 0, teamJobsWithTime = 0;
        
        teamCompletedJobs.forEach(job => {
            const jobWorkMinutes = ((job.completedAt.toDate().getTime() - job.startedAt.toDate().getTime() - (job.totalPausedMilliseconds || 0)) / 1000) / 60;
            if (job.estimatedTime > 0 && jobWorkMinutes > 0) {
                const actualSeconds = jobWorkMinutes * 60;
                teamTotalEfficiencyRatioSum += (job.estimatedTime * 60) / actualSeconds;
                teamJobsWithTime++;
            }
            const employeeForJob = employeeMap.get(job.employeeId);
            if(employeeForJob) {
                 const empBurdenedRate = (employeeForJob.hourlyRate || 0) + calculatedOverheadCostPerHour;
                 teamTotalLaborCost += (jobWorkMinutes / 60) * empBurdenedRate;
            }
            teamTotalValue += job.totalCost || 0;
        });

        metrics.team = {
            efficiency: teamJobsWithTime > 0 ? (teamTotalEfficiencyRatioSum / teamJobsWithTime) * 100 : 0,
            netValueAdded: departmentEmployees.length > 0 ? (teamTotalValue - teamTotalLaborCost) / departmentEmployees.length : 0,
            reworkRate: departmentJobs.length > 0 ? (teamIssueJobsCount / departmentJobs.length) * 100 : 0
        };

        const badges = [];
        if (metrics.individual.reworkRate <= 1 && metrics.individual.jobsCompleted >= 10) {
            badges.push({ id: 'quality-champ', icon: <ShieldCheck size={24} />, label: 'Quality Champion', color: 'bg-green-500/20 text-green-300', description: 'Awarded for maintaining a rework rate of 1% or less over at least 10 jobs.' });
        }
        if (metrics.individual.efficiency >= 120 && metrics.individual.jobsCompleted >= 10) {
            badges.push({ id: 'efficiency-king', icon: <Zap size={24} />, label: 'Efficiency King', color: 'bg-purple-500/20 text-purple-300', description: 'Awarded for maintaining an average efficiency of 120% or more.' });
        }
        if (metrics.individual.jobsCompleted >= 100) {
            badges.push({ id: '100-club', icon: <Gem size={24} />, label: '100 Club', color: 'bg-blue-500/20 text-blue-300', description: 'Awarded for completing 100 jobs.' });
        }
        const kudosCount = jobs.filter(j => j.kudos === true).length;
        if (kudosCount > 0) {
            badges.push({ id: 'kudos', icon: <Star size={24} />, label: `${kudosCount}x Kudos`, color: 'bg-yellow-500/20 text-yellow-300', description: 'Recognized by management for outstanding work.' });
        }

        return { performanceMetrics: metrics, overheadCostPerHour: calculatedOverheadCostPerHour, earnedBadges: badges };
    }, [employee, jobs, allEmployees, allJobs, overheads]);

    const employeeWithMetrics = useMemo(() => {
        if (!employee) return null;
        return { ...employee, performanceMetrics };
    }, [employee, performanceMetrics]);

    if (loading) return <p className="text-white text-center">Loading Performance & Value Engine...</p>;
    if (!employee) return <p className="text-red-500 text-center">Employee not found.</p>;

    return (
        <>
            <div className="space-y-8">
                <div>
                    <Link to="/performance" className="flex items-center text-blue-400 hover:text-blue-300 mb-4"><ChevronsLeft size={20} className="mr-1" />Back to Business Performance Dashboard</Link>
                    <div className="bg-gray-800/50 p-6 rounded-lg border border-gray-700">
                        <h2 className="text-3xl font-bold text-white">{employee.name}</h2>
                        <p className="text-gray-400">Performance & Value Engine</p>
                    </div>
                </div>
                <TrophyCase badges={earnedBadges} />
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <KpiCard icon={<Zap size={24} />} title="Overall Efficiency" value={`${performanceMetrics.individual.efficiency.toFixed(0)}%`} teamAverage={`${performanceMetrics.team.efficiency.toFixed(0)}%`} color="bg-purple-500/20 text-purple-400" onClick={() => setEfficiencyModalOpen(true)} buttonText="Analyze by Department" />
                    <KpiCard icon={<DollarSign size={24} />} title="Net Value Added (Period)" value={`R ${performanceMetrics.individual.netValueAdded.toFixed(2)}`} teamAverage={`R ${performanceMetrics.team.netValueAdded.toFixed(2)}`} color="bg-green-500/20 text-green-400" />
                    <KpiCard icon={<AlertCircle size={24} />} title="Rework / Issue Rate" value={`${performanceMetrics.individual.reworkRate.toFixed(1)}%`} teamAverage={`${performanceMetrics.team.reworkRate.toFixed(1)}%`} color="bg-red-500/20 text-red-400" onClick={() => setReworkModalOpen(true)} buttonText="Analyze Root Causes"/>
                    <KpiCard icon={<CheckCircle2 size={24} />} title="Jobs Completed" value={performanceMetrics.individual.jobsCompleted} color="bg-blue-500/20 text-blue-400" />
                </div>
                
                <ProactiveInterventionWidget jobs={jobs} employee={employee} allSkills={allSkills} />

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <div className="lg:col-span-2"><PerformanceSnapshot metrics={performanceMetrics} /></div>
                    <RealTimeValueWidget jobs={jobs} employee={employee} overheadCostPerHour={overheadCostPerHour} />
                </div>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <div className="bg-gray-800/50 p-6 rounded-lg border border-gray-700">
                        <h3 className="text-xl font-bold text-white mb-4">Efficiency Over Time</h3>
                        <EfficiencyChart jobs={jobs} />
                    </div>
                    <ValueWasteAnalysis jobs={jobs} />
                </div>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    {/* The component is now correctly placed here */}
                    <ReliabilityReport employeeId={employeeId} />
                    <SkillProgressionWidget employeeId={employeeId} />
                </div>
                {employeeWithMetrics && (<SkillGapAnalysisWidget employee={employeeWithMetrics} jobs={jobs} allSkills={allSkills} trainingResources={trainingResources} />)}
            </div>
            {isEfficiencyModalOpen && (<EfficiencyAnalysisModal jobs={jobs} employeeName={employee.name} onClose={() => setEfficiencyModalOpen(false)} />)}
            {isReworkModalOpen && (<ReworkAnalysisModal jobs={jobs} employeeName={employee.name} onClose={() => setReworkModalOpen(false)} />)}
        </>
    );
};

export default EmployeeIntelligencePage;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\IssuesPage.jsx
==================================================
import React, { useState, useEffect, useMemo } from 'react';
// MainLayout import removed
import { listenToJobCards, updateJobStatus, getEmployees, getAllInventoryItems, getTools, getToolAccessories, deleteDocument } from '../api/firestore';
import JobDetailsModal from '../components/features/tracking/JobDetailsModal';
import Button from '../components/ui/Button';
import { useSearchParams, useNavigate } from 'react-router-dom';

const IssuesPage = () => {
    const [jobs, setJobs] = useState([]);
    const [loading, setLoading] = useState(true);
    const [selectedJob, setSelectedJob] = useState(null);
    const [employeeHourlyRates, setEmployeeHourlyRates] = useState({});
    const [allEmployees, setAllEmployees] = useState([]);
    const [allInventoryItems, setAllInventoryItems] = useState([]);
    const [allTools, setAllTools] = useState([]);
    const [allToolAccessories, setAllToolAccessories] = useState([]);
    const [searchParams, setSearchParams] = useSearchParams();
    const navigate = useNavigate();

    useEffect(() => {
        let unsubscribeJobs;
        const fetchData = async () => {
            setLoading(true);
            try {
                const [fetchedEmployees, fetchedInventory, fetchedTools, fetchedToolAccessories] = await Promise.all([
                    getEmployees(),
                    getAllInventoryItems(),
                    getTools(),
                    getToolAccessories(),
                ]);
                setAllEmployees(fetchedEmployees);
                setAllInventoryItems(fetchedInventory);
                setAllTools(fetchedTools);
                setAllToolAccessories(fetchedToolAccessories);

                const rates = fetchedEmployees.reduce((acc, emp) => {
                    acc[emp.id] = emp.hourlyRate || 0;
                    return acc;
                }, {});
                setEmployeeHourlyRates(rates);

                unsubscribeJobs = listenToJobCards((fetchedJobs) => {
                    setJobs(fetchedJobs);
                    setLoading(false);
                });
            } catch (error) {
                console.error("Failed to fetch initial data for issues page:", error);
                setLoading(false);
            }
        };

        fetchData();
        return () => { if (unsubscribeJobs) unsubscribeJobs(); };
    }, []);

    useEffect(() => {
        const jobIdFromUrl = searchParams.get('jobId');
        if (jobIdFromUrl && !loading && jobs.length > 0) {
            const jobToOpen = jobs.find(job => job.jobId === jobIdFromUrl);
            if (jobToOpen) {
                setSelectedJob(jobToOpen);
            }
        }
    }, [searchParams, loading, jobs]);

    const issueJobs = useMemo(() => jobs.filter(job => job.status === 'Issue'), [jobs]);

    const handleArchive = async (jobId) => {
        if (window.confirm("Are you sure you want to archive this issue? This action cannot be undone.")) {
            try {
                await updateJobStatus(jobId, 'Archived - Issue');
                alert("Issue has been archived.");
            } catch (error) {
                console.error("Failed to archive issue:", error);
                alert("Error: Could not archive the issue.");
            }
        }
    };

    const handleUpdateJob = async (jobDocId, updatedData) => {
        try {
            await updateDocument('createdJobCards', jobDocId, updatedData);
        } catch (error) {
            console.error("Error updating job from modal:", error);
            throw error;
        }
    };

    const handleDeleteJob = async (jobDocId) => {
        if (window.confirm(`Are you sure you want to permanently delete job "${selectedJob?.jobId}"?`)) {
            try {
                await deleteDocument('createdJobCards', jobDocId);
                alert("Job deleted successfully!");
                setSelectedJob(null);
                navigate('/issues', { replace: true });
            } catch (error) {
                console.error("Error deleting job from modal:", error);
                alert("Failed to delete job.");
            }
        }
    };

    const handleCloseModal = () => {
        setSelectedJob(null);
        navigate('/issues', { replace: true });
    };

    return (
        <>
            <div className="space-y-8">
                <h2 className="text-3xl font-bold text-white">Jobs Requiring Attention</h2>

                <div className="bg-gray-800 rounded-lg border border-gray-700 overflow-hidden">
                    <div className="overflow-x-auto">
                        <table className="w-full text-left">
                            <thead>
                                <tr className="border-b border-gray-600 bg-gray-900/50">
                                    <th className="p-3 text-sm font-semibold text-gray-400">Part</th>
                                    <th className="p-3 text-sm font-semibold text-gray-400">Employee</th>
                                    <th className="p-3 text-sm font-semibold text-gray-400">Reason for Rejection</th>
                                    <th className="p-3 text-sm font-semibold text-gray-400 text-right">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {loading ? (
                                    <tr><td colSpan="4" className="text-center p-8 text-gray-400">Loading issues...</td></tr>
                                ) : issueJobs.length === 0 ? (
                                    <tr><td colSpan="4" className="text-center p-8 text-gray-400">No jobs require attention.</td></tr>
                                ) : (
                                    issueJobs.map(job => (
                                        <tr key={job.id} className="border-b border-gray-700">
                                            <td className="p-3 text-gray-200">{job.partName} <span className="text-xs text-gray-500 block">{job.jobId}</span></td>
                                            <td className="p-3 text-gray-300">{job.employeeName}</td>
                                            <td className="p-3 text-red-400 italic">{job.issueReason || 'No reason provided.'}</td>
                                            <td className="p-3 text-right flex gap-2 justify-end">
                                                <Button variant="secondary" onClick={() => setSelectedJob(job)}>View Details</Button>
                                                <Button variant="danger" onClick={() => handleArchive(job.id)}>Archive</Button>
                                            </td>
                                        </tr>
                                    ))
                                )}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            {selectedJob && (
                <JobDetailsModal 
                    job={selectedJob} 
                    onClose={handleCloseModal}
                    currentTime={Date.now()} 
                    employeeHourlyRates={employeeHourlyRates} 
                    allEmployees={allEmployees} 
                    onUpdateJob={handleUpdateJob} 
                    onDeleteJob={handleDeleteJob} 
                    allInventoryItems={allInventoryItems} 
                    allTools={allTools} 
                    allToolAccessories={allToolAccessories} 
                />
            )}
        </>
    );
};

export default IssuesPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\JobCardAdjustmentPage.jsx
==================================================
// C:\Development\TOJEM-OS\tojem-os\src\pages\JobCardAdjustmentPage.jsx

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { getJobsAwaitingQC, updateJobCardWithAdjustments, getAllInventoryItems } from '../api/firestore';
import Input from '../components/ui/Input';
import Button from '../components/ui/Button';
import Dropdown from '../components/ui/Dropdown';
import Textarea from '../components/ui/Textarea';
import { ArrowLeft } from 'lucide-react';

const JobCardAdjustmentPage = () => {
    const navigate = useNavigate();
    const { user } = useAuth();
    const [jobsAwaitingQC, setJobsAwaitingQC] = useState([]);
    const [selectedJobId, setSelectedJobId] = useState('');
    const [selectedJob, setSelectedJob] = useState(null);
    const [timeAdjustment, setTimeAdjustment] = useState(0);
    const [consumableAdjustments, setConsumableAdjustments] = useState({});
    const [newConsumable, setNewConsumable] = useState({ itemId: '', qtyChange: 0 });
    const [allInventoryItems, setAllInventoryItems] = useState([]);
    const [adjustmentReason, setAdjustmentReason] = useState('');
    const [loading, setLoading] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);

    useEffect(() => {
        const fetchQCJobs = async () => {
            setLoading(true);
            const qcJobs = await getJobsAwaitingQC();
            setJobsAwaitingQC(qcJobs);
            setLoading(false);
        };

        fetchQCJobs();

        const fetchInventory = async () => {
            const inventory = await getAllInventoryItems();
            setAllInventoryItems(inventory);
        };
        fetchInventory();
    }, []);

    useEffect(() => {
        if (selectedJobId && jobsAwaitingQC.length > 0) {
            const job = jobsAwaitingQC.find(j => j.id === selectedJobId);
            setSelectedJob(job);
        } else {
            setSelectedJob(null);
            setTimeAdjustment(0);
            setConsumableAdjustments({});
            setAdjustmentReason('');
        }
    }, [selectedJobId, jobsAwaitingQC]);

    const handleTimeAdjustmentChange = (e) => setTimeAdjustment(parseInt(e.target.value) || 0);
    const handleReasonChange = (e) => setAdjustmentReason(e.target.value);
    const handleSelectJob = (e) => setSelectedJobId(e.target.value);

    const handleQtyChange = (consumableId, e) => {
        setConsumableAdjustments(prev => ({
            ...prev,
            [consumableId]: parseInt(e.target.value) || 0,
        }));
    };

    const handleNewConsumableItemChange = (e) => {
        setNewConsumable(prev => ({ ...prev, itemId: e.target.value }));
    };

    const handleNewConsumableQtyChange = (e) => {
        setNewConsumable(prev => ({ ...prev, qtyChange: parseInt(e.target.value) || 0 }));
    };

    const handleAddConsumable = () => {
        if (newConsumable.itemId && newConsumable.qtyChange !== 0) {
            setConsumableAdjustments(prev => ({
                ...prev,
                [newConsumable.itemId]: (prev[newConsumable.itemId] || 0) + newConsumable.qtyChange,
            }));
            setNewConsumable({ itemId: '', qtyChange: 0 });
        }
    };

    const handleSubmit = async () => {
        if (!selectedJobId) {
            alert('Please select a job to adjust.');
            return;
        }
        if (!adjustmentReason.trim()) {
            alert('Please provide a reason for the adjustment.');
            return;
        }

        setIsSubmitting(true);
        try {
            await updateJobCardWithAdjustments(selectedJobId, timeAdjustment, consumableAdjustments, adjustmentReason, user.uid);
            alert('Job card adjustments submitted successfully!');
            setSelectedJobId('');
        } catch (error) {
            console.error('Error submitting job card adjustments:', error);
            alert('Failed to submit job card adjustments.');
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <div>
            <Button onClick={() => navigate(-1)} className="mb-4">
                <ArrowLeft className="mr-2" /> Back
            </Button>
            <h2 className="text-2xl font-bold text-white mb-4">Job Card Adjustment</h2>

            <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 space-y-4 max-w-xl">
                <Dropdown
                    label="Select Completed Job Card"
                    name="jobId"
                    value={selectedJobId}
                    onChange={handleSelectJob}
                    options={jobsAwaitingQC.map(job => ({ id: job.id, name: `${job.partName} (${job.jobId.substring(0, 8)})` }))}
                    placeholder="Select a job..."
                />

                {selectedJob && (
                    <div className="space-y-4">
                        <div>
                            <p className="text-gray-300">Original Estimated Time: {selectedJob.estimatedTime} minutes</p>
                            <p className="text-gray-300">Current Actual Time: {/* Display initial or logged time here */} </p>
                            <Input label="Adjust Time (minutes to add/subtract)" type="number" value={timeAdjustment} onChange={handleTimeAdjustmentChange} />
                        </div>

                        <div>
                            <h3 className="text-lg font-semibold text-white mb-2">Adjust Consumables</h3>
                            {selectedJob.consumablesUsedInitial && Object.keys(selectedJob.consumablesUsedInitial).map(consumableId => (
                                <div key={consumableId} className="flex items-center space-x-2">
                                    <p className="text-gray-300">{/* Display consumable name */} ({consumableId})</p>
                                    <Input
                                        type="number"
                                        label={`Qty Change`}
                                        onChange={(e) => handleQtyChange(consumableId, e)}
                                    />
                                </div>
                            ))}
                            <div className="flex items-center space-x-2">
                                <Dropdown
                                    label="Add New Consumable"
                                    name="newConsumableItem"
                                    value={newConsumable.itemId}
                                    onChange={handleNewConsumableItemChange}
                                    options={allInventoryItems.map(item => ({ id: item.id, name: item.name }))}
                                    placeholder="Select consumable..."
                                />
                                <Input
                                    type="number"
                                    label="Qty Change"
                                    value={newConsumable.qtyChange}
                                    onChange={handleNewConsumableQtyChange}
                                />
                                <Button onClick={handleAddConsumable}>Add</Button>
                            </div>
                        </div>

                        <Textarea label="Reason for Adjustment" value={adjustmentReason} onChange={handleReasonChange} rows={4} />

                        <Button onClick={handleSubmit} variant="primary" disabled={isSubmitting}>
                            {isSubmitting ? 'Submitting...' : 'Submit Adjustment'}
                        </Button>
                    </div>
                )}

                {!selectedJob && (
                    <p className="text-gray-400">Select a completed job card to view and adjust its details.</p>
                )}
            </div>
        </div>
    );
};

// Placeholder function - you'll need to implement this in your firestore.js or a cloud function
// REMOVE THESE LINES:
// const getJobsAwaitingQC = async () => {
//     // Replace this with your actual Firestore query
//     return [];
// };
//
// // Placeholder function - you'll need to implement this in your firestore.js or a cloud function
// const updateJobCardWithAdjustments = async (jobId, timeAdjustment, consumableAdjustments, adjustmentReason, userId) => {
//     // Implement your Firestore update logic here
//     console.log('Submitting adjustments:', jobId, timeAdjustment, consumableAdjustments, adjustmentReason, userId);
// };
//
// // Placeholder function - you'll need to implement this in your firestore.js or a cloud function
// const getAllInventoryItems = async () => {
//     // Replace this with your actual Firestore query to get all inventory items
//     return [];
// };

export default JobCardAdjustmentPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\JobCreatorPage.jsx
==================================================
// FILE: src/pages/JobCreatorPage.jsx (UPDATED)

import React, { useState, useEffect } from 'react';
import CustomJobCreator from '../components/features/job_cards/CustomJobCreator';
import { getCampaigns } from '../api/firestore'; // Import campaign fetch function
import JobCardCreator from '../components/features/job_cards/JobCardCreator';
import Dropdown from '../components/ui/Dropdown'; // We'll use this for the new dropdown

const JobCreatorPage = () => {
    const [mode, setMode] = useState('catalog');
    const [campaigns, setCampaigns] = useState([]);
    const [selectedCampaignId, setSelectedCampaignId] = useState(''); // State for the selected campaign

    // Fetch active campaigns when the page loads
    useEffect(() => {
        const fetchActiveCampaigns = async () => {
            try {
                const allCampaigns = await getCampaigns();
                // Filter for campaigns that are currently active or recently ended
                const now = new Date();
                const active = allCampaigns.filter(c => {
                    const startDate = c.startDate?.toDate();
                    const endDate = c.endDate?.toDate();
                    if (!startDate) return false;
                    // If no end date, it's active if start date is in the past
                    if (!endDate) return startDate <= now;
                    // If there is an end date, it's active if today is between start and end
                    return startDate <= now && endDate >= now;
                });
                setCampaigns(active);
            } catch (error) {
                console.error("Failed to fetch campaigns:", error);
            }
        };
        fetchActiveCampaigns();
    }, []);

    return (
        <div className="space-y-8">
            <h2 className="text-3xl font-bold text-white">Job Card Creator</h2>
            
            {/* New Section: Campaign Selection */}
            <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 max-w-xl mx-auto">
                <Dropdown
                    label="Marketing Campaign (Optional)"
                    name="campaignSelector"
                    value={selectedCampaignId}
                    onChange={(e) => setSelectedCampaignId(e.target.value)}
                    options={campaigns}
                    placeholder="Select campaign that generated this job..."
                />
                <p className="text-xs text-gray-500 mt-2">
                    Tagging a job with a campaign helps track your return on investment. You can manage campaigns in Settings.
                </p>
            </div>

            <div className="flex gap-2 p-1 bg-gray-800 rounded-lg max-w-xl mx-auto">
                <button
                    onClick={() => setMode('catalog')}
                    className={`flex-1 p-2 text-sm font-semibold rounded-md transition-colors ${mode === 'catalog' ? 'bg-blue-600 text-white' : 'hover:bg-gray-700'}`}
                >
                    Create from Catalog
                </button>
                <button
                    onClick={() => setMode('custom')}
                    className={`flex-1 p-2 text-sm font-semibold rounded-md transition-colors ${mode === 'custom' ? 'bg-blue-600 text-white' : 'hover:bg-gray-700'}`}
                >
                    Create Custom Job
                </button>
            </div>

            {mode === 'custom' && 
                <CustomJobCreator 
                    // Pass the selected campaign ID down
                    campaignId={selectedCampaignId} 
                />
            }

            {mode === 'catalog' && (
                <JobCardCreator
                    key="catalog-job-creation"
                    // Pass the selected campaign ID down
                    campaignId={selectedCampaignId} 
                />
            )}
        </div>
    );
};

export default JobCreatorPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\LiveTrackingPage.jsx
==================================================
import React from 'react';
// MainLayout import removed
import LiveTrackingTable from '../components/features/tracking/LiveTrackingTable';

const TrackingPage = () => {
  return (
    <div className="space-y-8">
      <h2 className="text-3xl font-bold text-white">Live Job Tracking</h2>
      <LiveTrackingTable />
    </div>
  );
};

// Exporting with the name LiveTrackingPage to match other files if needed, but component name is TrackingPage
export default TrackingPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\Login.jsx
==================================================
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import Button from '../components/ui/Button';
import Input from '../components/ui/Input';
import TojemLogo from '../assets/TOJEM 2024.png'; // Import your logo image

const LoginPage = () => {
Â  const [email, setEmail] = useState('');
Â  const [password, setPassword] = useState('');
Â  const [error, setError] = useState('');
Â  const { signIn } = useAuth();

Â  const handleLogin = async (e) => {
Â  Â  e.preventDefault();
Â  Â  setError('');
Â  Â  try {
Â  Â  Â  await signIn(email, password);
Â  Â  Â  // The onAuthStateChanged listener will handle the redirect
Â  Â  } catch (err) {
Â  Â  Â  setError('Failed to sign in. Please check your credentials.');
Â  Â  Â  console.error(err);
Â  Â  }
Â  };

Â  return (
Â  Â  <div className="bg-gray-900 min-h-screen flex items-center justify-center text-white">
Â  Â  Â  <div className="bg-gray-800 p-8 rounded-xl border border-gray-700 shadow-lg w-full max-w-md">
        {/* Replaced H1 text with your logo image for the login page */}
Â  Â  Â  Â  <img src={TojemLogo} alt="TOJEM OS Logo" className="h-16 mx-auto mb-4 object-contain" />
Â  Â  Â  Â  <p className="text-gray-400 text-center mb-6">Please sign in to continue</p>
Â  Â  Â  Â  <form onSubmit={handleLogin} className="space-y-6">
Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  label="Email"
Â  Â  Â  Â  Â  Â  name="email"
Â  Â  Â  Â  Â  Â  type="email"
Â  Â  Â  Â  Â  Â  value={email}
Â  Â  Â  Â  Â  Â  onChange={(e) => setEmail(e.target.value)}
Â  Â  Â  Â  Â  Â  placeholder="you@company.com"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  label="Password"
Â  Â  Â  Â  Â  Â  name="password"
Â  Â  Â  Â  Â  Â  type="password"
Â  Â  Â  Â  Â  Â  value={password}
Â  Â  Â  Â  Â  Â  onChange={(e) => setPassword(e.target.value)}
Â  Â  Â  Â  Â  Â  placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  {error && <p className="text-red-500 text-sm text-center">{error}</p>}
Â  Â  Â  Â  Â  <Button type="submit" className="w-full">
Â  Â  Â  Â  Â  Â  Sign In
Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  </form>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default LoginPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\MarketingPage.jsx
==================================================
// FILE: src/pages/MarketingPage.jsx (FINAL VERSION)

import React, { useState, useEffect, useMemo } from 'react';
import { getCampaigns, getCompletedJobsInRange } from '../api/firestore'; // getCompletedJobsInRange is not used here, but good to keep for potential future use. We will fetch all jobs.
import { listenToJobCards } from '../api/firestore'; // We'll listen to all jobs to get sales data
import Button from '../components/ui/Button';
import { DollarSign, Users, TrendingUp, Percent } from 'lucide-react';

// KPI Card component remains the same
const KpiCard = ({ icon, title, value, color, subValue }) => (
    <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
        <div className="flex items-start space-x-4">
            <div className={`p-3 rounded-full ${color}`}>
                {icon}
            </div>
            <div>
                <p className="text-gray-400 text-sm">{title}</p>
                <p className="text-3xl font-bold text-white">{value}</p>
                {subValue && <p className="text-xs text-gray-500">{subValue}</p>}
            </div>
        </div>
    </div>
);

const MarketingPage = () => {
    const [campaigns, setCampaigns] = useState([]);
    const [jobs, setJobs] = useState([]); // State to hold all jobs
    const [loading, setLoading] = useState(true);
    const [activeRange, setActiveRange] = useState('all');

    useEffect(() => {
        let unsubscribeJobs = () => {};
        const fetchData = async () => {
            setLoading(true);
            try {
                // Fetch campaigns once
                const fetchedCampaigns = await getCampaigns();
                setCampaigns(fetchedCampaigns);
                
                // Listen for real-time updates on all jobs
                unsubscribeJobs = listenToJobCards((fetchedJobs) => {
                    setJobs(fetchedJobs);
                });

            } catch (error) {
                console.error("Error fetching marketing data:", error);
                alert("Could not load marketing data.");
            } finally {
                setLoading(false);
            }
        };
        fetchData();
        
        // Cleanup the listener when the component unmounts
        return () => unsubscribeJobs();
    }, []);

    const processedData = useMemo(() => {
        const now = new Date();
        let startDate = null;

        if (activeRange === '30d') {
            startDate = new Date(new Date().setDate(now.getDate() - 30));
        } else if (activeRange === '90d') {
            startDate = new Date(new Date().setDate(now.getDate() - 90));
        }

        const filteredCampaigns = campaigns.filter(campaign => {
            if (!startDate) return true;
            const campaignStartDate = campaign.startDate?.toDate();
            return campaignStartDate && campaignStartDate >= startDate;
        });
        
        const completedJobs = jobs.filter(j => j.status === 'Complete' && j.campaignId);

        // Enhance campaign data with sales metrics
        const campaignsWithMetrics = filteredCampaigns.map(campaign => {
            const associatedJobs = completedJobs.filter(job => job.campaignId === campaign.id);
            const salesCount = associatedJobs.length;
            const revenue = associatedJobs.reduce((sum, job) => sum + (job.totalCost || 0), 0); // Using totalCost as proxy for sale value for now
            
            // Calculate profit (Revenue - COGS). Here, we assume totalCost IS the COGS.
            // A more advanced model might use a separate 'sellingPrice' field.
            // For now, let's calculate profit based on an assumed margin, e.g., 30% of the job cost.
            // THIS IS A KEY AREA FOR FUTURE IMPROVEMENT
            const estimatedProfit = associatedJobs.reduce((sum, job) => {
                const jobCost = job.totalCost || 0;
                // Let's assume a simple 30% profit margin for calculation purposes.
                // In a real scenario, you'd have: Profit = SellingPrice - totalCost
                return sum + (jobCost * 0.30);
            }, 0);

            const budget = campaign.budget || 0;
            const leads = campaign.leadsGenerated || 0;
            const conversionRate = leads > 0 ? (salesCount / leads) * 100 : 0;
            const roi = budget > 0 ? (estimatedProfit / budget) * 100 : 0; // Return on Investment in %
            const costPerLead = leads > 0 ? budget / leads : 0;

            return {
                ...campaign,
                salesCount,
                revenue,
                estimatedProfit,
                conversionRate,
                roi,
                costPerLead,
            };
        });

        const totalBudget = campaignsWithMetrics.reduce((sum, c) => sum + c.budget, 0);
        const totalLeads = campaignsWithMetrics.reduce((sum, c) => sum + c.leadsGenerated, 0);
        const totalSales = campaignsWithMetrics.reduce((sum, c) => sum + c.salesCount, 0);
        const totalRevenue = campaignsWithMetrics.reduce((sum, c) => sum + c.revenue, 0);
        const totalProfit = campaignsWithMetrics.reduce((sum, c) => sum + c.estimatedProfit, 0);
        const overallRoi = totalBudget > 0 ? (totalProfit / totalBudget) * 100 : 0;
        
        return {
            campaigns: campaignsWithMetrics,
            totalBudget,
            totalLeads,
            totalSales,
            totalRevenue,
            overallRoi,
        };
    }, [campaigns, jobs, activeRange]);

    const formatDate = (timestamp) => {
        if (!timestamp?.toDate) return 'N/A';
        return timestamp.toDate().toLocaleDateString('en-ZA');
    };

    return (
        <div className="space-y-8">
            <h2 className="text-3xl font-bold text-white">Marketing Dashboard</h2>
            
            <div className="bg-gray-800 p-4 rounded-lg border border-gray-700">
                <div className="flex flex-wrap items-center justify-center gap-2">
                    <Button variant={activeRange === '30d' ? 'primary' : 'secondary'} onClick={() => setActiveRange('30d')}>Last 30 Days</Button>
                    <Button variant={activeRange === '90d' ? 'primary' : 'secondary'} onClick={() => setActiveRange('90d')}>Last 90 Days</Button>
                    <Button variant={activeRange === 'all' ? 'primary' : 'secondary'} onClick={() => setActiveRange('all')}>All Time</Button>
                </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <KpiCard 
                    icon={<DollarSign size={24} />} 
                    title="Marketing Spend" 
                    value={`R ${processedData.totalBudget.toFixed(2)}`}
                    color="bg-yellow-500/20 text-yellow-400" 
                />
                 <KpiCard 
                    icon={<Users size={24} />} 
                    title="Leads Generated" 
                    value={processedData.totalLeads}
                    color="bg-blue-500/20 text-blue-400" 
                />
                 <KpiCard 
                    icon={<DollarSign size={24} />} 
                    title="Revenue from Campaigns" 
                    value={`R ${processedData.totalRevenue.toFixed(2)}`}
                    subValue={`${processedData.totalSales} sales`}
                    color="bg-green-500/20 text-green-400" 
                />
                <KpiCard 
                    icon={<TrendingUp size={24} />} 
                    title="Overall ROI" 
                    value={`${processedData.overallRoi.toFixed(1)}%`}
                    color="bg-purple-500/20 text-purple-400" 
                />
            </div>

            <div className="bg-gray-800 rounded-lg border border-gray-700 overflow-hidden">
                <h3 className="text-xl font-bold text-white p-4 border-b border-gray-700">Campaign Performance</h3>
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                        <thead className="bg-gray-900/50">
                            <tr>
                                <th className="p-3 text-sm font-semibold text-gray-400">Campaign</th>
                                <th className="p-3 text-sm font-semibold text-gray-400 text-right">Budget</th>
                                <th className="p-3 text-sm font-semibold text-gray-400 text-right">Leads</th>
                                <th className="p-3 text-sm font-semibold text-gray-400 text-right">Sales</th>
                                <th className="p-3 text-sm font-semibold text-gray-400 text-right">Conv. Rate</th>
                                <th className="p-3 text-sm font-semibold text-gray-400 text-right">Revenue</th>
                                <th className="p-3 text-sm font-semibold text-gray-400 text-right">ROI</th>
                            </tr>
                        </thead>
                        <tbody>
                            {loading ? (
                                <tr><td colSpan="7" className="text-center p-8 text-gray-400">Loading campaign performance...</td></tr>
                            ) : processedData.campaigns.length === 0 ? (
                                <tr><td colSpan="7" className="text-center p-8 text-gray-400">No campaigns found for the selected period.</td></tr>
                            ) : (
                                processedData.campaigns.map(campaign => (
                                    <tr key={campaign.id} className="border-b border-gray-700 hover:bg-gray-700/50">
                                        <td className="p-3 text-white font-semibold">{campaign.name} <span className="text-xs text-gray-400 font-normal">({campaign.platform})</span></td>
                                        <td className="p-3 text-gray-300 font-mono text-right">R{campaign.budget.toFixed(2)}</td>
                                        <td className="p-3 font-bold text-right">{campaign.leadsGenerated || 0}</td>
                                        <td className="p-3 font-bold text-right">{campaign.salesCount}</td>
                                        <td className="p-3 text-blue-400 font-mono text-right">{campaign.conversionRate.toFixed(1)}%</td>
                                        <td className="p-3 text-green-400 font-mono text-right">R{campaign.revenue.toFixed(2)}</td>
                                        <td className={`p-3 font-bold text-right font-mono ${campaign.roi >= 0 ? 'text-purple-400' : 'text-red-400'}`}>{campaign.roi.toFixed(1)}%</td>
                                    </tr>
                                ))
                            )}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

export default MarketingPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\PayrollPage.jsx
==================================================
// src/pages/PayrollPage.jsx (Final Correct Version)

import React, { useState } from 'react';
import PermanentPayroll from '../components/features/payroll/PermanentPayroll';
import SubcontractorLedger from '../components/features/payroll/SubcontractorLedger';

const TabButton = ({ id, label, activeTab, setActiveTab }) => {
    const isActive = activeTab === id;
    return (
      <button
        onClick={() => setActiveTab(id)}
        className={`px-5 py-2 text-sm font-semibold rounded-t-lg border-b-2 flex items-center gap-2 transition-colors ${
          isActive ? 'border-blue-500 text-white' : 'border-transparent text-gray-400 hover:border-gray-500 hover:text-gray-200'
        }`}
      >
        {label}
      </button>
    );
};


const PayrollPage = () => {
    const [activeTab, setActiveTab] = useState('permanent');

    return (
        <div className="space-y-4">
            <h2 className="text-3xl font-bold text-white">Payroll & Payments</h2>

            <div className="border-b border-gray-700">
                <nav className="-mb-px flex space-x-6">
                    <TabButton id="permanent" label="Permanent Staff Payroll" activeTab={activeTab} setActiveTab={setActiveTab} />
                    <TabButton id="subcontractor" label="Subcontractor Payments" activeTab={activeTab} setActiveTab={setActiveTab} />
                </nav>
            </div>

            <div className="mt-6">
                {activeTab === 'permanent' && <PermanentPayroll />}
                {activeTab === 'subcontractor' && <SubcontractorLedger />}
            </div>
        </div>
    );
};

export default PayrollPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\PerformancePage.jsx
==================================================
// src/pages/PerformancePage.jsx (Corrected)

import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { getEmployees, listenToJobCards, getOverheadCategories, getOverheadExpenses, getDepartments } from '../api/firestore';
import Button from '../components/ui/Button';
import Dropdown from '../components/ui/Dropdown';
import { CheckCircle2, Clock, DollarSign, Zap, Star } from 'lucide-react';
import PerformanceLeaderboard from '../components/intelligence/PerformanceLeaderboard';

const KpiCard = ({ icon, title, value, color }) => (
    <div className="bg-gray-800 p-5 rounded-lg border border-gray-700 flex items-start space-x-4">
        <div className={`p-3 rounded-full ${color}`}>
            {icon}
        </div>
        <div>
            <p className="text-gray-400 text-sm">{title}</p>
            <p className="text-2xl font-bold text-white">{value}</p>
        </div>
    </div>
);

const PerformancePage = () => {
    const [employees, setEmployees] = useState([]);
    const [jobs, setJobs] = useState([]);
    const [departments, setDepartments] = useState([]);
    const [allOverheadExpenses, setAllOverheadExpenses] = useState([]);
    const [loading, setLoading] = useState(true);
    const [leaderboardDepartmentFilter, setLeaderboardDepartmentFilter] = useState('all');
    const [leaderboardSortKey, setLeaderboardSortKey] = useState('ops');

    useEffect(() => {
        let unsubscribeJobs = () => {};
        const fetchAllDataAndSetupListeners = async () => {
            setLoading(true);
            try {
                const [fetchedEmployees, fetchedCategories, fetchedDepartments] = await Promise.all([
                    getEmployees(),
                    getOverheadCategories(),
                    getDepartments()
                ]);
                
                setDepartments(fetchedDepartments);
                
                const departmentsMap = new Map(fetchedDepartments.map(d => [d.id, d.name]));
                const employeesWithDeptName = fetchedEmployees.map(emp => ({ ...emp, departmentName: departmentsMap.get(emp.departmentId) || 'Unknown' }));
                setEmployees(employeesWithDeptName);

                const expensePromises = fetchedCategories.map(category => getOverheadExpenses(category.id));
                const results = await Promise.all(expensePromises);
                setAllOverheadExpenses(results.flat());
                
                unsubscribeJobs = listenToJobCards((fetchedJobs) => setJobs(fetchedJobs));
                setLoading(false);
            } catch (error) {
                console.error("Failed to fetch all data for performance page:", error);
                setLoading(false);
            }
        };

        fetchAllDataAndSetupListeners();
        return () => { if (unsubscribeJobs) unsubscribeJobs(); };
    }, []);
    
    const performanceData = useMemo(() => {
        const totalMonthlyOverheads = (allOverheadExpenses || []).reduce((sum, exp) => sum + (exp.amount || 0), 0);
        // Use a safe default for number of employees to avoid division by zero
        const employeeCount = employees.length > 0 ? employees.length : 1;
        const overheadCostPerProductiveHour = totalMonthlyOverheads / (employeeCount * 173.2);

        // --- THIS IS THE CORRECTED LOGIC BLOCK ---
        
        // First, filter for jobs that are actually completed and have valid time data
        const validCompletedJobs = jobs.filter(job => 
            job.status === 'Complete' && 
            job.startedAt && 
            job.completedAt
        );

        // Now, perform all calculations on this clean, valid data set
        const overallTotalWorkMinutes = validCompletedJobs.reduce((acc, job) => {
            const durationSeconds = (job.completedAt.toDate().getTime() - job.startedAt.toDate().getTime() - (job.totalPausedMilliseconds || 0)) / 1000;
            return acc + (durationSeconds > 0 ? durationSeconds / 60 : 0);
        }, 0);

        const efficiencyData = validCompletedJobs.map(job => {
            if (!job.estimatedTime || job.estimatedTime <= 0) return null;
            const durationSeconds = (job.completedAt.toDate().getTime() - job.startedAt.toDate().getTime() - (job.totalPausedMilliseconds || 0)) / 1000;
            if (durationSeconds <= 0) return null;
            return ((job.estimatedTime * 60) / durationSeconds) * 100;
        }).filter(Boolean); // Filter out nulls

        const overallAvgEfficiency = efficiencyData.length > 0 ? efficiencyData.reduce((sum, eff) => sum + eff, 0) / efficiencyData.length : 0;
        const overallTotalJobValue = validCompletedJobs.reduce((acc, job) => acc + (job.totalCost || 0), 0);

        // --- END OF CORRECTION ---

        let employeeMetrics = (employees || []).map(emp => {
            const empJobs = jobs.filter(job => job.employeeId === emp.id && (job.status === 'Complete' || job.status === 'Issue' || job.status === 'Archived - Issue'));
            const empJobsCompleted = empJobs.length;
            const empIssueJobs = empJobs.filter(j => j.status === 'Issue' || j.status === 'Archived - Issue').length;
            
            let empTotalWorkMinutes = 0, empTotalEfficiencyRatioSum = 0, empTotalJobValue = 0;
            empJobs.forEach(job => {
                if (job.startedAt && job.completedAt) {
                    const durationSeconds = Math.max(0, (job.completedAt.toDate().getTime() - job.startedAt.toDate().getTime() - (job.totalPausedMilliseconds || 0)) / 1000);
                    if (durationSeconds > 0) empTotalWorkMinutes += durationSeconds / 60;
                    if (job.estimatedTime > 0 && durationSeconds > 0) empTotalEfficiencyRatioSum += (job.estimatedTime * 60) / durationSeconds;
                }
                if (typeof job.totalCost === 'number') empTotalJobValue += job.totalCost;
            });

            const empAvgEfficiency = empJobsCompleted > 0 ? (empTotalEfficiencyRatioSum / empJobsCompleted) * 100 : 0;
            const burdenedRate = (emp.hourlyRate || 0) + overheadCostPerProductiveHour;
            const totalLaborCost = (empTotalWorkMinutes / 60) * burdenedRate;
            
            return {
                ...emp,
                jobsCompleted: empJobsCompleted,
                avgEfficiency: empAvgEfficiency,
                netValueAdded: empTotalJobValue - totalLaborCost,
                reworkRate: empJobsCompleted > 0 ? (empIssueJobs / empJobsCompleted) * 100 : 0,
            };
        });
        
        const maxNetValue = Math.max(1, ...employeeMetrics.map(e => e.netValueAdded));
        const maxEfficiency = Math.max(100, ...employeeMetrics.map(e => e.avgEfficiency));
        
        const employeePerformanceMetrics = employeeMetrics.map(emp => {
            const netValueScore = Math.max(0, (emp.netValueAdded / maxNetValue) * 100);
            const efficiencyScore = Math.max(0, (emp.avgEfficiency / maxEfficiency) * 100);
            const qualityScore = Math.max(0, 100 - emp.reworkRate);
            const ops = (efficiencyScore * 0.4) + (netValueScore * 0.4) + (qualityScore * 0.2);
            return { ...emp, ops };
        });

        return {
            overallKpis: {
                jobsCompleted: validCompletedJobs.length,
                totalWorkHours: (overallTotalWorkMinutes / 60).toFixed(1), // Convert minutes to hours
                avgEfficiency: `${Math.round(overallAvgEfficiency)}%`,
                totalJobValue: `R ${overallTotalJobValue.toFixed(2)}`,
            },
            employeePerformanceMetrics
        };
    }, [jobs, employees, allOverheadExpenses]);

    if (loading) return <p className="text-center text-gray-400">Loading Performance Data...</p>;

    return (
        <div className="space-y-8">
            <h2 className="text-3xl font-bold text-white">Business Performance Dashboard</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <KpiCard icon={<CheckCircle2 size={24} />} title="Jobs Completed" value={performanceData.overallKpis.jobsCompleted} color="bg-green-500/20 text-green-400" />
                <KpiCard icon={<Clock size={24} />} title="Total Work Time" value={`${performanceData.overallKpis.totalWorkHours} hrs`} color="bg-blue-500/20 text-blue-400" />
                <KpiCard icon={<Zap size={24} />} title="Average Efficiency" value={performanceData.overallKpis.avgEfficiency} color="bg-purple-500/20 text-purple-400" />
                <KpiCard icon={<DollarSign size={24} />} title="Total Job Value" value={performanceData.overallKpis.totalJobValue} color="bg-yellow-500/20 text-yellow-400" />
            </div>
            
             <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
                <div className="flex flex-wrap justify-between items-center mb-4 gap-4">
                    <h3 className="text-xl font-bold text-white">
                        Performance Leaderboard
                    </h3>
                    <div className="w-full sm:w-auto">
                        <Dropdown
                            name="departmentFilter"
                            value={leaderboardDepartmentFilter}
                            onChange={(e) => setLeaderboardDepartmentFilter(e.target.value)}
                            options={[{ id: 'all', name: 'Overall Company' }, ...departments]}
                        />
                    </div>
                </div>
                <PerformanceLeaderboard
                    employees={leaderboardDepartmentFilter === 'all' ? performanceData.employeePerformanceMetrics : performanceData.employeePerformanceMetrics.filter(e => e.departmentId === leaderboardDepartmentFilter)}
                    activeSortKey={leaderboardSortKey}
                    setActiveSortKey={setLeaderboardSortKey}
                />
            </div>
        </div>
    );
};

export default PerformancePage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\ProductViabilityPage.jsx
==================================================
import React, { useState, useEffect, useMemo } from 'react';
// MainLayout import removed
import { getProducts, getLinkedRecipesForProduct, getJobStepDetails, getAllInventoryItems, getEmployees, getOverheadCategories, getOverheadExpenses } from '../api/firestore';
import Dropdown from '../components/ui/Dropdown';
import Input from '../components/ui/Input';
import { DollarSign, Percent, Plus } from 'lucide-react';

const ProductViabilityKpiCard = ({ icon, title, value, color }) => (
    <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
        <div className="flex items-start space-x-4">
            <div className={`p-3 rounded-full ${color}`}>
                {icon}
            </div>
            <div>
                <p className="text-gray-400 text-sm">{title}</p>
                <p className="text-3xl font-bold text-white">{value}</p>
            </div>
        </div>
    </div>
);

const ProductViabilityPage = () => {
    const [products, setProducts] = useState([]);
    const [allRecipes, setAllRecipes] = useState([]);
    const [inventoryItems, setInventoryItems] = useState([]);
    const [averageBurdenedRate, setAverageBurdenedRate] = useState(0);
    const [selectedProductId, setSelectedProductId] = useState('');
    const [linkedRecipes, setLinkedRecipes] = useState([]);
    const [sellingPrice, setSellingPrice] = useState('');
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const [prods, recipes, inventory, employees, overheadCats] = await Promise.all([
                    getProducts(),
                    getJobStepDetails(),
                    getAllInventoryItems(),
                    getEmployees(),
                    getOverheadCategories()
                ]);

                setProducts(prods);
                setAllRecipes(recipes);
                setInventoryItems(inventory);

                const expensePromises = overheadCats.map(cat => getOverheadExpenses(cat.id));
                const expenseResults = await Promise.all(expensePromises);
                const totalMonthlyOverheads = expenseResults.flat().reduce((sum, exp) => sum + (exp.amount || 0), 0);
                const totalCompanyProductiveHours = (employees.length || 1) * 45 * 4.33;
                const overheadCostPerHour = totalCompanyProductiveHours > 0 ? totalMonthlyOverheads / totalCompanyProductiveHours : 0;
                const totalHourlyRate = employees.reduce((sum, emp) => sum + (emp.hourlyRate || 0), 0);
                const avgDirectRate = employees.length > 0 ? totalHourlyRate / employees.length : 0;
                setAverageBurdenedRate(avgDirectRate + overheadCostPerHour);
            } catch (error) {
                console.error("Failed to load viability data:", error);
            }
            setLoading(false);
        };
        fetchData();
    }, []);

    useEffect(() => {
        if (selectedProductId) {
            const product = products.find(p => p.id === selectedProductId);
            if (product) {
                setSellingPrice(product.sellingPrice || '');
            }
            const fetchLinks = async () => {
                const links = await getLinkedRecipesForProduct(selectedProductId);
                setLinkedRecipes(links);
            };
            fetchLinks();
        } else {
            setLinkedRecipes([]);
        }
    }, [selectedProductId, products]);

    const analysis = useMemo(() => {
        // ... (memoized logic remains the same)
        const inventoryMap = new Map(inventoryItems.map(item => [item.id, item]));
        let totalMaterialCost = 0;
        let totalLaborCost = 0;
        const detailedCosts = [];

        linkedRecipes.forEach(link => {
            const recipe = allRecipes.find(r => r.productId === link.productId && r.departmentId === link.departmentId);
            if (recipe) {
                const recipeMaterialCost = (recipe.consumables || []).reduce((sum, consumable) => {
                    const inventoryItem = inventoryMap.get(consumable.itemId);
                    const price = inventoryItem?.price || 0;
                    const quantity = consumable.quantity || 0;
                    return sum + (price * quantity);
                }, 0);

                const recipeLaborCost = (recipe.estimatedTime || 0) / 60 * averageBurdenedRate;
                
                totalMaterialCost += recipeMaterialCost;
                totalLaborCost += recipeLaborCost;

                detailedCosts.push({
                    id: link.id,
                    partName: recipe.description || 'Recipe Step', // Use recipe description
                    departmentName: link.departmentName,
                    cost: recipeMaterialCost + recipeLaborCost
                });
            }
        });
        
        const totalCost = totalMaterialCost + totalLaborCost;
        const price = parseFloat(sellingPrice) || 0;
        const profit = price > 0 ? price - totalCost : 0;
        const margin = price > 0 ? (profit / price) * 100 : 0;

        return { totalCost, profit, margin, detailedCosts };
    }, [linkedRecipes, allRecipes, sellingPrice, inventoryItems, averageBurdenedRate]);

    if (loading) return <p className="text-center text-gray-400">Loading Profitability Engine...</p>;

    return (
        <div className="space-y-8">
            <h2 className="text-3xl font-bold text-white">Product Profitability Dashboard</h2>

            <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
                <Dropdown
                    label="Select a Product to Analyze"
                    value={selectedProductId}
                    onChange={(e) => setSelectedProductId(e.target.value)}
                    options={products}
                    placeholder="Choose a product..."
                />
            </div>
            
            {selectedProductId && (
                <div className="space-y-8 animate-fade-in">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                        <ProductViabilityKpiCard icon={<DollarSign size={24}/>} title="True Manufacturing Cost" value={`R ${analysis.totalCost.toFixed(2)}`} color="bg-orange-500/20 text-orange-400" />
                        <div className="md:col-span-1">
                            <Input label="Enter Selling Price" type="number" value={sellingPrice} onChange={e => setSellingPrice(e.target.value)} placeholder="e.g., 50000" />
                        </div>
                        <ProductViabilityKpiCard icon={<Plus size={24}/>} title="Net Profit" value={`R ${analysis.profit.toFixed(2)}`} color={analysis.profit >= 0 ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400"} />
                        <ProductViabilityKpiCard icon={<Percent size={24}/>} title="Profit Margin" value={`${analysis.margin.toFixed(1)}%`} color={analysis.margin >= 0 ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400"} />
                    </div>

                    <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
                         <h3 className="text-xl font-bold text-white mb-4">Cost Breakdown</h3>
                         <div className="space-y-3">
                            {analysis.detailedCosts.length > 0 ? (
                                analysis.detailedCosts.map(item => (
                                    <div key={item.id} className="flex justify-between items-center bg-gray-700/50 p-3 rounded-lg">
                                        <div>
                                            <p className="font-semibold text-gray-200">{item.partName}</p>
                                            <p className="text-xs text-gray-400">{item.departmentName} Department</p>
                                        </div>
                                        <p className="font-mono text-lg text-gray-300">R {item.cost.toFixed(2)}</p>
                                    </div>
                                ))
                            ) : (
                                <p className="text-gray-400 text-center py-4">No linked recipes found for this product. Go to Settings to link recipes.</p>
                            )}
                         </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default ProductViabilityPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\PurchasingPage.jsx
==================================================
// src/pages/PurchasingPage.jsx (REFACTORED & COMPLETED)

import React, { useState, useEffect, useMemo } from 'react';
import { 
    listenToOneOffPurchases, 
    markOneOffItemsAsOrdered, 
    getPurchaseQueue, 
    getSuppliers, 
    markItemsAsOrdered 
} from '../api/firestore';
import Button from '../components/ui/Button';
import Input from '../components/ui/Input';
import { Mail, ThumbsUp, Truck } from 'lucide-react';
import InTransitOrders from '../components/features/stock/InTransitOrders'; // IMPORT InTransitOrders

// --- Component for Job-Specific, One-Off Purchases ---
const JobSpecificPurchases = ({ onAction }) => {
    const [purchaseItems, setPurchaseItems] = useState([]);
    const [loading, setLoading] = useState(true);
    const [adminEmail, setAdminEmail] = useState('admin@tojem.co.za'); // Configurable email

    useEffect(() => {
        setLoading(true);
        const unsubscribe = listenToOneOffPurchases((items) => {
            setPurchaseItems(items.filter(item => item.status === 'Pending Purchase'));
            setLoading(false);
        });
        return () => unsubscribe();
    }, []);
    
    const ordersToPurchaseFor = useMemo(() => {
        return purchaseItems.reduce((acc, item) => {
            const orderId = item.salesOrderId || 'Miscellaneous';
            if (!acc[orderId]) {
                acc[orderId] = {
                    customerName: item.customerName,
                    salesOrderId: item.salesOrderId,
                    items: []
                };
            }
            acc[orderId].items.push(item);
            return acc;
        }, {});
    }, [purchaseItems]);

    const handleGenerateEmail = (orderId) => {
        const orderData = ordersToPurchaseFor[orderId];
        if (!orderData) return;

        const subject = `Purchase Request for Sales Order: ${orderData.salesOrderId}`;
        let body = `Hi Admin,\n\nPlease order the following parts required for job SO: ${orderData.salesOrderId} for customer: ${orderData.customerName}.\n\n`;
        
        orderData.items.forEach(item => {
            body += `- ${item.itemName} (Qty: ${item.quantity})\n`;
        });

        body += `\nThank you,\nTOJEM OS`;
        window.location.href = `mailto:${adminEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;

        const itemIdsToUpdate = orderData.items.map(item => item.id);
        markOneOffItemsAsOrdered(itemIdsToUpdate).then(() => {
            if(onAction) onAction();
        });
    };

    if (loading) return <div className="text-center text-gray-400 p-8">Loading job-specific purchase requests...</div>;

    return (
        <div className="space-y-6">
            {Object.keys(ordersToPurchaseFor).length === 0 && (
                <p className="text-center text-gray-500 p-8">No job-specific items are currently awaiting purchase.</p>
            )}
            {Object.entries(ordersToPurchaseFor).map(([orderId, orderData]) => (
                <div key={orderId} className="bg-gray-800 rounded-lg border border-gray-700 p-4">
                    <div className="flex justify-between items-center mb-3">
                        <div>
                            <h4 className="font-bold text-white">Sales Order: {orderData.salesOrderId}</h4>
                            <p className="text-sm text-gray-400">Customer: {orderData.customerName}</p>
                        </div>
                        <Button onClick={() => handleGenerateEmail(orderId)} variant="primary">
                            <Mail size={16} className="mr-2"/>
                            Generate Purchase Request Email
                        </Button>
                    </div>
                    <ul className="space-y-2">
                        {orderData.items.map(item => (
                            <li key={item.id} className="flex justify-between items-center bg-gray-900/50 p-2 rounded-md text-sm">
                                <span className="text-gray-200">{item.itemName}</span>
                                <span className="font-mono text-white">Qty: {item.quantity}</span>
                            </li>
                        ))}
                    </ul>
                </div>
            ))}
        </div>
    );
};

// --- Component for Standard Stock Re-ordering ---
const StockReorderQueue = ({ items, suppliers, onAction }) => {
    const [orderQuantities, setOrderQuantities] = useState({});

    const handleQuantityChange = (itemId, qty) => {
        setOrderQuantities(prev => ({ ...prev, [itemId]: qty }));
    };

    const groupedBySupplier = useMemo(() => {
        return items.reduce((acc, item) => {
            const supplierId = item.supplierId || 'unknown';
            if (!acc[supplierId]) {
                const supplierDetails = suppliers.find(s => s.id === supplierId);
                acc[supplierId] = { supplierDetails: supplierDetails || { name: 'Unknown Supplier', email: '' }, items: [] };
            }
            acc[supplierId].items.push(item);
            return acc;
        }, {});
    }, [items, suppliers]);

    const handleGenerateEmail = (supplierDetails, items) => {
        const supplierEmail = supplierDetails.email || '';
        const subject = `Purchase Order - TOJEM`;
        let body = `Hi ${supplierDetails.contactPerson || supplierDetails.name},\n\nPlease supply the following items:\n\n`;
        
        items.forEach(item => {
            const recommendedQty = Math.max(0, (item.standardStockLevel || 0) - (item.currentStock || 0));
            const orderQty = orderQuantities[item.id] || recommendedQty;
            if (orderQty > 0) {
                body += `- ${item.itemName} (Code: ${item.itemCode || 'N/A'}) --- Qty: ${orderQty}\n`;
            }
        });
        
        body += `\nThank you,\nTojem`;
        window.location.href = `mailto:${supplierEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;

        markItemsAsOrdered(supplierDetails, items, orderQuantities).then(() => {
            alert("Items have been marked as ordered and will now appear in the 'In-Transit' list.");
            if (onAction) onAction();
        });
    };

    if (Object.keys(groupedBySupplier).length === 0) {
        return <p className="text-center text-gray-500 p-8">The stock re-order queue is empty.</p>;
    }

    return (
        <div className="space-y-6">
            {Object.entries(groupedBySupplier).map(([supplierId, group]) => (
                <div key={supplierId} className="bg-blue-900/20 p-6 rounded-xl border border-blue-500/50">
                    <div className="flex justify-between items-center mb-4">
                        <div>
                            <h3 className="text-xl font-bold text-white flex items-center gap-2"><ThumbsUp/> Order for: {group.supplierDetails.name}</h3>
                            <p className="text-sm text-gray-400">{group.supplierDetails.email}</p>
                        </div>
                        <Button onClick={() => handleGenerateEmail(group.supplierDetails, group.items)}>Generate Email & Mark as Ordered</Button>
                    </div>
                    <div className="overflow-x-auto">
                        <table className="w-full text-left text-sm">
                            <thead className="border-b border-blue-400/30">
                                <tr>
                                    <th className="p-2 font-semibold text-gray-300">Item</th>
                                    <th className="p-2 font-semibold text-gray-300 text-center">Current Stock</th>
                                    <th className="p-2 font-semibold text-gray-300 text-center">Re-order At</th>
                                    <th className="p-2 font-semibold text-gray-300 text-center" style={{width: '150px'}}>Order Qty</th>
                                </tr>
                            </thead>
                            <tbody>
                                {group.items.map(item => {
                                    const recommendedQty = Math.max(0, (item.standardStockLevel || 0) - (item.currentStock || 0));
                                    return (
                                        <tr key={item.id} className="border-b border-blue-400/20">
                                            <td className="p-2 text-gray-200">{item.itemName}</td>
                                            <td className="p-2 text-white font-bold text-center">{item.currentStock}</td>
                                            <td className="p-2 text-red-400 font-bold text-center">{item.reorderLevel}</td>
                                            <td className="p-2">
                                                <Input 
                                                    type="number"
                                                    value={orderQuantities[item.id] || recommendedQty}
                                                    onChange={(e) => handleQuantityChange(item.id, e.target.value)}
                                                />
                                            </td>
                                        </tr>
                                    )
                                })}
                            </tbody>
                        </table>
                    </div>
                </div>
            ))}
        </div>
    );
};


// Main page component that holds the tabs and fetches all data
const PurchasingPage = () => {
    const [activeTab, setActiveTab] = useState('job-specific');
    const [purchaseQueueItems, setPurchaseQueueItems] = useState([]);
    const [suppliers, setSuppliers] = useState([]);
    const [loading, setLoading] = useState(true);

    const fetchData = async () => {
        setLoading(true);
        try {
            const [queue, supplierList] = await Promise.all([getPurchaseQueue(), getSuppliers()]);
            setPurchaseQueueItems(queue);
            setSuppliers(supplierList);
        } catch (error) {
            console.error("Error fetching purchasing data:", error);
            alert("Could not load purchasing data.");
        }
        setLoading(false);
    };

    useEffect(() => {
        fetchData();
    }, []);

    const { pendingItems, orderedItems } = useMemo(() => ({
        pendingItems: purchaseQueueItems.filter(i => i.status === 'pending'),
        orderedItems: purchaseQueueItems.filter(i => i.status === 'ordered')
    }), [purchaseQueueItems]);

    return (
        <div className="space-y-6">
            <h2 className="text-3xl font-bold text-white">Purchasing Hub</h2>
            <div className="border-b border-gray-700">
                <nav className="-mb-px flex space-x-6">
                    <button
                        onClick={() => setActiveTab('job-specific')}
                        className={`px-5 py-2 text-sm font-semibold rounded-t-lg border-b-2 transition-colors ${
                            activeTab === 'job-specific' ? 'border-blue-500 text-white' : 'border-transparent text-gray-400 hover:text-gray-200'
                        }`}
                    >
                        Job-Specific Purchases
                    </button>
                    <button
                        onClick={() => setActiveTab('stock-reorder')}
                        className={`px-5 py-2 text-sm font-semibold rounded-t-lg border-b-2 transition-colors ${
                            activeTab === 'stock-reorder' ? 'border-blue-500 text-white' : 'border-transparent text-gray-400 hover:text-gray-200'
                        }`}
                    >
                        Stock Re-order Queue
                        {pendingItems.length > 0 && <span className="ml-2 bg-blue-500 text-white text-xs font-bold rounded-full px-2 py-0.5">{pendingItems.length}</span>}
                    </button>
                    <button
                        onClick={() => setActiveTab('in-transit')}
                        className={`px-5 py-2 text-sm font-semibold rounded-t-lg border-b-2 transition-colors ${
                            activeTab === 'in-transit' ? 'border-blue-500 text-white' : 'border-transparent text-gray-400 hover:text-gray-200'
                        }`}
                    >
                        In-Transit Orders
                        {orderedItems.length > 0 && <span className="ml-2 bg-blue-500 text-white text-xs font-bold rounded-full px-2 py-0.5">{orderedItems.length}</span>}
                    </button>
                </nav>
            </div>

            <div className="mt-4">
                {loading ? <p className="text-center text-gray-400 p-8">Loading...</p> : (
                    <>
                        {activeTab === 'job-specific' && <JobSpecificPurchases onAction={fetchData} />}
                        {activeTab === 'stock-reorder' && <StockReorderQueue items={pendingItems} suppliers={suppliers} onAction={fetchData} />}
                        {activeTab === 'in-transit' && <InTransitOrders items={orderedItems} suppliers={suppliers} onStockReceived={fetchData} />}
                    </>
                )}
            </div>
        </div>
    );
};

export default PurchasingPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\QcPage.jsx
==================================================
// src/pages/QcPage.jsx (Corrected)

import React, { useState, useEffect, useMemo } from 'react';
// --- CORRECTED IMPORTS ---
import { listenToJobCards, processQcDecision, getReworkReasons } from '../api/firestore';
import Button from '../components/ui/Button';
import Dropdown from '../components/ui/Dropdown';
import { X } from 'lucide-react';

// A new sub-component for handling the rejection logic in a modal
const RejectionModal = ({ job, reasons, onReject, onClose }) => {
    const [rejectionReasonId, setRejectionReasonId] = useState('');
    const [notes, setNotes] = useState('');

    const handleSubmit = () => {
        if (!rejectionReasonId) {
            return alert("Please select a reason for rejection.");
        }
        // Find the text of the selected reason
        const reasonText = reasons.find(r => r.id === rejectionReasonId)?.name || 'Other';
        // Combine the standard reason with any specific notes
        const fullReason = notes ? `${reasonText}: ${notes}` : reasonText;
        onReject(job, fullReason);
    };

    return (
        <div onClick={onClose} className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4 animate-fade-in">
            <div onClick={(e) => e.stopPropagation()} className="bg-gray-800 rounded-xl border border-gray-700 w-full max-w-lg">
                <div className="flex justify-between items-center p-4 border-b border-gray-700">
                    <h3 className="text-xl font-bold text-white">Reject Job: {job.partName}</h3>
                    <Button onClick={onClose} variant="secondary" className="p-2"><X size={20}/></Button>
                </div>
                <div className="p-6 space-y-4">
                    <Dropdown 
                        label="Reason for Rejection" 
                        options={reasons} 
                        value={rejectionReasonId} 
                        onChange={(e) => setRejectionReasonId(e.target.value)} 
                        placeholder="Select a failure mode..." 
                    />
                    <textarea 
                        value={notes} 
                        onChange={(e) => setNotes(e.target.value)} 
                        placeholder="Add optional specific notes here..." 
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500" 
                        rows="3"
                    ></textarea>
                </div>
                <div className="p-4 flex justify-end gap-2 bg-gray-900/50 rounded-b-xl">
                    <Button onClick={onClose} variant="secondary">Cancel</Button>
                    <Button onClick={handleSubmit} variant="danger">Confirm Rejection</Button>
                </div>
            </div>
        </div>
    );
};


const QcPage = () => {
  const [allJobs, setAllJobs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [rejectionReasons, setRejectionReasons] = useState([]);
  const [jobToReject, setJobToReject] = useState(null);

  useEffect(() => {
    // This now uses our new, clean API function
    const fetchReasons = async () => {
        const reasons = await getReworkReasons();
        setRejectionReasons(reasons);
    };
    fetchReasons();

    const unsubscribe = listenToJobCards((fetchedJobs) => {
      setAllJobs(fetchedJobs);
      setLoading(false);
    });
    return () => unsubscribe();
  }, []);

  const qcJobs = useMemo(() => {
    return allJobs.filter(job => job.status === 'Awaiting QC');
  }, [allJobs]);

  const handleApprove = async (job) => {
    if (window.confirm(`Are you sure you want to approve this job? This will deduct used items from stock.`)) {
      try {
        await processQcDecision(job, true);
        alert('Job approved and stock updated!');
      } catch (err) {
        alert('Failed to process approval.');
        console.error(err);
      }
    }
  };

  const handleReject = async (job, reason) => {
    try {
      await processQcDecision(job, false, reason);
      alert('Job marked with an issue.');
      setJobToReject(null);
    } catch (err) {
      alert('Failed to process rejection.');
      console.error(err);
    }
  };

  if (loading) return <p className="text-center text-gray-400">Loading QC queue...</p>;
  
  return (
    <>
        <div className="space-y-8">
            <h2 className="text-3xl font-bold text-white">Quality Control Queue</h2>
            <div className="bg-gray-800 p-2 sm:p-6 rounded-xl border border-gray-700 shadow-lg">
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                       <thead>
                            <tr className="border-b border-gray-600">
                                <th className="p-3 text-sm font-semibold text-gray-400">Job ID</th>
                                <th className="p-3 text-sm font-semibold text-gray-400">Part</th>
                                <th className="p-3 text-sm font-semibold text-gray-400">Employee</th>
                                <th className="p-3 text-sm font-semibold text-gray-400">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {(qcJobs || []).map(job => (
                                <tr key={job.id} className="border-b border-gray-700 hover:bg-gray-700/50">
                                    <td className="p-3 text-gray-400 text-xs font-mono">{job.jobId}</td>
                                    <td className="p-3 text-gray-300">{job.partName}</td>
                                    <td className="p-3 text-gray-300">{job.employeeName}</td>
                                    <td className="p-3 flex space-x-2">
                                        <Button onClick={() => handleApprove(job)} variant="primary" className="bg-green-600 hover:bg-green-700 py-1 px-3 text-sm">Approve</Button>
                                        <Button onClick={() => setJobToReject(job)} variant="danger" className="py-1 px-3 text-sm">Reject</Button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                    {qcJobs.length === 0 && !loading && <p className="text-center p-8 text-gray-400">The QC queue is empty.</p>}
                </div>
            </div>
        </div>
        
        {jobToReject && (
            <RejectionModal 
                job={jobToReject}
                reasons={rejectionReasons}
                onClose={() => setJobToReject(null)}
                onReject={handleReject}
            />
        )}
    </>
  );
};

export default QcPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\QuotingPage.jsx
==================================================
// src/pages/QuotingPage.jsx (UPGRADED)

import React, { useState, useEffect, useMemo } from 'react';
import Button from '../components/ui/Button';
import { PlusCircle } from 'lucide-react';
import { collection, onSnapshot, query, orderBy } from 'firebase/firestore';
import { db } from '../api/firebase';
import { getProducts, getJobStepDetails, getAllInventoryItems, getEmployees, getOverheadCategories, getOverheadExpenses } from '../api/firestore';
import QuoteCreator from '../components/features/quotes/QuoteCreator';

const QuotingPage = () => {
    const [quotes, setQuotes] = useState([]);
    const [isCreatorOpen, setIsCreatorOpen] = useState(false);
    const [loading, setLoading] = useState(true);

    // State to hold all the data needed for cost calculation
    const [calculationData, setCalculationData] = useState({
        products: [],
        allRecipes: [],
        inventoryItems: [],
        averageBurdenedRate: 0,
    });

    useEffect(() => {
        // This listener will keep the quotes list up to date
        const q = query(collection(db, 'quotes'), orderBy('createdAt', 'desc'));
        const unsubscribeQuotes = onSnapshot(q, (snapshot) => {
            setQuotes(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
        });

        // This fetches all the data needed for our calculations one time
        const fetchCalculationData = async () => {
            setLoading(true);
            try {
                const [prods, recipes, inventory, employees, overheadCats] = await Promise.all([
                    getProducts(),
                    getJobStepDetails(),
                    getAllInventoryItems(),
                    getEmployees(),
                    getOverheadCategories()
                ]);

                const expensePromises = overheadCats.map(cat => getOverheadExpenses(cat.id));
                const expenseResults = await Promise.all(expensePromises);
                const totalMonthlyOverheads = expenseResults.flat().reduce((sum, exp) => sum + (exp.amount || 0), 0);
                const totalCompanyProductiveHours = (employees.length || 1) * 173.2; // Monthly productive hours
                const overheadCostPerHour = totalCompanyProductiveHours > 0 ? totalMonthlyOverheads / totalCompanyProductiveHours : 0;
                const totalHourlyRate = employees.reduce((sum, emp) => sum + (emp.hourlyRate || 0), 0);
                const avgDirectRate = employees.length > 0 ? totalHourlyRate / employees.length : 0;
                
                setCalculationData({
                    products: prods,
                    allRecipes: recipes,
                    inventoryItems: inventory,
                    averageBurdenedRate: avgDirectRate + overheadCostPerHour,
                });

            } catch (err) {
                console.error("Failed to load data for quoting engine:", err);
            } finally {
                setLoading(false);
            }
        };

        fetchCalculationData();

        return () => unsubscribeQuotes();
    }, []);

    return (
        <>
            <div className="space-y-8">
                <div className="flex justify-between items-center">
                    <h2 className="text-3xl font-bold text-white">Sales Quotes</h2>
                    <Button onClick={() => setIsCreatorOpen(true)} variant="primary" disabled={loading}>
                        {loading ? 'Loading Data...' : <><PlusCircle size={18} className="mr-2" />Create New Quote</>}
                    </Button>
                </div>

                <div className="bg-gray-800 rounded-lg border border-gray-700 overflow-hidden">
                    <table className="w-full text-left">
                        <thead className="bg-gray-900/50">
                            <tr>
                                <th className="p-3 text-sm font-semibold text-gray-400">Date</th>
                                <th className="p-3 text-sm font-semibold text-gray-400">Quote ID</th>
                                <th className="p-3 text-sm font-semibold text-gray-400">Customer</th>
                                <th className="p-3 text-sm font-semibold text-gray-400 text-right">Total</th>
                                <th className="p-3 text-sm font-semibold text-gray-400">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            {loading && <tr><td colSpan="5" className="text-center p-8 text-gray-400">Loading quotes...</td></tr>}
                            {!loading && quotes.length === 0 && <tr><td colSpan="5" className="text-center p-8 text-gray-400">No quotes found. Click 'Create New Quote' to start.</td></tr>}
                            {!loading && quotes.map(quote => (
                                <tr key={quote.id} className="border-t border-gray-700 hover:bg-gray-700/50">
                                    <td className="p-3 text-sm text-gray-400">{quote.createdAt?.toDate().toLocaleDateString()}</td>
                                    <td className="p-3 text-sm font-mono text-gray-300">{quote.quoteId}</td>
                                    <td className="p-3 text-sm text-white font-medium">{quote.customerName}</td>
                                    <td className="p-3 text-sm font-mono text-right font-semibold text-green-400">R {quote.total.toFixed(2)}</td>
                                    <td className="p-3 text-sm capitalize">
                                        <span className={`px-2 py-1 text-xs rounded-full ${
                                            quote.status === 'draft' ? 'bg-yellow-500/20 text-yellow-300' :
                                            quote.status === 'sent' ? 'bg-blue-500/20 text-blue-300' :
                                            'bg-gray-500/20 text-gray-300'
                                        }`}>{quote.status}</span>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>

            {isCreatorOpen && (
                <QuoteCreator 
                    onClose={() => setIsCreatorOpen(false)} 
                    calculationData={calculationData}
                />
            )}
        </>
    );
};

export default QuotingPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\SalesOrderPage.jsx
==================================================
// src/pages/SalesOrderPage.jsx (REFACTORED)

import React, { useState, useEffect } from 'react';
import { listenToSalesOrders, addPurchasedItemToQueue, updateSalesOrderLineItemStatus } from '../api/firestore';
import Button from '../components/ui/Button';
import { ChevronDown, ChevronRight, Package, Wrench, ShoppingBag, X, CheckCircle } from 'lucide-react';
import CustomJobCreator from '../components/features/job_cards/CustomJobCreator';
import StandardJobCreatorModal from '../components/features/job_cards/StandardJobCreatorModal';

// A single line item within an order
const OrderLineItem = ({ item, order, onAction }) => {
    const [isCustomModalOpen, setCustomModalOpen] = useState(false);
    const [isStandardModalOpen, setStandardModalOpen] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleSendToPurchasing = async () => {
        if (!window.confirm(`Are you sure you want to send "${item.description}" to the purchasing queue?`)) return;
        setIsSubmitting(true);
        try {
            await addPurchasedItemToQueue(item, order);
            // CORRECTED: Uses the line item's unique 'id' field for robust status updates
            await updateSalesOrderLineItemStatus(order.id, item.id, 'In Purchasing');
            onAction(); // This will trigger a re-render of the parent component
        } catch (error) {
            console.error("Error sending item to purchasing:", error);
            alert("Failed to send item to purchasing.");
        }
        setIsSubmitting(false);
    };

    let icon, actionButton;

    // Logic to determine which button or status to show
    if (item.status === 'In Purchasing') {
        icon = <ShoppingBag size={20} className="text-gray-500" />;
        actionButton = <span className="flex items-center gap-1 text-xs text-green-400 font-semibold"><CheckCircle size={14} /> Queued for Purchase</span>;
    } else if (item.isCatalogItem) {
        icon = <Package size={20} className="text-blue-400" />;
        actionButton = <Button variant="primary" className="text-xs py-1 px-2" onClick={() => setStandardModalOpen(true)}>Create Standard Job</Button>;
    } else if (item.isPurchasedItem) {
        icon = <ShoppingBag size={20} className="text-green-400" />;
        actionButton = <Button variant="secondary" className="text-xs py-1 px-2" onClick={handleSendToPurchasing} disabled={isSubmitting}>{isSubmitting ? 'Sending...' : 'Send to Purchasing'}</Button>;
    } else if (item.isCustomWork) {
        icon = <Wrench size={20} className="text-purple-400" />;
        actionButton = <Button variant="primary" className="text-xs py-1 px-2" onClick={() => setCustomModalOpen(true)}>Create Custom Job</Button>;
    }

    return (
        <>
            <div className="flex justify-between items-center p-3 bg-gray-900/50 rounded-md">
                <div className="flex items-center gap-3">
                    {icon}
                    <p className="text-white">{item.description}</p>
                </div>
                <div className="flex items-center gap-4">
                    <p className="text-sm font-mono text-gray-400">Cost: R{item.cost.toFixed(2)}</p>
                    {actionButton}
                </div>
            </div>

            {isCustomModalOpen && (
                <div className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4">
                    <div className="relative bg-gray-800 p-2 rounded-xl border border-gray-700 w-full max-w-4xl">
                         <Button onClick={() => setCustomModalOpen(false)} variant="danger" className="absolute -top-3 -right-3 z-10 rounded-full h-8 w-8 p-1">
                            <X size={16}/>
                        </Button>
                        <CustomJobCreator salesOrder={order} customLineItem={item} />
                    </div>
                </div>
            )}

            {isStandardModalOpen && (
                <StandardJobCreatorModal 
                    salesOrder={order}
                    lineItem={item}
                    onClose={() => setStandardModalOpen(false)}
                />
            )}
        </>
    );
};

// A single expandable Sales Order card
const SalesOrderCard = ({ order, onAction }) => {
    const [isExpanded, setIsExpanded] = useState(false);

    const getStatusColor = (status) => {
        switch (status) {
            case 'Pending Production': return 'bg-yellow-500/20 text-yellow-300';
            case 'In Production': return 'bg-blue-500/20 text-blue-300';
            case 'Fulfilled': return 'bg-green-500/20 text-green-300';
            default: return 'bg-gray-500/20 text-gray-300';
        }
    };

    return (
        <div className="bg-gray-800 rounded-lg border border-gray-700">
            <div className="flex items-center justify-between p-4 cursor-pointer hover:bg-gray-700/50" onClick={() => setIsExpanded(!isExpanded)}>
                <div className="flex items-center gap-4">
                    {isExpanded ? <ChevronDown /> : <ChevronRight />}
                    <div>
                        <p className="font-bold text-white text-lg">{order.salesOrderId}</p>
                        <p className="text-sm text-gray-400">{order.customerName}</p>
                    </div>
                </div>
                <div className="flex items-center gap-6">
                     <p className="font-mono text-xl text-green-400">R {order.total.toFixed(2)}</p>
                     <span className={`px-3 py-1 text-sm rounded-full font-semibold ${getStatusColor(order.status)}`}>
                        {order.status}
                    </span>
                </div>
            </div>

            {isExpanded && (
                <div className="p-4 border-t border-gray-700 space-y-3">
                    <h4 className="font-semibold text-gray-200">Order Line Items:</h4>
                    {order.lineItems.map((item, index) => (
                        <OrderLineItem 
                            key={item.id || index}
                            item={item} 
                            order={order} 
                            onAction={onAction}
                        />
                    ))}
                </div>
            )}
        </div>
    );
};


const SalesOrderPage = () => {
    const [salesOrders, setSalesOrders] = useState([]);
    const [loading, setLoading] = useState(true);

    const fetchData = () => {
        const unsubscribe = listenToSalesOrders((orders) => {
            setSalesOrders(orders);
            if(loading) setLoading(false);
        });
        return unsubscribe;
    };

    useEffect(() => {
        const unsubscribe = fetchData();
        return () => unsubscribe();
    }, []);

    return (
        <div className="space-y-8">
            <h2 className="text-3xl font-bold text-white">Sales Order Dispatch</h2>
            <p className="text-gray-400 -mt-6">This is your hub for converting approved customer orders into actionable tasks for your team.</p>
            
            <div className="space-y-4">
                {loading && <p className="text-center p-8 text-gray-400">Loading sales orders...</p>}
                {!loading && salesOrders.length === 0 && <p className="text-center p-8 text-gray-400">No sales orders found. Accept a quote to create one.</p>}
                {!loading && salesOrders.map(order => (
                    <SalesOrderCard 
                        key={order.id} 
                        order={order}
                        onAction={fetchData}
                    />
                ))}
            </div>
        </div>
    );
};

export default SalesOrderPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\ScannerPage.jsx
==================================================
import React from 'react';
// MainLayout import removed
import Scanner from '../components/features/scanner/Scanner';

const ScannerPage = () => {
  return (
     <div className="space-y-8">
      <h2 className="text-3xl font-bold text-white">Workshop Scanner</h2>
      <Scanner />
    </div>
  );
};

export default ScannerPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\SettingsPage.jsx
==================================================
// src/pages/SettingsPage.jsx (UPDATED)

import React, { useState, useMemo } from 'react';
import DepartmentsManager from '../components/features/settings/DepartmentsManager';
import ToolsManager from '../components/features/settings/ToolsManager';
import EmployeesManager from '../components/features/settings/EmployeesManager';
import SuppliersManager from '../components/features/settings/SuppliersManager';
import InventoryManager from '../components/features/settings/InventoryManager';
import ToolAccessoriesManager from '../components/features/settings/ToolAccessoriesManager';
import OverheadsManager from '../components/features/settings/OverheadsManager'; 
import SkillsManager from '../components/features/settings/SkillsManager';
import UnifiedProductManager from '../components/features/settings/UnifiedProductManager';
import UserManagementPage from './UserManagementPage';
import CampaignManager from '../components/features/settings/CampaignManager';
import FinancialSettings from '../components/features/settings/FinancialSettings'; 
import TrainingManager from '../components/features/settings/TrainingManager';
import ReworkReasonsManager from '../components/features/settings/ReworkReasonsManager'; // <-- 1. IMPORT NEW COMPONENT

const TabButton = ({ label, isActive, onClick }) => {
  const baseClasses = "px-4 py-2 text-sm font-medium rounded-md focus:outline-none transition-colors";
  const activeClasses = "bg-blue-600 text-white";
  const inactiveClasses = "bg-gray-800 text-gray-300 hover:bg-gray-700";
  return (
    <button onClick={onClick} className={`${baseClasses} ${isActive ? activeClasses : inactiveClasses}`}>
      {label}
    </button>
  );
};

const SettingsPage = () => {
  const [activeTab, setActiveTab] = useState('products');

  const tabs = useMemo(() => ({
    products: {
      label: 'Products & Recipes',
      components: [<UnifiedProductManager key="unified-product-manager" />]
    },
    inventory: {
      label: 'Inventory & Suppliers',
      components: [<InventoryManager key="inventory" />, <SuppliersManager key="suppliers" />]
    },
    assets: {
      label: 'Tools & Assets',
      components: [<ToolsManager key="tools" />, <ToolAccessoriesManager key="tool-accessories" />]
    },
    company: {
       label: 'Company & Staff',
       // --- 2. ADD NEW MANAGER TO THIS TAB ---
      components: [<DepartmentsManager key="departments" />, <EmployeesManager key="employees" />, <SkillsManager key="skills" />, <ReworkReasonsManager key="rework-reasons" />]
    },
    training: {
        label: 'Training',
        components: [<TrainingManager key="training" />]
    },
    financials: {
      label: 'Financials',
      components: [<OverheadsManager key="overheads" />, <FinancialSettings key="financial-settings" />]
    },
    marketing: {
      label: 'Marketing',
      components: [<CampaignManager key="campaigns" />]
    },
    users: {
       label: 'User Management',
      components: [<UserManagementPage key="user-management" />]
    }
  }), []);

  return (
    <div className="space-y-8">
      <h2 className="text-3xl font-bold text-white">Settings & Data Management</h2>

      <div className="flex flex-wrap items-center gap-2 p-2 bg-gray-900/50 rounded-lg">
        {Object.entries(tabs).map(([tabKey, tabData]) => (
          <TabButton
            key={tabKey}
            label={tabData.label}
            isActive={activeTab === tabKey}
            onClick={() => setActiveTab(tabKey)}
          />
        ))}
      </div>

      <div className="space-y-8">
        {tabs[activeTab].components}
      </div>
    </div>
  );
};

export default SettingsPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\StockControlPage.jsx
==================================================
// src/pages/StockControlPage.jsx (UPDATED)

import React, { useState, useEffect, useMemo } from 'react';
import StockControlDashboard from '../components/features/stock/StockControlDashboard';
import PurchaseQueue from '../components/features/stock/PurchaseQueue';
import InTransitOrders from '../components/features/stock/InTransitOrders';
import { getPurchaseQueue, getSuppliers } from '../api/firestore';
import Button from '../components/ui/Button'; // <-- Import Button
import FutureDemandAnalyzer from '../components/features/stock/FutureDemandAnalyzer'; // <-- Import the new component
import { BrainCircuit } from 'lucide-react'; // <-- Import an icon

const StockControlPage = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [purchaseQueueItems, setPurchaseQueueItems] = useState([]);
  const [suppliers, setSuppliers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isAnalyzerOpen, setAnalyzerOpen] = useState(false); // <-- State to control the modal

  const fetchData = () => {
    setLoading(true);
    Promise.all([getPurchaseQueue(), getSuppliers()]).then(([queue, supplierList]) => {
      setPurchaseQueueItems(queue);
      setSuppliers(supplierList);
      setLoading(false);
    });
  };

  useEffect(() => {
    fetchData();
  }, []);

  const TabButton = ({ id, label, count }) => {
    const isActive = activeTab === id;
    return (
      <button
        onClick={() => setActiveTab(id)}
        className={`px-5 py-2 text-sm font-semibold rounded-t-lg border-b-2 flex items-center gap-2 transition-colors ${
          isActive ? 'border-blue-500 text-white' : 'border-transparent text-gray-400 hover:border-gray-500 hover:text-gray-200'
        }`}
      >
        {label}
        {count > 0 && <span className={`text-xs rounded-full px-2 py-0.5 ${isActive ? 'bg-white text-blue-600' : 'bg-gray-600 text-gray-200'}`}>{count}</span>}
      </button>
    );
  };

  const { pendingItems, orderedItems } = useMemo(() => {
    return {
        pendingItems: (purchaseQueueItems || []).filter(i => i.status === 'pending'),
        orderedItems: (purchaseQueueItems || []).filter(i => i.status === 'ordered')
    }
  }, [purchaseQueueItems]);

  return (
    <>
      <div className="space-y-4">
        <div className="flex justify-between items-center">
            <h2 className="text-3xl font-bold text-white">Stock Control & Purchasing</h2>
            {/* --- NEW BUTTON TO OPEN THE ANALYZER --- */}
            <Button onClick={() => setAnalyzerOpen(true)} variant="primary">
                <BrainCircuit size={18} className="mr-2"/>
                Predictive Analyzer
            </Button>
        </div>

        <div className="border-b border-gray-700">
            <nav className="-mb-px flex space-x-6">
                <TabButton id="dashboard" label="Stock Overview" />
                <TabButton id="queue" label="Purchase Queue" count={pendingItems.length} />
                <TabButton id="transit" label="In-Transit Orders" count={orderedItems.length} />
            </nav>
        </div>
        <div className="mt-6">
            {loading ? <p className="text-center text-gray-400">Loading...</p> : (
                <>
                    {activeTab === 'dashboard' && <StockControlDashboard />}
                    {activeTab === 'queue' && <PurchaseQueue onOrderPlaced={fetchData} />}
                    {activeTab === 'transit' && <InTransitOrders items={orderedItems} suppliers={suppliers} onStockReceived={fetchData} />}
                </>
            )}
        </div>
      </div>

      {/* --- RENDER THE MODAL WHEN isAnalyzerOpen is true --- */}
      {isAnalyzerOpen && <FutureDemandAnalyzer onClose={() => setAnalyzerOpen(false)} />}
    </>
  );
};

export default StockControlPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\StockTakePage.jsx
==================================================
// src/pages/StockTakePage.jsx (Refactored with your app's logic)

import React, { useState } from 'react';
import { reconcileStockLevels } from '../api/firestore';
import Button from '../components/ui/Button';
import Input from '../components/ui/Input';
import { ClipboardList, Save, Search } from 'lucide-react';
import { useStockTakeData } from '../hooks/useStockTakeData';
// UPDATED: Corrected the import path to match your file structure
import { Summary, StockCountList } from '../components/features/stock/StockTakeComponents';

const StockTakePage = () => {
    const {
        loading,
        error,
        filteredItems,
        summary,
        filter,
        setFilter,
        searchTerm,
        setSearchTerm,
        handleCountChange,
        getItemsToReconcile,
        fetchData,
        resetCounts,
    } = useStockTakeData();

    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleReconcile = async () => {
        const itemsToUpdate = getItemsToReconcile();
        if (itemsToUpdate.length === 0) {
            return alert("You haven't counted any items yet.");
        }

        const varianceCount = itemsToUpdate.filter(item => item.newCount - item.systemCount !== 0).length;
        if (!window.confirm(`You are about to finalize the stock-take. This will update your inventory levels for ${itemsToUpdate.length} counted items, ${varianceCount} of which have discrepancies. This action cannot be undone. Proceed?`)) {
            return;
        }

        setIsSubmitting(true);
        try {
            await reconcileStockLevels(itemsToUpdate);
            alert("Stock levels reconciled successfully!");
            resetCounts();
            fetchData();
        } catch (error) {
            console.error("Error reconciling stock levels:", error);
            alert("Failed to reconcile stock levels. Please check the console.");
        }
        setIsSubmitting(false);
    };

    if (error) {
        return <p className="text-center text-red-500 p-8">{error}</p>;
    }

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h2 className="text-3xl font-bold text-white flex items-center gap-2"><ClipboardList/> Stock-Take</h2>
                <Button onClick={handleReconcile} disabled={isSubmitting || loading} variant="primary">
                    <Save size={16} className="mr-2" />
                    {isSubmitting ? 'Finalizing...' : 'Finalize and Reconcile Stock'}
                </Button>
            </div>

            <Summary data={summary} />

            <div className="bg-gray-800 p-4 rounded-lg border border-gray-700 flex justify-between items-center">
                <div className="flex items-center gap-2">
                    <span className="text-sm font-medium text-gray-300">Filter:</span>
                    <Button size="sm" variant={filter === 'all' ? 'secondary' : 'primary'} onClick={() => setFilter('all')}>All</Button>
                    <Button size="sm" variant={filter === 'uncounted' ? 'secondary' : 'primary'} onClick={() => setFilter('uncounted')}>Uncounted</Button>
                    <Button size="sm" variant={filter === 'counted' ? 'secondary' : 'primary'} onClick={() => setFilter('counted')}>Counted</Button>
                    <Button size="sm" variant={filter === 'discrepancies' ? 'secondary' : 'primary'} onClick={() => setFilter('discrepancies')}>Discrepancies</Button>
                </div>
                <div className="relative w-1/3">
                    <Input
                        type="text"
                        placeholder="Search items by name or code..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10"
                    />
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
                </div>
            </div>

            {loading ? (
                <p className="text-center text-gray-400 p-8">Loading inventory...</p>
            ) : (
                <StockCountList items={filteredItems} onCountChange={handleCountChange} />
            )}
        </div>
    );
};

export default StockTakePage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\TrackingPage.jsx
==================================================
import React from 'react';
import MainLayout from '../components/layout/MainLayout';
import LiveJobTracking from '../components/features/tracking/LiveTrackingTable';

const TrackingPage = () => {
  return (
    <MainLayout>
      <div className="space-y-8">
        <h2 className="text-3xl font-bold text-white">Live Job Tracking</h2>
        <LiveJobTracking />
      </div>
    </MainLayout>
  );
};

export default TrackingPage;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\UserManagementPage.jsx
==================================================
import React, { useState, useEffect } from 'react';
// import MainLayout from '../components/layout/MainLayout'; // REMOVE THIS IMPORT
import Input from '../components/ui/Input';
import Button from '../components/ui/Button';
import Dropdown from '../components/ui/Dropdown';
import { getAllUsers, updateUserRole, createUserWithRole, deleteUserWithRole } from '../api/firestore';
import { PlusCircle, Edit, Trash2, User, Mail, Shield } from 'lucide-react';

const UserManagementPage = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // State for adding new user
  const [newUserEmail, setNewUserEmail] = useState('');
  const [newUserPassword, setNewUserPassword] = useState(''); // Corrected line
  const [newUserRole, setNewUserRole] = useState('Workshop Employee'); // Default role for new users
  const [addingUser, setAddingUser] = useState(false);

  // State for editing existing user
  const [editingUserId, setEditingUserId] = useState(null);
  const [editingUserRole, setEditingUserRole] = useState('');
  const [editingUserName, setEditingUserName] = useState(''); // Assuming you might display name

  const availableRoles = [
    { id: 'Manager', name: 'Manager' },
    { id: 'QC Inspector', name: 'QC Inspector' },
    { id: 'Workshop Employee', name: 'Workshop Employee' },
  ];

  const fetchUsers = async () => {
    setLoading(true);
    setError(null);
    try {
      const fetchedUsers = await getAllUsers();
      setUsers(fetchedUsers);
    } catch (err) {
      console.error("Error fetching users:", err);
      setError("Failed to load user data.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const handleAddUser = async (e) => {
    e.preventDefault();
    if (!newUserEmail || !newUserPassword || !newUserRole) {
      setError("Email, password, and role are required for new users.");
      return;
    }
    setAddingUser(true);
    setError(null);
    try {
      // Call the Cloud Function to create user (function needs to be deployed first)
      const result = await createUserWithRole(newUserEmail, newUserPassword, newUserRole);
      alert(`User ${result.email} created successfully with role ${newUserRole}!`);
      setNewUserEmail('');
      setNewUserPassword('');
      setNewUserRole('Workshop Employee');
      fetchUsers(); // Refresh list
    } catch (err) {
      console.error("Error adding user:", err.message);
      setError(`Failed to add user: ${err.message}`);
    } finally {
      setAddingUser(false);
    }
  };

  const handleEditRole = (user) => {
    setEditingUserId(user.id);
    setEditingUserRole(user.role);
    setEditingUserName(user.email); // Use email as name for display
  };

  const handleUpdateRole = async (userId) => {
    setError(null);
    try {
      await updateUserRole(userId, editingUserRole);
      alert(`User role updated successfully for ${editingUserName}!`);
      setEditingUserId(null); // Exit editing mode
      fetchUsers(); // Refresh list
    } catch (err) {
      console.error("Error updating role:", err.message);
      setError(`Failed to update role: ${err.message}`);
    }
  };

  const handleCancelEdit = () => {
    setEditingUserId(null);
    setEditingUserRole('');
    setEditingUserName('');
  };

  const handleDeleteUser = async (userToDelete) => {
    if (window.confirm(`Are you sure you want to PERMANENTLY delete user ${userToDelete.email}? This action cannot be undone and will delete their authentication record and user document.`)) {
      setError(null);
      try {
        // Call the Cloud Function to delete user (function needs to be deployed first)
        await deleteUserWithRole(userToDelete.id);
        alert(`User ${userToDelete.email} deleted successfully!`);
        fetchUsers(); // Refresh list
      } catch (err) {
        console.error("Error deleting user:", err.message);
        setError(`Failed to delete user: ${err.message}`);
      }
    }
  };


  return (
    <div className="space-y-8">
      <h2 className="text-3xl font-bold text-white">User & Role Management</h2>
      <p className="text-gray-400">Manage application users, their roles, and linked employee profiles.</p>

      {error && <div className="p-3 bg-red-800 text-red-100 rounded-lg text-center">{error}</div>}

      {/* Add New User Form */}
      <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
        <h3 className="text-xl font-bold text-white mb-4 flex items-center"><PlusCircle size={24} className="mr-2 text-blue-400"/> Add New Application User</h3>
        <form onSubmit={handleAddUser} className="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
          <Input
            label="Email"
            type="email"
            value={newUserEmail}
            onChange={(e) => setNewUserEmail(e.target.value)}
            placeholder="user@company.com"
            required
          />
          <Input
            label="Password"
            type="password"
            value={newUserPassword}
            onChange={(e) => setNewUserPassword(e.target.value)}
            placeholder="********"
            required
          />
          <Dropdown
            label="Role"
            name="newUserRole"
            value={newUserRole}
            onChange={(e) => setNewUserRole(e.target.value)}
            options={availableRoles}
            required
          />
          <Button type="submit" disabled={addingUser} className="col-span-1">
            {addingUser ? 'Adding User...' : 'Add User'}
          </Button>
        </form>
      </div>

      {/* User List & Role Editor */}
      <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
        <h3 className="text-xl font-bold text-white mb-4 flex items-center"><User size={24} className="mr-2 text-purple-400"/> Existing Users</h3>
        <div className="overflow-x-auto">
          <table className="w-full text-left">
            <thead>
              <tr className="border-b border-gray-600">
                <th className="p-3 text-sm font-semibold text-gray-400">Email</th>
                <th className="p-3 text-sm font-semibold text-gray-400">Role</th>
                <th className="p-3 text-sm font-semibold text-gray-400">Actions</th>
              </tr>
            </thead>
            <tbody>
              {loading ? (
                <tr><td colSpan="3" className="text-center p-8 text-gray-400">Loading users...</td></tr>
              ) : users.length === 0 ? (
                <tr><td colSpan="3" className="text-center p-8 text-gray-400">No users found.</td></tr>
              ) : (
                users.map(user => (
                  <tr key={user.id} className="border-b border-gray-700">
                    <td className="p-3 text-gray-200 flex items-center gap-2">
                      <Mail size={16} className="text-gray-500"/>
                      {user.email}
                    </td>
                    <td className="p-3">
                      {editingUserId === user.id ? (
                        <Dropdown
                          name="editingUserRole"
                          value={editingUserRole}
                          onChange={(e) => setEditingUserRole(e.target.value)}
                          options={availableRoles}
                          className="w-full"
                        />
                      ) : (
                        <span className="flex items-center gap-2 text-gray-300">
                          <Shield size={16} className="text-gray-500"/>
                          {user.role}
                        </span>
                      )}
                    </td>
                    <td className="p-3 flex space-x-2">
                      {editingUserId === user.id ? (
                        <>
                          <Button variant="primary" onClick={() => handleUpdateRole(user.id)} className="py-1 px-3 text-xs">Save</Button>
                          <Button variant="secondary" onClick={handleCancelEdit} className="py-1 px-3 text-xs">Cancel</Button>
                        </>
                      ) : (
                        <>
                          <Button variant="secondary" onClick={() => handleEditRole(user)} className="py-1 px-3 text-xs"><Edit size={16} className="mr-1"/> Edit Role</Button>
                          <Button variant="danger" onClick={() => handleDeleteUser(user)} className="py-1 px-3 text-xs"><Trash2 size={16} className="mr-1"/> Delete</Button>
                        </>
                      )}
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default UserManagementPage;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\pages\ValuationPage.jsx
==================================================
// src/pages/ValuationPage.jsx (UPDATED)

import React, { useState, useEffect, useMemo } from 'react';
import Input from '../components/ui/Input';
import Button from '../components/ui/Button';
import { getProducts, getCompletedJobsInRange, getEmployees, getOverheadCategories, getOverheadExpenses, listenToJobCards } from '../api/firestore';
import { DollarSign, TrendingUp, Package, Percent } from 'lucide-react';
import WorkforceCapacityPlanner from '../components/intelligence/WorkforceCapacityPlanner';
import ProfitTargetMatrix from '../components/intelligence/ProfitTargetMatrix'; // Import the new component

const ValuationKpiCard = ({ icon, title, value, color }) => (
  <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 flex items-start space-x-4">
    <div className={`p-3 rounded-full ${color}`}>{icon}</div>
    <div>
      <p className="text-gray-400 text-sm">{title}</p>
      <p className="text-3xl font-bold text-white">{value}</p>
    </div>
  </div>
);

const ValuationPage = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Data States
  const [allProducts, setAllProducts] = useState([]);
  const [allEmployees, setAllEmployees] = useState([]);
  const [allOverheadExpenses, setAllOverheadExpenses] = useState([]);
  const [allJobs, setAllJobs] = useState([]);

  // States for historical period analysis
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [periodJobs, setPeriodJobs] = useState(null);

  useEffect(() => {
    // This effect fetches foundational data and listens for all jobs in real-time
    const fetchStaticData = async () => {
      setLoading(true);
      try {
        const [products, employees, overheadCats] = await Promise.all([
          getProducts(), getEmployees(), getOverheadCategories()
        ]);
        setAllProducts(products);
        setAllEmployees(employees);
        
        const expensePromises = overheadCats.map(cat => getOverheadExpenses(cat.id));
        const expenseResults = await Promise.all(expensePromises);
        setAllOverheadExpenses(expenseResults.flat());

        // Listen to all jobs for live calculations
        const unsubscribe = listenToJobCards((jobs) => {
            setAllJobs(jobs);
            setLoading(false);
        });
        return unsubscribe;

      } catch (err) {
        console.error("Error fetching static data:", err);
        setError("Failed to load foundational data.");
        setLoading(false);
      }
    };
    
    const unsubscribePromise = fetchStaticData();
    return () => {
        unsubscribePromise.then(unsubscribe => {
            if (unsubscribe) unsubscribe();
        });
    };
  }, []);

  const handleCalculateAnalysis = async () => {
    if (!startDate || !endDate) {
      setError("Please select both a start and end date.");
      return;
    }
    const startDateTime = new Date(startDate);
    const endDateTime = new Date(endDate);
    endDateTime.setHours(23, 59, 59, 999);

    const filteredJobs = allJobs.filter(job => {
        const completedDate = job.completedAt?.toDate();
        return job.status === 'Complete' && completedDate >= startDateTime && completedDate <= endDateTime;
    });
    setPeriodJobs(filteredJobs);
  };
  
  const masterFinancials = useMemo(() => {
    const productsMap = new Map(allProducts.map(p => [p.id, p]));
    const allCompletedJobs = allJobs.filter(j => j.status === 'Complete');

    let totalSales = 0;
    let totalMaterialCost = 0;
    allCompletedJobs.forEach(job => {
        const product = productsMap.get(job.partId);
        if (product && typeof product.sellingPrice === 'number') {
            totalSales += product.sellingPrice;
        }
        totalMaterialCost += job.materialCost || 0;
    });

    const historicalGrossMargin = totalSales > 0 ? ((totalSales - totalMaterialCost) / totalSales) * 100 : 35;

    const totalFixedCosts = allOverheadExpenses.reduce((sum, exp) => sum + (exp.amount || 0), 0);

    const employeesWithPerformance = allEmployees.map(emp => {
      const empJobs = allCompletedJobs.filter(job => job.employeeId === emp.id && job.status === 'Complete');
      if (empJobs.length === 0) return { ...emp, efficiency: 100 };
      
      let totalEfficiencyRatio = 0, jobsWithTime = 0;
      empJobs.forEach(job => {
        if (job.estimatedTime > 0 && job.startedAt && job.completedAt) {
          const durationSeconds = (job.completedAt.seconds - job.startedAt.seconds) - (job.totalPausedMilliseconds / 1000 || 0);
          if (durationSeconds > 0) {
            totalEfficiencyRatio += ((job.estimatedTime * 60) / durationSeconds);
            jobsWithTime++;
          }
        }
      });
      const avgEfficiency = jobsWithTime > 0 ? (totalEfficiencyRatio / jobsWithTime) * 100 : 100;
      return { ...emp, efficiency: avgEfficiency };
    });

    return { totalFixedCosts, historicalGrossMargin, employeesWithPerformance };
  }, [allProducts, allEmployees, allJobs, allOverheadExpenses]);

  const historicalPeriodAnalysis = useMemo(() => {
    if (!periodJobs) return null;

    let totalSales = 0;
    let totalCogs = 0;
    const productsMap = new Map(allProducts.map(p => [p.id, p]));

    periodJobs.forEach(job => {
        const product = productsMap.get(job.partId);
        if (product && typeof product.sellingPrice === 'number') {
            totalSales += product.sellingPrice;
        }
        if (typeof job.totalCost === 'number') totalCogs += job.totalCost;
    });

    const grossProfit = totalSales - totalCogs;
    const grossProfitMargin = totalSales > 0 ? (grossProfit / totalSales) * 100 : 0;
    
    return { totalSales, totalCogs, grossProfit, grossProfitMargin };
  }, [periodJobs, allProducts]);


  if (loading) return <p>Loading Financials & Planning...</p>

  return (
    <div className="space-y-8">
      <h2 className="text-3xl font-bold text-white">Financials & Planning</h2>

      <ProfitTargetMatrix 
        totalFixedCosts={masterFinancials.totalFixedCosts}
        historicalGrossMargin={masterFinancials.historicalGrossMargin}
      />
      
      <WorkforceCapacityPlanner 
        realEmployees={masterFinancials.employeesWithPerformance}
      />

      <div className="bg-gray-800 p-6 rounded-xl border border-gray-700">
        <h3 className="text-xl font-bold text-white mb-4">Historical Performance Analysis</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end mb-4">
          <Input label="Start Date" type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
          <Input label="End Date" type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
          <Button onClick={handleCalculateAnalysis} disabled={loading || !startDate || !endDate}>
            Analyze Period
          </Button>
        </div>
        {error && <p className="text-red-400 text-center">{error}</p>}
      </div>

      {historicalPeriodAnalysis && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 animate-fade-in">
            <ValuationKpiCard icon={<DollarSign size={24} />} title="Total Revenue" value={`R ${historicalPeriodAnalysis.totalSales.toFixed(2)}`} color="bg-green-500/20 text-green-400" />
            <ValuationKpiCard icon={<DollarSign size={24} />} title="Total COGS" value={`R ${historicalPeriodAnalysis.totalCogs.toFixed(2)}`} color="bg-red-500/20 text-red-400" />
            <ValuationKpiCard icon={<Percent size={24} />} title="Gross Profit Margin" value={`${historicalPeriodAnalysis.grossProfitMargin.toFixed(1)}%`} color={historicalPeriodAnalysis.grossProfitMargin >= 0 ? "bg-teal-500/20 text-teal-400" : "bg-red-500/20 text-red-400"} />
        </div>
      )}
    </div>
  );
};

export default ValuationPage;



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\utils\jobUtils.js
==================================================
// src/utils/jobUtils.js

import { CATALYST_RULES } from '../config';

/**
 * Processes raw recipe consumables into a display-friendly format, calculating catalyst additions.
 * This centralized function ensures consistent consumable processing across the app.
 * @param {Array} consumablesFromRecipe - The raw consumables array from a job or recipe.
 * @param {Array} allInventoryItems - The master list of all inventory items.
 * @param {number} temperature - The current temperature for catalyst calculation.
 * @returns {Array} A list of processed consumables ready for display or costing.
 */
export const processConsumables = (consumablesFromRecipe, allInventoryItems, temperature) => {
    if (!consumablesFromRecipe || !Array.isArray(consumablesFromRecipe)) return [];

    const processedList = [];
    const catalystItem = allInventoryItems.find(c => c.name.toLowerCase().includes('catalyst') || c.name.toLowerCase().includes('hardener'));

    for (const consumable of consumablesFromRecipe) {
        // Find the full details from the master inventory list using either itemId (from recipe) or id (from inventory)
        const masterItem = allInventoryItems.find(c => c.id === (consumable.itemId || consumable.id));
        const itemDetails = masterItem || consumable;
        if (!itemDetails) continue;

        if (consumable.type === 'fixed') {
            processedList.push({ ...itemDetails, quantity: consumable.quantity, notes: '' });
            if (itemDetails.requiresCatalyst && catalystItem && temperature) {
                let percentage = 0;
                for (const rule of CATALYST_RULES) {
                    if (temperature <= rule.temp_max) {
                        percentage = rule.percentage;
                        break;
                    }
                }
                if (percentage > 0) {
                    const calculatedQty = consumable.quantity * (percentage / 100);
                    processedList.push({ ...catalystItem, quantity: calculatedQty, notes: `(Auto-added at ${percentage}% for ${temperature}Â°C)` });
                }
            }
        } else if (consumable.type === 'dimensional') {
            processedList.push({ ...itemDetails, cuts: consumable.cuts, notes: `See ${consumable.cuts.length} cutting instruction(s)` });
        } else if (!consumable.type && consumable.quantity) {
            // This handles cases where old data might not have a 'type' but has a quantity
            processedList.push({ ...itemDetails, notes: '' });
        }
    }
    return processedList;
};

/**
 * Calculates the duration of a job.
 * @param {Object} job - The job object from Firestore.
 * @param {number} currentTime - The current time (Date.now()) for live calculation.
 * @returns {{text: string, totalMinutes: number} | null} - The formatted duration and total minutes, or null.
 */
export const calculateJobDuration = (job, currentTime) => {
    if (!job.startedAt) return null;

    let durationSeconds;
    const startTime = job.startedAt.seconds * 1000;
    const pausedMilliseconds = job.totalPausedMilliseconds || 0;

    // Determine the end time based on job status
    if (['Complete', 'Awaiting QC', 'Issue', 'Archived - Issue'].includes(job.status)) {
        // For completed/finalized jobs, use the completedAt timestamp
        if (!job.completedAt) return null;
        durationSeconds = (job.completedAt.seconds * 1000 - startTime - pausedMilliseconds) / 1000;
    } else if (job.status === 'In Progress') {
        // For active jobs, use the current time
        durationSeconds = (currentTime - startTime - pausedMilliseconds) / 1000;
    } else if (job.status === 'Paused' && job.pausedAt) {
        // For paused jobs, use the pausedAt timestamp
        durationSeconds = (job.pausedAt.seconds * 1000 - startTime - pausedMilliseconds) / 1000;
    } else {
        // For other statuses (e.g., Pending or unexpected), duration is not calculable yet
        return null;
    }
    
    // Ensure duration is not negative in case of data inconsistencies
    if (durationSeconds < 0) return null;

    const minutes = Math.floor(durationSeconds / 60);
    const seconds = Math.floor(durationSeconds % 60);

    return { text: `${minutes}m ${seconds}s`, totalMinutes: durationSeconds / 60 };
};



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\App.css
==================================================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\App.jsx
==================================================
// src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { useAuth } from './contexts/AuthContext';

// Layouts & Guards
import ProtectedRoute from './components/layout/ProtectedRoute';
import RoleBasedRoute from './components/layout/RoleBasedRoute';
import MainLayout from './components/layout/MainLayout';

// Pages
import LoginPage from './pages/Login';
import DashboardPage from './pages/DashboardPage';
import StockControlPage from './pages/StockControlPage';
import JobCreatorPage from './pages/JobCreatorPage';
import LiveTrackingPage from './pages/LiveTrackingPage';
import ScannerPage from './pages/ScannerPage';
import QcPage from './pages/QcPage';
import IssuesPage from './pages/IssuesPage';
import PerformancePage from './pages/PerformancePage';
import EmployeeIntelligencePage from './pages/EmployeeIntelligencePage';
import ProductViabilityPage from './pages/ProductViabilityPage';
import SettingsPage from './pages/SettingsPage';
import PayrollPage from './pages/PayrollPage';
import ValuationPage from './pages/ValuationPage';
import CalendarPage from './pages/CalendarPage';
import MarketingPage from './pages/MarketingPage';
import QuotingPage from './pages/QuotingPage';
import JobCardAdjustmentPage from './pages/JobCardAdjustmentPage'; // Import the new component


function App() {
    const { user } = useAuth();

    return (
        <Router>
            <Routes>
                <Route path="/login" element={user ? <Navigate to="/" /> : <LoginPage />} />
                <Route path="*" element={
                    <ProtectedRoute>
                        <MainLayout>
                            <Routes>
                                <Route path="/" element={<DashboardPage />} />
                                <Route path="/tracking" element={<LiveTrackingPage />} />
                                <Route path="/scan" element={<ScannerPage />} />
                                <Route path="/qc" element={ <RoleBasedRoute roles={['Manager', 'QC Inspector']}><QcPage /></RoleBasedRoute> } />
                                <Route path="/stock" element={ <RoleBasedRoute roles={['Manager']}><StockControlPage /></RoleBasedRoute> } />
                                <Route path="/creator" element={ <RoleBasedRoute roles={['Manager']}><JobCreatorPage /></RoleBasedRoute> } />
                                <Route path="/issues" element={ <RoleBasedRoute roles={['Manager']}><IssuesPage /></RoleBasedRoute> } />
                                <Route path="/performance" element={ <RoleBasedRoute roles={['Manager']}><PerformancePage /></RoleBasedRoute> } />
                                <Route path="/employee/:employeeId" element={ <RoleBasedRoute roles={['Manager']}><EmployeeIntelligencePage /></RoleBasedRoute> } />
                                <Route path="/profitability" element={ <RoleBasedRoute roles={['Manager', 'Marketing']}><ProductViabilityPage /></RoleBasedRoute> } />
                                <Route path="/payroll" element={ <RoleBasedRoute roles={['Manager', 'Office Manager']}><PayrollPage /></RoleBasedRoute> } />
                                <Route path="/valuation" element={ <RoleBasedRoute roles={['Manager', 'Office Manager']}><ValuationPage /></RoleBasedRoute> } />
                                <Route path="/calendar" element={ <RoleBasedRoute roles={['Manager', 'Workshop Employee']}><CalendarPage /></RoleBasedRoute> } />
                                <Route path="/settings" element={ <RoleBasedRoute roles={['Manager']}><SettingsPage /></RoleBasedRoute> } />
                                <Route path="/marketing" element={ <RoleBasedRoute roles={['Manager', 'Marketing']}><MarketingPage /></RoleBasedRoute> } />
                                <Route path="/quotes" element={ <RoleBasedRoute roles={['Manager', 'Office Manager', 'Marketing']}><QuotingPage /></RoleBasedRoute> } />
                                <Route path="/adjustment" element={<RoleBasedRoute roles={['Manager']}><JobCardAdjustmentPage /></RoleBasedRoute>} /> {/* ADDED ROUTE */}
                                {/* Fallback route if no other route matches */}
                                <Route path="*" element={<Navigate to="/" />} />
                            </Routes>
                        </MainLayout>
                    </ProtectedRoute>
                } />
            </Routes>
        </Router>
    );
}

export default App;


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\config.js
==================================================
// src/config.js

/**
 * Defines the rules for calculating the percentage of catalyst needed based on ambient temperature.
 * This central configuration makes it easy to adjust business rules without changing component logic.
 */
export const CATALYST_RULES = [
    { temp_max: 18, percentage: 3.0 },
    { temp_max: 28, percentage: 2.0 },
    { temp_max: 100, percentage: 1.0 }
];


==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\index.css
==================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* --- GLOBAL DARK THEME BACKGROUND --- */
/* Ensure the html, body, and the main React root element (#root) are dark */
html, body, #root {
  height: 100%; /* Ensure they take full height */
  background-color: #111827; /* Tailwind's gray-900 */
}


/* --- Dropdown options dark background and white text --- */
select option {
  background-color: #374151; /* This is Tailwind's gray-700 */
  color: #ffffff;
}

/* --- Hide the default spinner buttons on number inputs --- */
input[type=number]::-webkit-inner-spin-button, 
input[type=number]::-webkit-outer-spin-button { 
  -webkit-appearance: none; 
  margin: 0; 
}
input[type=number] {
  -moz-appearance: textfield; /* For Firefox */
}



==================================================
FILE: C:\Development\TOJEM-OS\tojem-os\src\main.jsx
==================================================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css';
import { AuthProvider } from './contexts/AuthContext.jsx';
import './api/firebase.js'; // <-- ADD THIS LINE

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <AuthProvider>
      <App />
    </AuthProvider>
  </React.StrictMode>
);
